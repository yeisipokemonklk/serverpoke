{
  "version": 3,
  "sources": ["../../../lib/database.ts"],
  "sourcesContent": ["/**\r\n * Database abstraction layer that's vaguely ORM-like.\r\n * Modern (Promises, strict types, tagged template literals), but ORMs\r\n * are a bit _too_ magical for me, so none of that magic here.\r\n *\r\n * @author Zarel\r\n */\r\n\r\nimport * as mysql from 'mysql2';\r\nimport * as pg from 'pg';\r\n\r\nexport type BasicSQLValue = string | number | null;\r\n// eslint-disable-next-line\r\nexport type SQLRow = {[k: string]: BasicSQLValue};\r\nexport type SQLValue = BasicSQLValue | SQLStatement | PartialOrSQL<SQLRow> | BasicSQLValue[] | undefined;\r\n\r\nexport class SQLStatement {\r\n\tsql: string[];\r\n\tvalues: BasicSQLValue[];\r\n\tconstructor(strings: TemplateStringsArray, values: SQLValue[]) {\r\n\t\tthis.sql = [strings[0]];\r\n\t\tthis.values = [];\r\n\t\tfor (let i = 0; i < strings.length; i++) {\r\n\t\t\tthis.append(values[i], strings[i + 1]);\r\n\t\t}\r\n\t}\r\n\tappend(value: SQLValue, nextString = ''): this {\r\n\t\tif (value instanceof SQLStatement) {\r\n\t\t\tif (!value.sql.length) return this;\r\n\t\t\tconst oldLength = this.sql.length;\r\n\t\t\tthis.sql = this.sql.concat(value.sql.slice(1));\r\n\t\t\tthis.sql[oldLength - 1] += value.sql[0];\r\n\t\t\tthis.values = this.values.concat(value.values);\r\n\t\t\tif (nextString) this.sql[this.sql.length - 1] += nextString;\r\n\t\t} else if (typeof value === 'string' || typeof value === 'number' || value === null) {\r\n\t\t\tthis.values.push(value);\r\n\t\t\tthis.sql.push(nextString);\r\n\t\t} else if (value === undefined) {\r\n\t\t\tthis.sql[this.sql.length - 1] += nextString;\r\n\t\t} else if (Array.isArray(value)) {\r\n\t\t\tif ('\"`'.includes(this.sql[this.sql.length - 1].slice(-1))) {\r\n\t\t\t\t// \"`a`, `b`\" syntax\r\n\t\t\t\tconst quoteChar = this.sql[this.sql.length - 1].slice(-1);\r\n\t\t\t\tfor (const col of value) {\r\n\t\t\t\t\tthis.append(col, `${quoteChar}, ${quoteChar}`);\r\n\t\t\t\t}\r\n\t\t\t\tthis.sql[this.sql.length - 1] = this.sql[this.sql.length - 1].slice(0, -4) + nextString;\r\n\t\t\t} else {\r\n\t\t\t\t// \"1, 2\" syntax\r\n\t\t\t\tfor (const val of value) {\r\n\t\t\t\t\tthis.append(val, `, `);\r\n\t\t\t\t}\r\n\t\t\t\tthis.sql[this.sql.length - 1] = this.sql[this.sql.length - 1].slice(0, -2) + nextString;\r\n\t\t\t}\r\n\t\t} else if (this.sql[this.sql.length - 1].endsWith('(')) {\r\n\t\t\t// \"(`a`, `b`) VALUES (1, 2)\" syntax\r\n\t\t\tthis.sql[this.sql.length - 1] += `\"`;\r\n\t\t\tfor (const col in value) {\r\n\t\t\t\tthis.append(col, `\", \"`);\r\n\t\t\t}\r\n\t\t\tthis.sql[this.sql.length - 1] = this.sql[this.sql.length - 1].slice(0, -4) + `\") VALUES (`;\r\n\t\t\tfor (const col in value) {\r\n\t\t\t\tthis.append(value[col], `, `);\r\n\t\t\t}\r\n\t\t\tthis.sql[this.sql.length - 1] = this.sql[this.sql.length - 1].slice(0, -2) + nextString;\r\n\t\t} else if (this.sql[this.sql.length - 1].toUpperCase().endsWith(' SET ')) {\r\n\t\t\t// \"`a` = 1, `b` = 2\" syntax\r\n\t\t\tthis.sql[this.sql.length - 1] += `\"`;\r\n\t\t\tfor (const col in value) {\r\n\t\t\t\tthis.append(col, `\" = `);\r\n\t\t\t\tthis.append(value[col], `, \"`);\r\n\t\t\t}\r\n\t\t\tthis.sql[this.sql.length - 1] = this.sql[this.sql.length - 1].slice(0, -3) + nextString;\r\n\t\t} else {\r\n\t\t\tthrow new Error(\r\n\t\t\t\t`Objects can only appear in (obj) or after SET; ` +\r\n\t\t\t\t`unrecognized: ${this.sql[this.sql.length - 1]}[obj]${nextString}`\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n}\r\n\r\n/**\r\n * Tag function for SQL, with some magic.\r\n *\r\n * * `` SQL`UPDATE table SET a = ${'hello\"'}` ``\r\n *   * `` `UPDATE table SET a = 'hello'` ``\r\n *\r\n * Values surrounded by `\"` or `` ` `` become identifiers:\r\n *\r\n * * ``` SQL`SELECT * FROM \"${'table'}\"` ```\r\n *   * `` `SELECT * FROM \"table\"` ``\r\n *\r\n * (Make sure to use `\"` for Postgres and `` ` `` for MySQL.)\r\n *\r\n * Objects preceded by SET become setters:\r\n *\r\n * * `` SQL`UPDATE table SET ${{a: 1, b: 2}}` ``\r\n *   * `` `UPDATE table SET \"a\" = 1, \"b\" = 2` ``\r\n *\r\n * Objects surrounded by `()` become keys and values:\r\n *\r\n * * `` SQL`INSERT INTO table (${{a: 1, b: 2}})` ``\r\n *   * `` `INSERT INTO table (\"a\", \"b\") VALUES (1, 2)` ``\r\n *\r\n * Arrays become lists; surrounding by `\"` or `` ` `` turns them into lists of names:\r\n *\r\n * * `` SQL`INSERT INTO table (\"${['a', 'b']}\") VALUES (${[1, 2]})` ``\r\n *   * `` `INSERT INTO table (\"a\", \"b\") VALUES (1, 2)` ``\r\n */\r\nexport function SQL(strings: TemplateStringsArray, ...values: SQLValue[]) {\r\n\treturn new SQLStatement(strings, values);\r\n}\r\n\r\nexport interface ResultRow {[k: string]: BasicSQLValue}\r\n\r\nexport const connectedDatabases: Database[] = [];\r\n\r\nexport abstract class Database<Pool extends mysql.Pool | pg.Pool = mysql.Pool | pg.Pool, OkPacket = unknown> {\r\n\tconnection: Pool;\r\n\tprefix: string;\r\n\ttype = '';\r\n\tconstructor(connection: Pool, prefix = '') {\r\n\t\tthis.prefix = prefix;\r\n\t\tthis.connection = connection;\r\n\t\tconnectedDatabases.push(this);\r\n\t}\r\n\tabstract _resolveSQL(query: SQLStatement): [query: string, values: BasicSQLValue[]];\r\n\tabstract _query(sql: string, values: BasicSQLValue[]): Promise<any>;\r\n\tabstract _queryExec(sql: string, values: BasicSQLValue[]): Promise<OkPacket>;\r\n\tabstract escapeId(param: string): string;\r\n\tquery<T = ResultRow>(sql: SQLStatement): Promise<T[]>;\r\n\tquery<T = ResultRow>(): (strings: TemplateStringsArray, ...rest: SQLValue[]) => Promise<T[]>;\r\n\tquery<T = ResultRow>(sql?: SQLStatement) {\r\n\t\tif (!sql) return (strings: any, ...rest: any) => this.query<T>(new SQLStatement(strings, rest));\r\n\r\n\t\tconst [query, values] = this._resolveSQL(sql);\r\n\t\treturn this._query(query, values);\r\n\t}\r\n\tqueryOne<T = ResultRow>(sql: SQLStatement): Promise<T | undefined>;\r\n\tqueryOne<T = ResultRow>(): (strings: TemplateStringsArray, ...rest: SQLValue[]) => Promise<T | undefined>;\r\n\tqueryOne<T = ResultRow>(sql?: SQLStatement) {\r\n\t\tif (!sql) return (strings: any, ...rest: any) => this.queryOne<T>(new SQLStatement(strings, rest));\r\n\r\n\t\treturn this.query<T>(sql).then(res => Array.isArray(res) ? res[0] : res);\r\n\t}\r\n\tqueryExec(sql: SQLStatement): Promise<OkPacket>;\r\n\tqueryExec(): (strings: TemplateStringsArray, ...rest: SQLValue[]) => Promise<OkPacket>;\r\n\tqueryExec(sql?: SQLStatement) {\r\n\t\tif (!sql) return (strings: any, ...rest: any) => this.queryExec(new SQLStatement(strings, rest));\r\n\r\n\t\tconst [query, values] = this._resolveSQL(sql);\r\n\t\treturn this._queryExec(query, values);\r\n\t}\r\n\tgetTable<Row>(name: string, primaryKeyName: keyof Row & string | null = null): DatabaseTable<Row, this> {\r\n\t\treturn new DatabaseTable<Row, this>(this, name, primaryKeyName);\r\n\t}\r\n\tclose() {\r\n\t\tvoid this.connection.end();\r\n\t}\r\n}\r\n\r\ntype PartialOrSQL<T> = {\r\n\t[P in keyof T]?: T[P] | SQLStatement;\r\n};\r\n\r\ntype OkPacketOf<DB extends Database> = DB extends Database<any, infer T> ? T : never;\r\n\r\n// Row extends SQLRow but TS doesn't support closed types so we can't express this\r\nexport class DatabaseTable<Row, DB extends Database> {\r\n\tdb: DB;\r\n\tname: string;\r\n\tprimaryKeyName: keyof Row & string | null;\r\n\tconstructor(\r\n\t\tdb: DB,\r\n\t\tname: string,\r\n\t\tprimaryKeyName: keyof Row & string | null = null\r\n\t) {\r\n\t\tthis.db = db;\r\n\t\tthis.name = db.prefix + name;\r\n\t\tthis.primaryKeyName = primaryKeyName;\r\n\t}\r\n\tescapeId(param: string) {\r\n\t\treturn this.db.escapeId(param);\r\n\t}\r\n\r\n\t// raw\r\n\r\n\tquery<T = Row>(sql: SQLStatement): Promise<T[]>;\r\n\tquery<T = Row>(): (strings: TemplateStringsArray, ...rest: SQLValue[]) => Promise<T[]>;\r\n\tquery<T = Row>(sql?: SQLStatement) {\r\n\t\treturn this.db.query<T>(sql as any) as any;\r\n\t}\r\n\tqueryOne<T = Row>(sql: SQLStatement): Promise<T | undefined>;\r\n\tqueryOne<T = Row>(): (strings: TemplateStringsArray, ...rest: SQLValue[]) => Promise<T | undefined>;\r\n\tqueryOne<T = Row>(sql?: SQLStatement) {\r\n\t\treturn this.db.queryOne<T>(sql as any) as any;\r\n\t}\r\n\tqueryExec(sql: SQLStatement): Promise<OkPacketOf<DB>>;\r\n\tqueryExec(): (strings: TemplateStringsArray, ...rest: SQLValue[]) => Promise<OkPacketOf<DB>>;\r\n\tqueryExec(sql?: SQLStatement) {\r\n\t\treturn this.db.queryExec(sql as any) as any;\r\n\t}\r\n\r\n\t// low-level\r\n\r\n\tselectAll<T = Row>(entries?: (keyof Row & string)[] | SQLStatement):\r\n\t(strings: TemplateStringsArray, ...rest: SQLValue[]) => Promise<T[]> {\r\n\t\tif (!entries) entries = SQL`*`;\r\n\t\tif (Array.isArray(entries)) entries = SQL`\"${entries}\"`;\r\n\t\treturn (strings, ...rest) =>\r\n\t\t\tthis.query<T>()`SELECT ${entries} FROM \"${this.name}\" ${new SQLStatement(strings, rest)}`;\r\n\t}\r\n\tselectOne<T = Row>(entries?: (keyof Row & string)[] | SQLStatement):\r\n\t(strings: TemplateStringsArray, ...rest: SQLValue[]) => Promise<T | undefined> {\r\n\t\tif (!entries) entries = SQL`*`;\r\n\t\tif (Array.isArray(entries)) entries = SQL`\"${entries}\"`;\r\n\t\treturn (strings, ...rest) =>\r\n\t\t\tthis.queryOne<T>()`SELECT ${entries} FROM \"${this.name}\" ${new SQLStatement(strings, rest)} LIMIT 1`;\r\n\t}\r\n\tupdateAll(partialRow: PartialOrSQL<Row>):\r\n\t(strings: TemplateStringsArray, ...rest: SQLValue[]) => Promise<OkPacketOf<DB>> {\r\n\t\treturn (strings, ...rest) =>\r\n\t\t\tthis.queryExec()`UPDATE \"${this.name}\" SET ${partialRow as any} ${new SQLStatement(strings, rest)}`;\r\n\t}\r\n\tupdateOne(partialRow: PartialOrSQL<Row>):\r\n\t(strings: TemplateStringsArray, ...rest: SQLValue[]) => Promise<OkPacketOf<DB>> {\r\n\t\treturn (s, ...r) =>\r\n\t\t\tthis.queryExec()`UPDATE \"${this.name}\" SET ${partialRow as any} ${new SQLStatement(s, r)} LIMIT 1`;\r\n\t}\r\n\tdeleteAll():\r\n\t(strings: TemplateStringsArray, ...rest: SQLValue[]) => Promise<OkPacketOf<DB>> {\r\n\t\treturn (strings, ...rest) =>\r\n\t\t\tthis.queryExec()`DELETE FROM \"${this.name}\" ${new SQLStatement(strings, rest)}`;\r\n\t}\r\n\tdeleteOne():\r\n\t(strings: TemplateStringsArray, ...rest: SQLValue[]) => Promise<OkPacketOf<DB>> {\r\n\t\treturn (strings, ...rest) =>\r\n\t\t\tthis.queryExec()`DELETE FROM \"${this.name}\" ${new SQLStatement(strings, rest)} LIMIT 1`;\r\n\t}\r\n\teval<T>():\r\n\t(strings: TemplateStringsArray, ...rest: SQLValue[]) => Promise<T | undefined> {\r\n\t\treturn (strings, ...rest) =>\r\n\t\t\tthis.queryOne<{result: T}>(\r\n\t\t\t)`SELECT ${new SQLStatement(strings, rest)} AS result FROM \"${this.name}\" LIMIT 1`\r\n\t\t\t\t.then(row => row?.result);\r\n\t}\r\n\r\n\t// high-level\r\n\r\n\tinsert(partialRow: PartialOrSQL<Row>, where?: SQLStatement) {\r\n\t\treturn this.queryExec()`INSERT INTO \"${this.name}\" (${partialRow as SQLValue}) ${where}`;\r\n\t}\r\n\tinsertIgnore(partialRow: PartialOrSQL<Row>, where?: SQLStatement) {\r\n\t\treturn this.queryExec()`INSERT IGNORE INTO \"${this.name}\" (${partialRow as SQLValue}) ${where}`;\r\n\t}\r\n\tasync tryInsert(partialRow: PartialOrSQL<Row>, where?: SQLStatement) {\r\n\t\ttry {\r\n\t\t\treturn await this.insert(partialRow, where);\r\n\t\t} catch (err: any) {\r\n\t\t\tif (err.code === 'ER_DUP_ENTRY') {\r\n\t\t\t\treturn undefined;\r\n\t\t\t}\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t}\r\n\tupsert(partialRow: PartialOrSQL<Row>, partialUpdate = partialRow, where?: SQLStatement) {\r\n\t\tif (this.db.type === 'pg') {\r\n\t\t\treturn this.queryExec(\r\n\t\t\t)`INSERT INTO \"${this.name}\" (${partialRow as any}) ON CONFLICT (${this.primaryKeyName\r\n\t\t\t}) DO UPDATE ${partialUpdate as any} ${where}`;\r\n\t\t}\r\n\t\treturn this.queryExec(\r\n\t\t)`INSERT INTO \"${this.name}\" (${partialRow as any}) ON DUPLICATE KEY UPDATE ${partialUpdate as any} ${where}`;\r\n\t}\r\n\tset(primaryKey: BasicSQLValue, partialRow: PartialOrSQL<Row>, where?: SQLStatement) {\r\n\t\tif (!this.primaryKeyName) throw new Error(`Cannot set() without a single-column primary key`);\r\n\t\tpartialRow[this.primaryKeyName] = primaryKey as any;\r\n\t\treturn this.replace(partialRow, where);\r\n\t}\r\n\treplace(partialRow: PartialOrSQL<Row>, where?: SQLStatement) {\r\n\t\treturn this.queryExec()`REPLACE INTO \"${this.name}\" (${partialRow as SQLValue}) ${where}`;\r\n\t}\r\n\tget(primaryKey: BasicSQLValue, entries?: (keyof Row & string)[] | SQLStatement) {\r\n\t\tif (!this.primaryKeyName) throw new Error(`Cannot get() without a single-column primary key`);\r\n\t\treturn this.selectOne(entries)`WHERE \"${this.primaryKeyName}\" = ${primaryKey}`;\r\n\t}\r\n\tdelete(primaryKey: BasicSQLValue) {\r\n\t\tif (!this.primaryKeyName) throw new Error(`Cannot delete() without a single-column primary key`);\r\n\t\treturn this.deleteAll()`WHERE \"${this.primaryKeyName}\" = ${primaryKey} LIMIT 1`;\r\n\t}\r\n\tupdate(primaryKey: BasicSQLValue, data: PartialOrSQL<Row>) {\r\n\t\tif (!this.primaryKeyName) throw new Error(`Cannot update() without a single-column primary key`);\r\n\t\treturn this.updateAll(data)`WHERE \"${this.primaryKeyName}\" = ${primaryKey} LIMIT 1`;\r\n\t}\r\n}\r\n\r\nexport class MySQLDatabase extends Database<mysql.Pool, mysql.OkPacket> {\r\n\toverride type = 'mysql' as const;\r\n\tconstructor(config: mysql.PoolOptions & {prefix?: string}) {\r\n\t\tconst prefix = config.prefix || \"\";\r\n\t\tif (config.prefix) {\r\n\t\t\tconfig = {...config};\r\n\t\t\tdelete config.prefix;\r\n\t\t}\r\n\t\tsuper(mysql.createPool(config), prefix);\r\n\t}\r\n\toverride _resolveSQL(query: SQLStatement): [query: string, values: BasicSQLValue[]] {\r\n\t\tlet sql = query.sql[0];\r\n\t\tconst values = [];\r\n\t\tfor (let i = 0; i < query.values.length; i++) {\r\n\t\t\tconst value = query.values[i];\r\n\t\t\tif (query.sql[i + 1].startsWith('`') || query.sql[i + 1].startsWith('\"')) {\r\n\t\t\t\tsql = sql.slice(0, -1) + this.escapeId('' + value) + query.sql[i + 1].slice(1);\r\n\t\t\t} else {\r\n\t\t\t\tsql += '?' + query.sql[i + 1];\r\n\t\t\t\tvalues.push(value);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn [sql, values];\r\n\t}\r\n\toverride _query(query: string, values: BasicSQLValue[]): Promise<any> {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tthis.connection.query(query, values, (e, results: any) => {\r\n\t\t\t\tif (e) {\r\n\t\t\t\t\treturn reject(new Error(`${e.message} (${query}) (${values}) [${e.code}]`));\r\n\t\t\t\t}\r\n\t\t\t\tif (Array.isArray(results)) {\r\n\t\t\t\t\tfor (const row of results) {\r\n\t\t\t\t\t\tfor (const col in row) {\r\n\t\t\t\t\t\t\tif (Buffer.isBuffer(row[col])) row[col] = row[col].toString();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn resolve(results);\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\toverride _queryExec(sql: string, values: BasicSQLValue[]): Promise<mysql.OkPacket> {\r\n\t\treturn this._query(sql, values);\r\n\t}\r\n\toverride escapeId(id: string) {\r\n\t\treturn mysql.escapeId(id);\r\n\t}\r\n}\r\n\r\nexport class PGDatabase extends Database<pg.Pool, {affectedRows: number | null}> {\r\n\toverride type = 'pg' as const;\r\n\tconstructor(config: pg.PoolConfig) {\r\n\t\tsuper(new pg.Pool(config));\r\n\t}\r\n\toverride _resolveSQL(query: SQLStatement): [query: string, values: BasicSQLValue[]] {\r\n\t\tlet sql = query.sql[0];\r\n\t\tconst values = [];\r\n\t\tlet paramCount = 0;\r\n\t\tfor (let i = 0; i < query.values.length; i++) {\r\n\t\t\tconst value = query.values[i];\r\n\t\t\tif (query.sql[i + 1].startsWith('`') || query.sql[i + 1].startsWith('\"')) {\r\n\t\t\t\tsql = sql.slice(0, -1) + this.escapeId('' + value) + query.sql[i + 1].slice(1);\r\n\t\t\t} else {\r\n\t\t\t\tparamCount++;\r\n\t\t\t\tsql += `$${paramCount}` + query.sql[i + 1];\r\n\t\t\t\tvalues.push(value);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn [sql, values];\r\n\t}\r\n\toverride _query(query: string, values: BasicSQLValue[]) {\r\n\t\treturn this.connection.query(query, values).then(res => res.rows);\r\n\t}\r\n\toverride _queryExec(query: string, values: BasicSQLValue[]) {\r\n\t\treturn this.connection.query<never>(query, values).then(res => ({affectedRows: res.rowCount}));\r\n\t}\r\n\toverride escapeId(id: string) {\r\n\t\t// @ts-expect-error @types/pg really needs to be updated\r\n\t\treturn pg.escapeIdentifier(id);\r\n\t}\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
