{
  "version": 3,
  "sources": ["../../../sim/side.ts"],
  "sourcesContent": ["/**\r\n * Simulator Side\r\n * Pokemon Showdown - http://pokemonshowdown.com/\r\n *\r\n * There's a lot of ambiguity between the terms \"player\", \"side\", \"team\",\r\n * and \"half-field\", which I'll try to explain here:\r\n *\r\n * These terms usually all mean the same thing. The exceptions are:\r\n *\r\n * - Multi-battle: there are 2 half-fields, 2 teams, 4 sides\r\n *\r\n * - Free-for-all: there are 2 half-fields, 4 teams, 4 sides\r\n *\r\n * \"Half-field\" is usually abbreviated to \"half\".\r\n *\r\n * Function naming will be very careful about which term to use. Pay attention\r\n * if it's relevant to your code.\r\n *\r\n * @license MIT\r\n */\r\n\r\nimport {Utils} from '../lib';\r\nimport type {RequestState} from './battle';\r\nimport {Pokemon, EffectState} from './pokemon';\r\nimport {State} from './state';\r\nimport {toID} from './dex';\r\n\r\n/** A single action that can be chosen. */\r\nexport interface ChosenAction {\r\n\tchoice: 'move' | 'switch' | 'instaswitch' | 'revivalblessing' | 'team' | 'shift' | 'pass'; \t// action type\r\n\tpokemon?: Pokemon; // the pokemon doing the action\r\n\ttargetLoc?: number; // relative location of the target to pokemon (move action only)\r\n\tmoveid: string; // a move to use (move action only)\r\n\tmove?: ActiveMove; // the active move corresponding to moveid (move action only)\r\n\ttarget?: Pokemon; // the target of the action\r\n\tindex?: number; // the chosen index in Team Preview\r\n\tside?: Side; // the action's side\r\n\tmega?: boolean | null; // true if megaing or ultra bursting\r\n\tzmove?: string; // if zmoving, the name of the zmove\r\n\tmaxMove?: string; // if dynamaxed, the name of the max move\r\n\tterastallize?: string; // if terastallizing, tera type\r\n\tpriority?: number; // priority of the action\r\n}\r\n\r\n/** What the player has chosen to happen. */\r\nexport interface Choice {\r\n\tcantUndo: boolean; // true if the choice can't be cancelled because of the maybeTrapped issue\r\n\terror: string; // contains error text in the case of a choice error\r\n\tactions: ChosenAction[]; // array of chosen actions\r\n\tforcedSwitchesLeft: number; // number of switches left that need to be performed\r\n\tforcedPassesLeft: number; // number of passes left that need to be performed\r\n\tswitchIns: Set<number>; // indexes of pokemon chosen to switch in\r\n\tzMove: boolean; // true if a Z-move has already been selected\r\n\tmega: boolean; // true if a mega evolution has already been selected\r\n\tultra: boolean; // true if an ultra burst has already been selected\r\n\tdynamax: boolean; // true if a dynamax has already been selected\r\n\tterastallize: boolean; // true if a terastallization has already been inputted\r\n}\r\n\r\nexport class Side {\r\n\treadonly battle: Battle;\r\n\treadonly id: SideID;\r\n\t/** Index in `battle.sides`: `battle.sides[side.n] === side` */\r\n\treadonly n: number;\r\n\r\n\tname: string;\r\n\tavatar: string;\r\n\tfoe: Side = null!; // set in battle.start()\r\n\t/** Only exists in multi battle, for the allied side */\r\n\tallySide: Side | null = null; // set in battle.start()\r\n\tteam: PokemonSet[];\r\n\tpokemon: Pokemon[];\r\n\tactive: Pokemon[];\r\n\r\n\tpokemonLeft: number;\r\n\tzMoveUsed: boolean;\r\n\t/**\r\n\t * This will be true in any gen before 8 or if the player (or their battle partner) has dynamaxed once already\r\n\t *\r\n\t * Use Side.canDynamaxNow() to check if a side can dynamax instead of this property because only one\r\n\t * player per team can dynamax on any given turn of a gen 8 Multi Battle.\r\n\t */\r\n\tdynamaxUsed: boolean;\r\n\r\n\tfaintedLastTurn: Pokemon | null;\r\n\tfaintedThisTurn: Pokemon | null;\r\n\ttotalFainted: number;\r\n\t/** only used by Gen 1 Counter */\r\n\tlastSelectedMove: ID = '';\r\n\r\n\t/** these point to the same object as the ally's, in multi battles */\r\n\tsideConditions: {[id: string]: EffectState};\r\n\tslotConditions: {[id: string]: EffectState}[];\r\n\r\n\tactiveRequest: AnyObject | null;\r\n\tchoice: Choice;\r\n\r\n\t/**\r\n\t * In gen 1, all lastMove stuff is tracked on Side rather than Pokemon\r\n\t * (this is for Counter and Mirror Move)\r\n\t * This is also used for checking Self-KO clause in Pokemon Stadium 2.\r\n\t */\r\n\tlastMove: Move | null;\r\n\r\n\tconstructor(name: string, battle: Battle, sideNum: number, team: PokemonSet[]) {\r\n\t\tconst sideScripts = battle.dex.data.Scripts.side;\r\n\t\tif (sideScripts) Object.assign(this, sideScripts);\r\n\r\n\t\tthis.battle = battle;\r\n\t\tthis.id = ['p1', 'p2', 'p3', 'p4'][sideNum] as SideID;\r\n\t\tthis.n = sideNum;\r\n\r\n\t\tthis.name = name;\r\n\t\tthis.avatar = '';\r\n\r\n\t\tthis.team = team;\r\n\t\tthis.pokemon = [];\r\n\t\tfor (let i = 0; i < this.team.length && i < 24; i++) {\r\n\t\t\t// console.log(\"NEW POKEMON: \" + (this.team[i] ? this.team[i].name : '[unidentified]'));\r\n\t\t\tthis.pokemon.push(new Pokemon(this.team[i], this));\r\n\t\t\tthis.pokemon[i].position = i;\r\n\t\t}\r\n\r\n\t\tswitch (this.battle.gameType) {\r\n\t\tcase 'doubles':\r\n\t\t\tthis.active = [null!, null!];\r\n\t\t\tbreak;\r\n\t\tcase 'triples': case 'rotation':\r\n\t\t\tthis.active = [null!, null!, null!];\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tthis.active = [null!];\r\n\t\t}\r\n\r\n\t\tthis.pokemonLeft = this.pokemon.filter(pk => !pk.fainted).length;\r\n\t\tthis.faintedLastTurn = null;\r\n\t\tthis.faintedThisTurn = null;\r\n\t\tthis.totalFainted = 0;\r\n\t\tthis.zMoveUsed = false;\r\n\t\tthis.dynamaxUsed = this.battle.gen !== 8;\r\n\r\n\t\tthis.sideConditions = {};\r\n\t\tthis.slotConditions = [];\r\n\t\t// Array#fill doesn't work for this\r\n\t\tfor (let i = 0; i < this.active.length; i++) this.slotConditions[i] = {};\r\n\r\n\t\tthis.activeRequest = null;\r\n\t\tthis.choice = {\r\n\t\t\tcantUndo: false,\r\n\t\t\terror: ``,\r\n\t\t\tactions: [],\r\n\t\t\tforcedSwitchesLeft: 0,\r\n\t\t\tforcedPassesLeft: 0,\r\n\t\t\tswitchIns: new Set(),\r\n\t\t\tzMove: false,\r\n\t\t\tmega: false,\r\n\t\t\tultra: false,\r\n\t\t\tdynamax: false,\r\n\t\t\tterastallize: false,\r\n\t\t};\r\n\r\n\t\t// old-gens\r\n\t\tthis.lastMove = null;\r\n\t}\r\n\r\n\ttoJSON(): AnyObject {\r\n\t\treturn State.serializeSide(this);\r\n\t}\r\n\r\n\tget requestState(): RequestState {\r\n\t\tif (!this.activeRequest || this.activeRequest.wait) return '';\r\n\t\tif (this.activeRequest.teamPreview) return 'teampreview';\r\n\t\tif (this.activeRequest.forceSwitch) return 'switch';\r\n\t\treturn 'move';\r\n\t}\r\n\r\n\tcanDynamaxNow(): boolean {\r\n\t\tif (this.battle.gen !== 8) return false;\r\n\t\t// In multi battles, players on a team are alternatingly given the option to dynamax each turn\r\n\t\t// On turn 1, the players on their team's respective left have the first chance (p1 and p2)\r\n\t\tif (this.battle.gameType === 'multi' && this.battle.turn % 2 !== [1, 1, 0, 0][this.n]) return false;\r\n\t\t// if (this.battle.gameType === 'multitriples' && this.battle.turn % 3 !== [1, 1, 2, 2, 0, 0][this.side.n]) {\r\n\t\t//\t\treturn false;\r\n\t\t// }\r\n\t\treturn !this.dynamaxUsed;\r\n\t}\r\n\r\n\tgetChoice() {\r\n\t\tif (this.choice.actions.length > 1 && this.choice.actions.every(action => action.choice === 'team')) {\r\n\t\t\treturn `team ` + this.choice.actions.map(action => action.pokemon!.position + 1).join(', ');\r\n\t\t}\r\n\t\treturn this.choice.actions.map(action => {\r\n\t\t\tswitch (action.choice) {\r\n\t\t\tcase 'move':\r\n\t\t\t\tlet details = ``;\r\n\t\t\t\tif (action.targetLoc && this.active.length > 1) details += ` ${action.targetLoc > 0 ? '+' : ''}${action.targetLoc}`;\r\n\t\t\t\tif (action.mega) details += (action.pokemon!.item === 'ultranecroziumz' ? ` ultra` : ` mega`);\r\n\t\t\t\tif (action.zmove) details += ` zmove`;\r\n\t\t\t\tif (action.maxMove) details += ` dynamax`;\r\n\t\t\t\tif (action.terastallize) details += ` terastallize`;\r\n\t\t\t\treturn `move ${action.moveid}${details}`;\r\n\t\t\tcase 'switch':\r\n\t\t\tcase 'instaswitch':\r\n\t\t\tcase 'revivalblessing':\r\n\t\t\t\treturn `switch ${action.target!.position + 1}`;\r\n\t\t\tcase 'team':\r\n\t\t\t\treturn `team ${action.pokemon!.position + 1}`;\r\n\t\t\tdefault:\r\n\t\t\t\treturn action.choice;\r\n\t\t\t}\r\n\t\t}).join(', ');\r\n\t}\r\n\r\n\ttoString() {\r\n\t\treturn `${this.id}: ${this.name}`;\r\n\t}\r\n\r\n\tgetRequestData(forAlly?: boolean) {\r\n\t\tconst data = {\r\n\t\t\tname: this.name,\r\n\t\t\tid: this.id,\r\n\t\t\tpokemon: [] as AnyObject[],\r\n\t\t};\r\n\t\tfor (const pokemon of this.pokemon) {\r\n\t\t\tdata.pokemon.push(pokemon.getSwitchRequestData(forAlly));\r\n\t\t}\r\n\t\treturn data;\r\n\t}\r\n\r\n\trandomFoe() {\r\n\t\tconst actives = this.foes();\r\n\t\tif (!actives.length) return null;\r\n\t\treturn this.battle.sample(actives);\r\n\t}\r\n\r\n\t/** Intended as a way to iterate through all foe side conditions - do not use for anything else. */\r\n\tfoeSidesWithConditions() {\r\n\t\tif (this.battle.gameType === 'freeforall') return this.battle.sides.filter(side => side !== this);\r\n\r\n\t\treturn [this.foe];\r\n\t}\r\n\tfoePokemonLeft() {\r\n\t\tif (this.battle.gameType === 'freeforall') {\r\n\t\t\treturn this.battle.sides.filter(side => side !== this).map(side => side.pokemonLeft).reduce((a, b) => a + b);\r\n\t\t}\r\n\r\n\t\tif (this.foe.allySide) return this.foe.pokemonLeft + this.foe.allySide.pokemonLeft;\r\n\r\n\t\treturn this.foe.pokemonLeft;\r\n\t}\r\n\tallies(all?: boolean) {\r\n\t\t// called during the first switch-in, so `active` can still contain nulls at this point\r\n\t\tlet allies = this.activeTeam().filter(ally => ally);\r\n\t\tif (!all) allies = allies.filter(ally => !!ally.hp);\r\n\r\n\t\treturn allies;\r\n\t}\r\n\tfoes(all?: boolean) {\r\n\t\tif (this.battle.gameType === 'freeforall') {\r\n\t\t\treturn this.battle.sides.map(side => side.active[0])\r\n\t\t\t\t.filter(pokemon => pokemon && pokemon.side !== this && (all || !!pokemon.hp));\r\n\t\t}\r\n\t\treturn this.foe.allies(all);\r\n\t}\r\n\tactiveTeam() {\r\n\t\tif (this.battle.gameType !== 'multi') return this.active;\r\n\r\n\t\treturn this.battle.sides[this.n % 2].active.concat(this.battle.sides[this.n % 2 + 2].active);\r\n\t}\r\n\thasAlly(pokemon: Pokemon) {\r\n\t\treturn pokemon.side === this || pokemon.side === this.allySide;\r\n\t}\r\n\r\n\taddSideCondition(\r\n\t\tstatus: string | Condition, source: Pokemon | 'debug' | null = null, sourceEffect: Effect | null = null\r\n\t): boolean {\r\n\t\tif (!source && this.battle.event && this.battle.event.target) source = this.battle.event.target;\r\n\t\tif (source === 'debug') source = this.active[0];\r\n\t\tif (!source) throw new Error(`setting sidecond without a source`);\r\n\t\tif (!source.getSlot) source = (source as any as Side).active[0];\r\n\r\n\t\tstatus = this.battle.dex.conditions.get(status);\r\n\t\tif (this.sideConditions[status.id]) {\r\n\t\t\tif (!(status as any).onSideRestart) return false;\r\n\t\t\treturn this.battle.singleEvent('SideRestart', status, this.sideConditions[status.id], this, source, sourceEffect);\r\n\t\t}\r\n\t\tthis.sideConditions[status.id] = {\r\n\t\t\tid: status.id,\r\n\t\t\ttarget: this,\r\n\t\t\tsource,\r\n\t\t\tsourceSlot: source.getSlot(),\r\n\t\t\tduration: status.duration,\r\n\t\t};\r\n\t\tif (status.durationCallback) {\r\n\t\t\tthis.sideConditions[status.id].duration =\r\n\t\t\t\tstatus.durationCallback.call(this.battle, this.active[0], source, sourceEffect);\r\n\t\t}\r\n\t\tif (!this.battle.singleEvent('SideStart', status, this.sideConditions[status.id], this, source, sourceEffect)) {\r\n\t\t\tdelete this.sideConditions[status.id];\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tthis.battle.runEvent('SideConditionStart', source, source, status);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tgetSideCondition(status: string | Effect): Effect | null {\r\n\t\tstatus = this.battle.dex.conditions.get(status) as Effect;\r\n\t\tif (!this.sideConditions[status.id]) return null;\r\n\t\treturn status;\r\n\t}\r\n\r\n\tgetSideConditionData(status: string | Effect): AnyObject {\r\n\t\tstatus = this.battle.dex.conditions.get(status) as Effect;\r\n\t\treturn this.sideConditions[status.id] || null;\r\n\t}\r\n\r\n\tremoveSideCondition(status: string | Effect): boolean {\r\n\t\tstatus = this.battle.dex.conditions.get(status) as Effect;\r\n\t\tif (!this.sideConditions[status.id]) return false;\r\n\t\tthis.battle.singleEvent('SideEnd', status, this.sideConditions[status.id], this);\r\n\t\tdelete this.sideConditions[status.id];\r\n\t\treturn true;\r\n\t}\r\n\r\n\taddSlotCondition(\r\n\t\ttarget: Pokemon | number, status: string | Condition, source: Pokemon | 'debug' | null = null,\r\n\t\tsourceEffect: Effect | null = null\r\n\t) {\r\n\t\tif (!source && this.battle.event && this.battle.event.target) source = this.battle.event.target;\r\n\t\tif (source === 'debug') source = this.active[0];\r\n\t\tif (target instanceof Pokemon) target = target.position;\r\n\t\tif (!source) throw new Error(`setting sidecond without a source`);\r\n\r\n\t\tstatus = this.battle.dex.conditions.get(status);\r\n\t\tif (this.slotConditions[target][status.id]) {\r\n\t\t\tif (!status.onRestart) return false;\r\n\t\t\treturn this.battle.singleEvent('Restart', status, this.slotConditions[target][status.id], this, source, sourceEffect);\r\n\t\t}\r\n\t\tconst conditionState = this.slotConditions[target][status.id] = {\r\n\t\t\tid: status.id,\r\n\t\t\ttarget: this,\r\n\t\t\tsource,\r\n\t\t\tsourceSlot: source.getSlot(),\r\n\t\t\tduration: status.duration,\r\n\t\t};\r\n\t\tif (status.durationCallback) {\r\n\t\t\tconditionState.duration =\r\n\t\t\t\tstatus.durationCallback.call(this.battle, this.active[0], source, sourceEffect);\r\n\t\t}\r\n\t\tif (!this.battle.singleEvent('Start', status, conditionState, this.active[target], source, sourceEffect)) {\r\n\t\t\tdelete this.slotConditions[target][status.id];\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tgetSlotCondition(target: Pokemon | number, status: string | Effect) {\r\n\t\tif (target instanceof Pokemon) target = target.position;\r\n\t\tstatus = this.battle.dex.conditions.get(status) as Effect;\r\n\t\tif (!this.slotConditions[target][status.id]) return null;\r\n\t\treturn status;\r\n\t}\r\n\r\n\tremoveSlotCondition(target: Pokemon | number, status: string | Effect) {\r\n\t\tif (target instanceof Pokemon) target = target.position;\r\n\t\tstatus = this.battle.dex.conditions.get(status) as Effect;\r\n\t\tif (!this.slotConditions[target][status.id]) return false;\r\n\t\tthis.battle.singleEvent('End', status, this.slotConditions[target][status.id], this.active[target]);\r\n\t\tdelete this.slotConditions[target][status.id];\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// eslint-disable-next-line @typescript-eslint/ban-types\r\n\tsend(...parts: (string | number | Function | AnyObject)[]) {\r\n\t\tconst sideUpdate = '|' + parts.map(part => {\r\n\t\t\tif (typeof part !== 'function') return part;\r\n\t\t\treturn part(this);\r\n\t\t}).join('|');\r\n\t\tthis.battle.send('sideupdate', `${this.id}\\n${sideUpdate}`);\r\n\t}\r\n\r\n\temitRequest(update: AnyObject) {\r\n\t\tthis.battle.send('sideupdate', `${this.id}\\n|request|${JSON.stringify(update)}`);\r\n\t\tthis.activeRequest = update;\r\n\t}\r\n\r\n\temitChoiceError(message: string, unavailable?: boolean) {\r\n\t\tthis.choice.error = message;\r\n\t\tconst type = `[${unavailable ? 'Unavailable' : 'Invalid'} choice]`;\r\n\t\tthis.battle.send('sideupdate', `${this.id}\\n|error|${type} ${message}`);\r\n\t\tif (this.battle.strictChoices) throw new Error(`${type} ${message}`);\r\n\t\treturn false;\r\n\t}\r\n\r\n\tisChoiceDone() {\r\n\t\tif (!this.requestState) return true;\r\n\t\tif (this.choice.forcedSwitchesLeft) return false;\r\n\r\n\t\tif (this.requestState === 'teampreview') {\r\n\t\t\treturn this.choice.actions.length >= this.pickedTeamSize();\r\n\t\t}\r\n\r\n\t\t// current request is move/switch\r\n\t\tthis.getChoiceIndex(); // auto-pass\r\n\t\treturn this.choice.actions.length >= this.active.length;\r\n\t}\r\n\r\n\tchooseMove(\r\n\t\tmoveText?: string | number,\r\n\t\ttargetLoc = 0,\r\n\t\tevent: 'mega' | 'zmove' | 'ultra' | 'dynamax' | 'terastallize' | '' = ''\r\n\t) {\r\n\t\tif (this.requestState !== 'move') {\r\n\t\t\treturn this.emitChoiceError(`Can't move: You need a ${this.requestState} response`);\r\n\t\t}\r\n\t\tconst index = this.getChoiceIndex();\r\n\t\tif (index >= this.active.length) {\r\n\t\t\treturn this.emitChoiceError(`Can't move: You sent more choices than unfainted Pok\u00E9mon.`);\r\n\t\t}\r\n\t\tconst autoChoose = !moveText;\r\n\t\tconst pokemon: Pokemon = this.active[index];\r\n\r\n\t\t// Parse moveText (name or index)\r\n\t\t// If the move is not found, the action is invalid without requiring further inspection.\r\n\r\n\t\tconst request = pokemon.getMoveRequestData();\r\n\t\tlet moveid = '';\r\n\t\tlet targetType = '';\r\n\t\tif (autoChoose) moveText = 1;\r\n\t\tif (typeof moveText === 'number' || (moveText && /^[0-9]+$/.test(moveText))) {\r\n\t\t\t// Parse a one-based move index.\r\n\t\t\tconst moveIndex = Number(moveText) - 1;\r\n\t\t\tif (moveIndex < 0 || moveIndex >= request.moves.length || !request.moves[moveIndex]) {\r\n\t\t\t\treturn this.emitChoiceError(`Can't move: Your ${pokemon.name} doesn't have a move ${moveIndex + 1}`);\r\n\t\t\t}\r\n\t\t\tmoveid = request.moves[moveIndex].id;\r\n\t\t\ttargetType = request.moves[moveIndex].target!;\r\n\t\t} else {\r\n\t\t\t// Parse a move ID.\r\n\t\t\t// Move names are also allowed, but may cause ambiguity (see client issue #167).\r\n\t\t\tmoveid = toID(moveText);\r\n\t\t\tif (moveid.startsWith('hiddenpower')) {\r\n\t\t\t\tmoveid = 'hiddenpower';\r\n\t\t\t}\r\n\t\t\tfor (const move of request.moves) {\r\n\t\t\t\tif (move.id !== moveid) continue;\r\n\t\t\t\ttargetType = move.target || 'normal';\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif (!targetType && ['', 'dynamax'].includes(event) && request.maxMoves) {\r\n\t\t\t\tfor (const [i, moveRequest] of request.maxMoves.maxMoves.entries()) {\r\n\t\t\t\t\tif (moveid === moveRequest.move) {\r\n\t\t\t\t\t\tmoveid = request.moves[i].id;\r\n\t\t\t\t\t\ttargetType = moveRequest.target;\r\n\t\t\t\t\t\tevent = 'dynamax';\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!targetType && ['', 'zmove'].includes(event) && request.canZMove) {\r\n\t\t\t\tfor (const [i, moveRequest] of request.canZMove.entries()) {\r\n\t\t\t\t\tif (!moveRequest) continue;\r\n\t\t\t\t\tif (moveid === toID(moveRequest.move)) {\r\n\t\t\t\t\t\tmoveid = request.moves[i].id;\r\n\t\t\t\t\t\ttargetType = moveRequest.target;\r\n\t\t\t\t\t\tevent = 'zmove';\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!targetType) {\r\n\t\t\t\treturn this.emitChoiceError(`Can't move: Your ${pokemon.name} doesn't have a move matching ${moveid}`);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst moves = pokemon.getMoves();\r\n\t\tif (autoChoose) {\r\n\t\t\tfor (const [i, move] of request.moves.entries()) {\r\n\t\t\t\tif (move.disabled) continue;\r\n\t\t\t\tif (i < moves.length && move.id === moves[i].id && moves[i].disabled) continue;\r\n\t\t\t\tmoveid = move.id;\r\n\t\t\t\ttargetType = move.target!;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst move = this.battle.dex.moves.get(moveid);\r\n\r\n\t\t// Z-move\r\n\r\n\t\tconst zMove = event === 'zmove' ? this.battle.actions.getZMove(move, pokemon) : undefined;\r\n\t\tif (event === 'zmove' && !zMove) {\r\n\t\t\treturn this.emitChoiceError(`Can't move: ${pokemon.name} can't use ${move.name} as a Z-move`);\r\n\t\t}\r\n\t\tif (zMove && this.choice.zMove) {\r\n\t\t\treturn this.emitChoiceError(`Can't move: You can't Z-move more than once per battle`);\r\n\t\t}\r\n\r\n\t\tif (zMove) targetType = this.battle.dex.moves.get(zMove).target;\r\n\r\n\t\t// Dynamax\r\n\t\t// Is dynamaxed or will dynamax this turn.\r\n\t\tconst maxMove = (event === 'dynamax' || pokemon.volatiles['dynamax']) ?\r\n\t\t\tthis.battle.actions.getMaxMove(move, pokemon) : undefined;\r\n\t\tif (event === 'dynamax' && !maxMove) {\r\n\t\t\treturn this.emitChoiceError(`Can't move: ${pokemon.name} can't use ${move.name} as a Max Move`);\r\n\t\t}\r\n\r\n\t\tif (maxMove) targetType = this.battle.dex.moves.get(maxMove).target;\r\n\r\n\t\t// Validate targetting\r\n\r\n\t\tif (autoChoose) {\r\n\t\t\ttargetLoc = 0;\r\n\t\t} else if (this.battle.actions.targetTypeChoices(targetType)) {\r\n\t\t\tif (!targetLoc && this.active.length >= 2) {\r\n\t\t\t\treturn this.emitChoiceError(`Can't move: ${move.name} needs a target`);\r\n\t\t\t}\r\n\t\t\tif (!this.battle.validTargetLoc(targetLoc, pokemon, targetType)) {\r\n\t\t\t\treturn this.emitChoiceError(`Can't move: Invalid target for ${move.name}`);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (targetLoc) {\r\n\t\t\t\treturn this.emitChoiceError(`Can't move: You can't choose a target for ${move.name}`);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst lockedMove = pokemon.getLockedMove();\r\n\t\tif (lockedMove) {\r\n\t\t\tlet lockedMoveTargetLoc = pokemon.lastMoveTargetLoc || 0;\r\n\t\t\tconst lockedMoveID = toID(lockedMove);\r\n\t\t\tif (pokemon.volatiles[lockedMoveID] && pokemon.volatiles[lockedMoveID].targetLoc) {\r\n\t\t\t\tlockedMoveTargetLoc = pokemon.volatiles[lockedMoveID].targetLoc;\r\n\t\t\t}\r\n\t\t\tthis.choice.actions.push({\r\n\t\t\t\tchoice: 'move',\r\n\t\t\t\tpokemon,\r\n\t\t\t\ttargetLoc: lockedMoveTargetLoc,\r\n\t\t\t\tmoveid: lockedMoveID,\r\n\t\t\t});\r\n\t\t\treturn true;\r\n\t\t} else if (!moves.length && !zMove) {\r\n\t\t\t// Override action and use Struggle if there are no enabled moves with PP\r\n\t\t\t// Gen 4 and earlier announce a Pokemon has no moves left before the turn begins, and only to that player's side.\r\n\t\t\tif (this.battle.gen <= 4) this.send('-activate', pokemon, 'move: Struggle');\r\n\t\t\tmoveid = 'struggle';\r\n\t\t} else if (maxMove) {\r\n\t\t\t// Dynamaxed; only Taunt and Assault Vest disable Max Guard, but the base move must have PP remaining\r\n\t\t\tif (pokemon.maxMoveDisabled(move)) {\r\n\t\t\t\treturn this.emitChoiceError(`Can't move: ${pokemon.name}'s ${maxMove.name} is disabled`);\r\n\t\t\t}\r\n\t\t} else if (!zMove) {\r\n\t\t\t// Check for disabled moves\r\n\t\t\tlet isEnabled = false;\r\n\t\t\tlet disabledSource = '';\r\n\t\t\tfor (const m of moves) {\r\n\t\t\t\tif (m.id !== moveid) continue;\r\n\t\t\t\tif (!m.disabled) {\r\n\t\t\t\t\tisEnabled = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t} else if (m.disabledSource) {\r\n\t\t\t\t\tdisabledSource = m.disabledSource;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!isEnabled) {\r\n\t\t\t\t// Request a different choice\r\n\t\t\t\tif (autoChoose) throw new Error(`autoChoose chose a disabled move`);\r\n\t\t\t\tconst includeRequest = this.updateRequestForPokemon(pokemon, req => {\r\n\t\t\t\t\tlet updated = false;\r\n\t\t\t\t\tfor (const m of req.moves) {\r\n\t\t\t\t\t\tif (m.id === moveid) {\r\n\t\t\t\t\t\t\tif (!m.disabled) {\r\n\t\t\t\t\t\t\t\tm.disabled = true;\r\n\t\t\t\t\t\t\t\tupdated = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (m.disabledSource !== disabledSource) {\r\n\t\t\t\t\t\t\t\tm.disabledSource = disabledSource;\r\n\t\t\t\t\t\t\t\tupdated = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn updated;\r\n\t\t\t\t});\r\n\t\t\t\tconst status = this.emitChoiceError(`Can't move: ${pokemon.name}'s ${move.name} is disabled`, includeRequest);\r\n\t\t\t\tif (includeRequest) this.emitRequest(this.activeRequest!);\r\n\t\t\t\treturn status;\r\n\t\t\t}\r\n\t\t\t// The chosen move is valid yay\r\n\t\t}\r\n\r\n\t\t// Mega evolution\r\n\r\n\t\tconst mega = (event === 'mega');\r\n\t\tif (mega && !pokemon.canMegaEvo) {\r\n\t\t\treturn this.emitChoiceError(`Can't move: ${pokemon.name} can't mega evolve`);\r\n\t\t}\r\n\t\tif (mega && this.choice.mega) {\r\n\t\t\treturn this.emitChoiceError(`Can't move: You can only mega-evolve once per battle`);\r\n\t\t}\r\n\t\tconst ultra = (event === 'ultra');\r\n\t\tif (ultra && !pokemon.canUltraBurst) {\r\n\t\t\treturn this.emitChoiceError(`Can't move: ${pokemon.name} can't ultra burst`);\r\n\t\t}\r\n\t\tif (ultra && this.choice.ultra) {\r\n\t\t\treturn this.emitChoiceError(`Can't move: You can only ultra burst once per battle`);\r\n\t\t}\r\n\t\tlet dynamax = (event === 'dynamax');\r\n\t\tconst canDynamax = this.activeRequest?.active[this.active.indexOf(pokemon)].canDynamax;\r\n\t\tif (dynamax && (this.choice.dynamax || !canDynamax)) {\r\n\t\t\tif (pokemon.volatiles['dynamax']) {\r\n\t\t\t\tdynamax = false;\r\n\t\t\t} else {\r\n\t\t\t\tif (this.battle.gen !== 8) {\r\n\t\t\t\t\treturn this.emitChoiceError(`Can't move: Dynamaxing doesn't outside of Gen 8.`);\r\n\t\t\t\t} else if (pokemon.side.canDynamaxNow()) {\r\n\t\t\t\t\treturn this.emitChoiceError(`Can't move: ${pokemon.name} can't Dynamax now.`);\r\n\t\t\t\t} else if (pokemon.side.allySide?.canDynamaxNow()) {\r\n\t\t\t\t\treturn this.emitChoiceError(`Can't move: It's your partner's turn to Dynamax.`);\r\n\t\t\t\t}\r\n\t\t\t\treturn this.emitChoiceError(`Can't move: You can only Dynamax once per battle.`);\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst terastallize = (event === 'terastallize');\r\n\t\tif (terastallize && !pokemon.canTerastallize) {\r\n\t\t\t// Make this work properly\r\n\t\t\treturn this.emitChoiceError(`Can't move: ${pokemon.name} can't Terastallize.`);\r\n\t\t}\r\n\t\tif (terastallize && this.choice.terastallize) {\r\n\t\t\treturn this.emitChoiceError(`Can't move: You can only Terastallize once per battle.`);\r\n\t\t}\r\n\t\tif (terastallize && this.battle.gen !== 9) {\r\n\t\t\t// Make this work properly\r\n\t\t\treturn this.emitChoiceError(`Can't move: You can only Terastallize in Gen 9.`);\r\n\t\t}\r\n\r\n\t\tthis.choice.actions.push({\r\n\t\t\tchoice: 'move',\r\n\t\t\tpokemon,\r\n\t\t\ttargetLoc,\r\n\t\t\tmoveid,\r\n\t\t\tmega: mega || ultra,\r\n\t\t\tzmove: zMove,\r\n\t\t\tmaxMove: maxMove ? maxMove.id : undefined,\r\n\t\t\tterastallize: terastallize ? pokemon.teraType : undefined,\r\n\t\t});\r\n\r\n\t\tif (pokemon.maybeDisabled) {\r\n\t\t\tthis.choice.cantUndo = this.choice.cantUndo || pokemon.isLastActive();\r\n\t\t}\r\n\r\n\t\tif (mega) this.choice.mega = true;\r\n\t\tif (ultra) this.choice.ultra = true;\r\n\t\tif (zMove) this.choice.zMove = true;\r\n\t\tif (dynamax) this.choice.dynamax = true;\r\n\t\tif (terastallize) this.choice.terastallize = true;\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tupdateRequestForPokemon(pokemon: Pokemon, update: (req: AnyObject) => boolean) {\r\n\t\tif (!this.activeRequest?.active) {\r\n\t\t\tthrow new Error(`Can't update a request without active Pokemon`);\r\n\t\t}\r\n\t\tconst req = this.activeRequest.active[pokemon.position];\r\n\t\tif (!req) throw new Error(`Pokemon not found in request's active field`);\r\n\t\treturn update(req);\r\n\t}\r\n\r\n\tchooseSwitch(slotText?: string) {\r\n\t\tif (this.requestState !== 'move' && this.requestState !== 'switch') {\r\n\t\t\treturn this.emitChoiceError(`Can't switch: You need a ${this.requestState} response`);\r\n\t\t}\r\n\t\tconst index = this.getChoiceIndex();\r\n\t\tif (index >= this.active.length) {\r\n\t\t\tif (this.requestState === 'switch') {\r\n\t\t\t\treturn this.emitChoiceError(`Can't switch: You sent more switches than Pok\u00E9mon that need to switch`);\r\n\t\t\t}\r\n\t\t\treturn this.emitChoiceError(`Can't switch: You sent more choices than unfainted Pok\u00E9mon`);\r\n\t\t}\r\n\t\tconst pokemon = this.active[index];\r\n\t\tlet slot;\r\n\t\tif (!slotText) {\r\n\t\t\tif (this.requestState !== 'switch') {\r\n\t\t\t\treturn this.emitChoiceError(`Can't switch: You need to select a Pok\u00E9mon to switch in`);\r\n\t\t\t}\r\n\t\t\tif (this.slotConditions[pokemon.position]['revivalblessing']) {\r\n\t\t\t\tslot = 0;\r\n\t\t\t\twhile (!this.pokemon[slot].fainted) slot++;\r\n\t\t\t} else {\r\n\t\t\t\tif (!this.choice.forcedSwitchesLeft) return this.choosePass();\r\n\t\t\t\tslot = this.active.length;\r\n\t\t\t\twhile (this.choice.switchIns.has(slot) || this.pokemon[slot].fainted) slot++;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tslot = parseInt(slotText) - 1;\r\n\t\t}\r\n\t\tif (isNaN(slot) || slot < 0 || slotText.length > 2) {\r\n\t\t\t// maybe it's a name/species id!\r\n\t\t\tslot = -1;\r\n\t\t\tfor (const [i, mon] of this.pokemon.entries()) {\r\n\t\t\t\tif (slotText!.toLowerCase() === mon.name.toLowerCase() || toID(slotText) === mon.species.id || slotText! === mon.uuid) {\r\n\t\t\t\t\tslot = i;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (slot < 0) {\r\n\t\t\t\treturn this.emitChoiceError(`Can't switch: You do not have a Pok\u00E9mon named \"${slotText}\" to switch to`);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (slot >= this.pokemon.length) {\r\n\t\t\treturn this.emitChoiceError(`Can't switch: You do not have a Pok\u00E9mon in slot ${slot + 1} to switch to`);\r\n\t\t} else if (slot < this.active.length && !this.slotConditions[pokemon.position]['revivalblessing']) {\r\n\t\t\treturn this.emitChoiceError(`Can't switch: You can't switch to an active Pok\u00E9mon`);\r\n\t\t} else if (this.choice.switchIns.has(slot)) {\r\n\t\t\treturn this.emitChoiceError(`Can't switch: The Pok\u00E9mon in slot ${slot + 1} can only switch in once`);\r\n\t\t}\r\n\t\tconst targetPokemon = this.pokemon[slot];\r\n\r\n\t\tif (this.slotConditions[pokemon.position]['revivalblessing']) {\r\n\t\t\tif (!targetPokemon.fainted) {\r\n\t\t\t\treturn this.emitChoiceError(`Can't switch: You have to pass to a fainted Pok\u00E9mon`);\r\n\t\t\t}\r\n\t\t\t// Should always subtract, but stop at 0 to prevent errors.\r\n\t\t\tthis.choice.forcedSwitchesLeft = this.battle.clampIntRange(this.choice.forcedSwitchesLeft - 1, 0);\r\n\t\t\tpokemon.switchFlag = false;\r\n\t\t\tthis.choice.actions.push({\r\n\t\t\t\tchoice: 'revivalblessing',\r\n\t\t\t\tpokemon,\r\n\t\t\t\ttarget: targetPokemon,\r\n\t\t\t} as ChosenAction);\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif (targetPokemon.fainted) {\r\n\t\t\treturn this.emitChoiceError(`Can't switch: You can't switch to a fainted Pok\u00E9mon`);\r\n\t\t}\r\n\r\n\t\tif (this.requestState === 'move') {\r\n\t\t\tif (pokemon.trapped) {\r\n\t\t\t\tconst includeRequest = this.updateRequestForPokemon(pokemon, req => {\r\n\t\t\t\t\tlet updated = false;\r\n\t\t\t\t\tif (req.maybeTrapped) {\r\n\t\t\t\t\t\tdelete req.maybeTrapped;\r\n\t\t\t\t\t\tupdated = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!req.trapped) {\r\n\t\t\t\t\t\treq.trapped = true;\r\n\t\t\t\t\t\tupdated = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn updated;\r\n\t\t\t\t});\r\n\t\t\t\tconst status = this.emitChoiceError(`Can't switch: The active Pok\u00E9mon is trapped`, includeRequest);\r\n\t\t\t\tif (includeRequest) this.emitRequest(this.activeRequest!);\r\n\t\t\t\treturn status;\r\n\t\t\t} else if (pokemon.maybeTrapped) {\r\n\t\t\t\tthis.choice.cantUndo = this.choice.cantUndo || pokemon.isLastActive();\r\n\t\t\t}\r\n\t\t} else if (this.requestState === 'switch') {\r\n\t\t\tif (!this.choice.forcedSwitchesLeft) {\r\n\t\t\t\tthrow new Error(`Player somehow switched too many Pokemon`);\r\n\t\t\t}\r\n\t\t\tthis.choice.forcedSwitchesLeft--;\r\n\t\t}\r\n\r\n\t\tthis.choice.switchIns.add(slot);\r\n\r\n\t\tthis.choice.actions.push({\r\n\t\t\tchoice: (this.requestState === 'switch' ? 'instaswitch' : 'switch'),\r\n\t\t\tpokemon,\r\n\t\t\ttarget: targetPokemon,\r\n\t\t} as ChosenAction);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * The number of pokemon you must choose in Team Preview.\r\n\t *\r\n\t * Note that PS doesn't support choosing fewer than this number of pokemon.\r\n\t * In the games, it is sometimes possible to bring fewer than this, but\r\n\t * since that's nearly always a mistake, we haven't gotten around to\r\n\t * supporting it.\r\n\t */\r\n\tpickedTeamSize() {\r\n\t\treturn Math.min(this.pokemon.length, this.battle.ruleTable.pickedTeamSize || Infinity);\r\n\t}\r\n\r\n\tchooseTeam(data = '') {\r\n\t\tif (this.requestState !== 'teampreview') {\r\n\t\t\treturn this.emitChoiceError(`Can't choose for Team Preview: You're not in a Team Preview phase`);\r\n\t\t}\r\n\r\n\t\tconst ruleTable = this.battle.ruleTable;\r\n\t\tlet positions = data.split(data.includes(',') ? ',' : '')\r\n\t\t\t.map(datum => parseInt(datum) - 1);\r\n\t\tconst pickedTeamSize = this.pickedTeamSize();\r\n\r\n\t\t// make sure positions is exactly of length pickedTeamSize\r\n\t\t// - If too big: the client automatically sends a full list, so we just trim it down to size\r\n\t\tpositions.splice(pickedTeamSize);\r\n\t\t// - If too small: we intentionally support only sending leads and having the sim fill in the rest\r\n\t\tif (positions.length === 0) {\r\n\t\t\tfor (let i = 0; i < pickedTeamSize; i++) positions.push(i);\r\n\t\t} else if (positions.length < pickedTeamSize) {\r\n\t\t\tfor (let i = 0; i < pickedTeamSize; i++) {\r\n\t\t\t\tif (!positions.includes(i)) positions.push(i);\r\n\t\t\t\t// duplicate in input, let the rest of the code handle the error message\r\n\t\t\t\tif (positions.length >= pickedTeamSize) break;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (const [index, pos] of positions.entries()) {\r\n\t\t\tif (isNaN(pos) || pos < 0 || pos >= this.pokemon.length) {\r\n\t\t\t\treturn this.emitChoiceError(`Can't choose for Team Preview: You do not have a Pok\u00E9mon in slot ${pos + 1}`);\r\n\t\t\t}\r\n\t\t\tif (positions.indexOf(pos) !== index) {\r\n\t\t\t\treturn this.emitChoiceError(`Can't choose for Team Preview: The Pok\u00E9mon in slot ${pos + 1} can only switch in once`);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (ruleTable.maxTotalLevel) {\r\n\t\t\tlet totalLevel = 0;\r\n\t\t\tfor (const pos of positions) totalLevel += this.pokemon[pos].level;\r\n\r\n\t\t\tif (totalLevel > ruleTable.maxTotalLevel) {\r\n\t\t\t\tif (!data) {\r\n\t\t\t\t\t// autoChoose\r\n\t\t\t\t\tpositions = [...this.pokemon.keys()].sort((a, b) => (this.pokemon[a].level - this.pokemon[b].level))\r\n\t\t\t\t\t\t.slice(0, pickedTeamSize);\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn this.emitChoiceError(`Your selected team has a total level of ${totalLevel}, but it can't be above ${ruleTable.maxTotalLevel}; please select a valid team of ${pickedTeamSize} Pok\u00E9mon`);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (ruleTable.valueRules.has('forceselect')) {\r\n\t\t\tconst species = this.battle.dex.species.get(ruleTable.valueRules.get('forceselect'));\r\n\t\t\tif (!data) {\r\n\t\t\t\t// autoChoose\r\n\t\t\t\tpositions = [...this.pokemon.keys()].filter(pos => this.pokemon[pos].species.name === species.name)\r\n\t\t\t\t\t.concat([...this.pokemon.keys()].filter(pos => this.pokemon[pos].species.name !== species.name))\r\n\t\t\t\t\t.slice(0, pickedTeamSize);\r\n\t\t\t} else {\r\n\t\t\t\tlet hasSelection = false;\r\n\t\t\t\tfor (const pos of positions) {\r\n\t\t\t\t\tif (this.pokemon[pos].species.name === species.name) {\r\n\t\t\t\t\t\thasSelection = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (!hasSelection) {\r\n\t\t\t\t\treturn this.emitChoiceError(`You must bring ${species.name} to the battle.`);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (const [index, pos] of positions.entries()) {\r\n\t\t\tthis.choice.switchIns.add(pos);\r\n\t\t\tthis.choice.actions.push({\r\n\t\t\t\tchoice: 'team',\r\n\t\t\t\tindex,\r\n\t\t\t\tpokemon: this.pokemon[pos],\r\n\t\t\t\tpriority: -index,\r\n\t\t\t} as ChosenAction);\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tchooseShift() {\r\n\t\tconst index = this.getChoiceIndex();\r\n\t\tif (index >= this.active.length) {\r\n\t\t\treturn this.emitChoiceError(`Can't shift: You do not have a Pok\u00E9mon in slot ${index + 1}`);\r\n\t\t} else if (this.requestState !== 'move') {\r\n\t\t\treturn this.emitChoiceError(`Can't shift: You can only shift during a move phase`);\r\n\t\t} else if (this.battle.gameType !== 'triples') {\r\n\t\t\treturn this.emitChoiceError(`Can't shift: You can only shift to the center in triples`);\r\n\t\t} else if (index === 1) {\r\n\t\t\treturn this.emitChoiceError(`Can't shift: You can only shift from the edge to the center`);\r\n\t\t}\r\n\t\tconst pokemon: Pokemon = this.active[index];\r\n\r\n\t\tthis.choice.actions.push({\r\n\t\t\tchoice: 'shift',\r\n\t\t\tpokemon,\r\n\t\t} as ChosenAction);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tclearChoice() {\r\n\t\tlet forcedSwitches = 0;\r\n\t\tlet forcedPasses = 0;\r\n\t\tif (this.battle.requestState === 'switch') {\r\n\t\t\tconst canSwitchOut = this.active.filter(pokemon => pokemon?.switchFlag).length;\r\n\t\t\tconst canSwitchIn = this.pokemon.slice(this.active.length).filter(pokemon => pokemon && !pokemon.fainted).length;\r\n\t\t\tforcedSwitches = Math.min(canSwitchOut, canSwitchIn);\r\n\t\t\tforcedPasses = canSwitchOut - forcedSwitches;\r\n\t\t}\r\n\t\tthis.choice = {\r\n\t\t\tcantUndo: false,\r\n\t\t\terror: ``,\r\n\t\t\tactions: [],\r\n\t\t\tforcedSwitchesLeft: forcedSwitches,\r\n\t\t\tforcedPassesLeft: forcedPasses,\r\n\t\t\tswitchIns: new Set(),\r\n\t\t\tzMove: false,\r\n\t\t\tmega: false,\r\n\t\t\tultra: false,\r\n\t\t\tdynamax: false,\r\n\t\t\tterastallize: false,\r\n\t\t};\r\n\t}\r\n\r\n\tchoose(input: string) {\r\n\t\tif (!this.requestState) {\r\n\t\t\treturn this.emitChoiceError(\r\n\t\t\t\tthis.battle.ended ? `Can't do anything: The game is over` : `Can't do anything: It's not your turn`\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tif (this.choice.cantUndo) {\r\n\t\t\treturn this.emitChoiceError(`Can't undo: A trapping/disabling effect would cause undo to leak information`);\r\n\t\t}\r\n\r\n\t\tthis.clearChoice();\r\n\r\n\t\tconst choiceStrings = (input.startsWith('team ') ? [input] : input.split(','));\r\n\r\n\t\tif (choiceStrings.length > this.active.length) {\r\n\t\t\treturn this.emitChoiceError(\r\n\t\t\t\t`Can't make choices: You sent choices for ${choiceStrings.length} Pok\u00E9mon, but this is a ${this.battle.gameType} game!`\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tfor (const choiceString of choiceStrings) {\r\n\t\t\tlet [choiceType, data] = Utils.splitFirst(choiceString.trim(), ' ');\r\n\t\t\tdata = data.trim();\r\n\r\n\t\t\tswitch (choiceType) {\r\n\t\t\tcase 'move':\r\n\t\t\t\tconst original = data;\r\n\t\t\t\tconst error = () => this.emitChoiceError(`Conflicting arguments for \"move\": ${original}`);\r\n\t\t\t\tlet targetLoc: number | undefined;\r\n\t\t\t\tlet event: 'mega' | 'zmove' | 'ultra' | 'dynamax' | 'terastallize' | '' = '';\r\n\t\t\t\twhile (true) {\r\n\t\t\t\t\t// If data ends with a number, treat it as a target location.\r\n\t\t\t\t\t// We need to special case 'Conversion 2' so it doesn't get\r\n\t\t\t\t\t// confused with 'Conversion' erroneously sent with the target\r\n\t\t\t\t\t// '2' (since Conversion targets 'self', targetLoc can't be 2).\r\n\t\t\t\t\tif (/\\s(?:-|\\+)?[1-3]$/.test(data) && toID(data) !== 'conversion2') {\r\n\t\t\t\t\t\tif (targetLoc !== undefined) return error();\r\n\t\t\t\t\t\ttargetLoc = parseInt(data.slice(-2));\r\n\t\t\t\t\t\tdata = data.slice(0, -2).trim();\r\n\t\t\t\t\t} else if (data.endsWith(' mega')) {\r\n\t\t\t\t\t\tif (event) return error();\r\n\t\t\t\t\t\tevent = 'mega';\r\n\t\t\t\t\t\tdata = data.slice(0, -5);\r\n\t\t\t\t\t} else if (data.endsWith(' zmove')) {\r\n\t\t\t\t\t\tif (event) return error();\r\n\t\t\t\t\t\tevent = 'zmove';\r\n\t\t\t\t\t\tdata = data.slice(0, -6);\r\n\t\t\t\t\t} else if (data.endsWith(' ultra')) {\r\n\t\t\t\t\t\tif (event) return error();\r\n\t\t\t\t\t\tevent = 'ultra';\r\n\t\t\t\t\t\tdata = data.slice(0, -6);\r\n\t\t\t\t\t} else if (data.endsWith(' dynamax')) {\r\n\t\t\t\t\t\tif (event) return error();\r\n\t\t\t\t\t\tevent = 'dynamax';\r\n\t\t\t\t\t\tdata = data.slice(0, -8);\r\n\t\t\t\t\t} else if (data.endsWith(' gigantamax')) {\r\n\t\t\t\t\t\tif (event) return error();\r\n\t\t\t\t\t\tevent = 'dynamax';\r\n\t\t\t\t\t\tdata = data.slice(0, -11);\r\n\t\t\t\t\t} else if (data.endsWith(' max')) {\r\n\t\t\t\t\t\tif (event) return error();\r\n\t\t\t\t\t\tevent = 'dynamax';\r\n\t\t\t\t\t\tdata = data.slice(0, -4);\r\n\t\t\t\t\t} else if (data.endsWith(' terastal')) {\r\n\t\t\t\t\t\tif (event) return error();\r\n\t\t\t\t\t\tevent = 'terastallize';\r\n\t\t\t\t\t\tdata = data.slice(0, -9);\r\n\t\t\t\t\t} else if (data.endsWith(' terastallize')) {\r\n\t\t\t\t\t\tif (event) return error();\r\n\t\t\t\t\t\tevent = 'terastallize';\r\n\t\t\t\t\t\tdata = data.slice(0, -13);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (!this.chooseMove(data, targetLoc, event)) return false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'switch':\r\n\t\t\t\tthis.chooseSwitch(data);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'shift':\r\n\t\t\t\tif (data) return this.emitChoiceError(`Unrecognized data after \"shift\": ${data}`);\r\n\t\t\t\tif (!this.chooseShift()) return false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'team':\r\n\t\t\t\tif (!this.chooseTeam(data)) return false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'pass':\r\n\t\t\tcase 'skip':\r\n\t\t\t\tif (data) return this.emitChoiceError(`Unrecognized data after \"pass\": ${data}`);\r\n\t\t\t\tif (!this.choosePass()) return false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'useitem':\r\n\t\t\t\ttry {\r\n\t\t\t\t\tthis.battle.useItem(data);\r\n\t\t\t\t\tthis.choosePass();\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\tconsole.error(e);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'auto':\r\n\t\t\tcase 'default':\r\n\t\t\t\tthis.autoChoose();\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthis.emitChoiceError(`Unrecognized choice: ${choiceString}`);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn !this.choice.error;\r\n\t}\r\n\r\n\tgetChoiceIndex(isPass?: boolean) {\r\n\t\tlet index = this.choice.actions.length;\r\n\r\n\t\tif (!isPass) {\r\n\t\t\tswitch (this.requestState) {\r\n\t\t\tcase 'move':\r\n\t\t\t\t// auto-pass\r\n\t\t\t\twhile (\r\n\t\t\t\t\tindex < this.active.length &&\r\n\t\t\t\t\t(this.active[index].fainted || this.active[index].volatiles['commanding'])\r\n\t\t\t\t) {\r\n\t\t\t\t\tthis.choosePass();\r\n\t\t\t\t\tindex++;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'switch':\r\n\t\t\t\twhile (index < this.active.length && !this.active[index].switchFlag) {\r\n\t\t\t\t\tthis.choosePass();\r\n\t\t\t\t\tindex++;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn index;\r\n\t}\r\n\r\n\tchoosePass(): boolean | Side {\r\n\t\tconst index = this.getChoiceIndex(true);\r\n\t\tif (index >= this.active.length) return false;\r\n\t\tconst pokemon: Pokemon = this.active[index];\r\n\r\n\t\tswitch (this.requestState) {\r\n\t\tcase 'switch':\r\n\t\t\tif (pokemon.switchFlag) { // This condition will always happen if called by Battle#choose()\r\n\t\t\t\tif (!this.choice.forcedPassesLeft) {\r\n\t\t\t\t\treturn this.emitChoiceError(`Can't pass: You need to switch in a Pok\u00E9mon to replace ${pokemon.name}`);\r\n\t\t\t\t}\r\n\t\t\t\tthis.choice.forcedPassesLeft--;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase 'move':\r\n\t\t\t/* Allow passing when a move is needed. This is to allow Pok\u00E9Ball throwing from players.\r\n\t\t\tif (!pokemon.fainted && !pokemon.volatiles['commanding']) {\r\n\t\t\t\treturn this.emitChoiceError(`Can't pass: Your ${pokemon.name} must make a move (or switch)`);\r\n\t\t\t}\r\n\t\t\t*/\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\treturn this.emitChoiceError(`Can't pass: Not a move or switch request`);\r\n\t\t}\r\n\r\n\t\tthis.choice.actions.push({\r\n\t\t\tchoice: 'pass',\r\n\t\t} as ChosenAction);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/** Automatically finish a choice if not currently complete. */\r\n\tautoChoose() {\r\n\t\tif (this.requestState === 'teampreview') {\r\n\t\t\tif (!this.isChoiceDone()) this.chooseTeam();\r\n\t\t} else if (this.requestState === 'switch') {\r\n\t\t\tlet i = 0;\r\n\t\t\twhile (!this.isChoiceDone()) {\r\n\t\t\t\tif (!this.chooseSwitch()) throw new Error(`autoChoose switch crashed: ${this.choice.error}`);\r\n\t\t\t\ti++;\r\n\t\t\t\tif (i > 10) throw new Error(`autoChoose failed: infinite looping`);\r\n\t\t\t}\r\n\t\t} else if (this.requestState === 'move') {\r\n\t\t\tlet i = 0;\r\n\t\t\twhile (!this.isChoiceDone()) {\r\n\t\t\t\tif (!this.chooseMove()) throw new Error(`autoChoose crashed: ${this.choice.error}`);\r\n\t\t\t\ti++;\r\n\t\t\t\tif (i > 10) throw new Error(`autoChoose failed: infinite looping`);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tdestroy() {\r\n\t\t// deallocate ourself\r\n\r\n\t\t// deallocate children and get rid of references to them\r\n\t\tfor (const pokemon of this.pokemon) {\r\n\t\t\tif (pokemon) pokemon.destroy();\r\n\t\t}\r\n\r\n\t\tfor (const action of this.choice.actions) {\r\n\t\t\tdelete action.side;\r\n\t\t\tdelete action.pokemon;\r\n\t\t\tdelete action.target;\r\n\t\t}\r\n\t\tthis.choice.actions = [];\r\n\r\n\t\t// get rid of some possibly-circular references\r\n\t\tthis.pokemon = [];\r\n\t\tthis.active = [];\r\n\t\tthis.foe = null!;\r\n\t\t(this as any).battle = null!;\r\n\t}\r\n}\r\n"],
  "mappings": "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",
  "names": ["move"]
}
