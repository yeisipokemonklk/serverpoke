{
  "version": 3,
  "sources": ["../../../sim/cobbled-debug-server.ts"],
  "sourcesContent": ["import {BattleStream} from \"./battle-stream\";\r\nimport {Dex} from \"./dex\";\r\nimport * as Net from \"net\";\r\n\r\nconst cobbledModId = 'cobblemon';\r\nimport { Species } from \"./dex-species\";\r\nimport * as BagItems from \"./bag-items\";\r\nimport * as CobblemonCache from \"./cobblemon-cache\";\r\n\r\nexport function startServer(port: number): void {\r\n\tconst server = Net.createServer();\r\n\tconst battleMap = new Map<string, BattleStream>();\r\n\r\n\tserver.listen(port, () => {\r\n\t\tconsole.log('Server listening for connection requests on socket localhost: ' + port);\r\n\t});\r\n\r\n\tserver.on('connection', socket => onConnection(socket, battleMap));\r\n}\r\n\r\nfunction onData(socket: Net.Socket, chunk: Buffer, battleMap: Map<string, BattleStream>) {\r\n\tconst data = chunk.toString();\r\n\tconst lines = data.split('\\n');\r\n\tlines.forEach(line => {\r\n\t\tconsole.log('Data received from client: ' + line.toString());\r\n\t\tif (line.startsWith('>startbattle')) {\r\n\t\t\tconst battleId = line.split(' ')[1];\r\n\t\t\tbattleMap.set(battleId, new BattleStream());\r\n\t\t\tsocket.write('ACK');\r\n\t\t} else if (line === '>getCobbledMoves') {\r\n\t\t\tgetCobbledMoves(socket);\r\n\t\t} else if (line === '>getCobbledAbilityIds') {\r\n\t\t\tgetCobbledAbilityIds(socket);\r\n\t\t} else if (line === '>getCobbledItemIds') {\r\n\t\t\tgetCobbledItemIds(socket);\r\n\t\t} else if (line === '>resetSpeciesData') {\r\n\t\t\tCobblemonCache.resetSpecies();\r\n\t\t\tsocket.write('ACK');\r\n\t\t} else if (line.startsWith('>receiveSpeciesData')) {\r\n\t\t\tconst speciesJson = line.replace(`>receiveSpeciesData `, '');\r\n\t\t\tconst species = JSON.parse(speciesJson) as Species;\r\n\t\t\tCobblemonCache.registerSpecies(species);\r\n\t\t\tsocket.write('ACK');\r\n\t\t} else if (line.startsWith('>receiveBagItemData')) {\r\n\t\t\tconst itemId = line.split(' ')[1]\r\n\t\t\ttry {\r\n\t\t\t\tvar content = line.slice(line.indexOf(itemId) + itemId.length + 1);\r\n\t\t\t\tBagItems.set(itemId, eval(`(${content})`));\r\n\t\t\t\tsocket.write('ACK');\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.error(e);\r\n\t\t\t\tsocket.write('ERR')\r\n\t\t\t}\r\n\t\t\tconst bagItemJS = line.replace()\r\n\t\t} else if (line === '>afterCobbledSpeciesInit') {\r\n\t\t\tafterCobbledSpeciesInit();\r\n\t\t\tsocket.write('ACK');\r\n\t\t} else {\r\n\t\t\tconst [battleId, showdownMsg] = line.split('~');\r\n\t\t\tconst battleStream = battleMap.get(battleId);\r\n\t\t\tif (battleStream) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tvoid battleStream.write(showdownMsg);\r\n\t\t\t\t} catch (err: any) {\r\n\t\t\t\t\tconsole.error(err.stack);\r\n\t\t\t\t}\r\n\r\n\t\t\t\twriteBattleOutput(socket, battleStream);\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n}\r\n\r\nfunction writeBattleOutput(socket: Net.Socket, battleStream: BattleStream) {\r\n\tconst messages = battleStream.buf;\r\n\tif (messages.length !== 0) {\r\n\t\tsocket.write(padNumber(messages.length, 8));\r\n\t\tfor (const message of messages) {\r\n\t\t\tsocket.write(padNumber(message.length, 8) + message);\r\n\t\t}\r\n\t} else {\r\n\t\twriteVoid(socket);\r\n\t}\r\n\tbattleStream.buf = [];\r\n}\r\n\r\nfunction writeVoid(socket: Net.Socket) {\r\n\tsocket.write('00000000');\r\n}\r\n\r\nfunction onConnection(socket: Net.Socket, battleMap: Map<string, BattleStream>) {\r\n\tsocket.on('data', (chunk) => {\r\n\t\ttry {\r\n\t\t\tonData(socket, chunk, battleMap);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(error);\r\n\t\t}\r\n\t});\r\n\tsocket.on('end', () => console.log('Closing connection with the client'));\r\n\tsocket.on('error', (err) => console.error(err.stack));\r\n}\r\n\r\nfunction getCobbledMoves(socket: Net.Socket) {\r\n\tconst payload = JSON.stringify(Dex.mod(cobbledModId).moves.all());\r\n\tsocket.write(padNumber(payload.length, 8) + payload);\r\n}\r\n\r\nfunction getCobbledAbilityIds(socket: Net.Socket) {\r\n\tconst payload = JSON.stringify(Dex.mod(cobbledModId).abilities.all().map(ability => ability.id));\r\n\tsocket.write(padNumber(payload.length, 8) + payload);\r\n}\r\n\r\nfunction getCobbledItemIds(socket: Net.Socket) {\r\n\tconst payload = JSON.stringify(Dex.mod(cobbledModId).items.all().map(item => item.id));\r\n\tsocket.write(padNumber(payload.length, 8) + payload);\r\n}\r\n\r\nfunction afterCobbledSpeciesInit() {\r\n\tDex.modsLoaded = false;\r\n\tDex.includeMods();\r\n}\r\n\r\nfunction padNumber(num: number, size: number): string {\r\n\tlet numStr = num.toString();\r\n\twhile (numStr.length < size) numStr = \"0\" + numStr;\r\n\treturn numStr;\r\n}\r\n\r\n"],
  "mappings": "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",
  "names": ["battleMap", "socket", "chunk"]
}
