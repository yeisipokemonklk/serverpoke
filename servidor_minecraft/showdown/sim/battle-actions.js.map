{
  "version": 3,
  "sources": ["../../../sim/battle-actions.ts"],
  "sourcesContent": ["import {Dex, toID} from './dex';\r\n\r\nconst CHOOSABLE_TARGETS = new Set(['normal', 'any', 'adjacentAlly', 'adjacentAllyOrSelf', 'adjacentFoe']);\r\n\r\nexport class BattleActions {\r\n\tbattle: Battle;\r\n\tdex: ModdedDex;\r\n\r\n\treadonly MAX_MOVES: {readonly [k: string]: string} = {\r\n\t\tFlying: 'Max Airstream',\r\n\t\tDark: 'Max Darkness',\r\n\t\tFire: 'Max Flare',\r\n\t\tBug: 'Max Flutterby',\r\n\t\tWater: 'Max Geyser',\r\n\t\tStatus: 'Max Guard',\r\n\t\tIce: 'Max Hailstorm',\r\n\t\tFighting: 'Max Knuckle',\r\n\t\tElectric: 'Max Lightning',\r\n\t\tPsychic: 'Max Mindstorm',\r\n\t\tPoison: 'Max Ooze',\r\n\t\tGrass: 'Max Overgrowth',\r\n\t\tGhost: 'Max Phantasm',\r\n\t\tGround: 'Max Quake',\r\n\t\tRock: 'Max Rockfall',\r\n\t\tFairy: 'Max Starfall',\r\n\t\tSteel: 'Max Steelspike',\r\n\t\tNormal: 'Max Strike',\r\n\t\tDragon: 'Max Wyrmwind',\r\n\t};\r\n\r\n\treadonly Z_MOVES: {readonly [k: string]: string} = {\r\n\t\tPoison: \"Acid Downpour\",\r\n\t\tFighting: \"All-Out Pummeling\",\r\n\t\tDark: \"Black Hole Eclipse\",\r\n\t\tGrass: \"Bloom Doom\",\r\n\t\tNormal: \"Breakneck Blitz\",\r\n\t\tRock: \"Continental Crush\",\r\n\t\tSteel: \"Corkscrew Crash\",\r\n\t\tDragon: \"Devastating Drake\",\r\n\t\tElectric: \"Gigavolt Havoc\",\r\n\t\tWater: \"Hydro Vortex\",\r\n\t\tFire: \"Inferno Overdrive\",\r\n\t\tGhost: \"Never-Ending Nightmare\",\r\n\t\tBug: \"Savage Spin-Out\",\r\n\t\tPsychic: \"Shattered Psyche\",\r\n\t\tIce: \"Subzero Slammer\",\r\n\t\tFlying: \"Supersonic Skystrike\",\r\n\t\tGround: \"Tectonic Rage\",\r\n\t\tFairy: \"Twinkle Tackle\",\r\n\t};\r\n\r\n\tconstructor(battle: Battle) {\r\n\t\tthis.battle = battle;\r\n\t\tthis.dex = battle.dex;\r\n\t\tif (this.dex.data.Scripts.actions) Object.assign(this, this.dex.data.Scripts.actions);\r\n\t\tif (battle.format.actions) Object.assign(this, battle.format.actions);\r\n\t}\r\n\r\n\t// #region SWITCH\r\n\t// ==================================================================\r\n\r\n\tswitchIn(pokemon: Pokemon, pos: number, sourceEffect: Effect | null = null, isDrag?: boolean) {\r\n\t\tif (!pokemon || pokemon.isActive) {\r\n\t\t\tthis.battle.hint(\"A switch failed because the Pok\u00E9mon trying to switch in is already in.\");\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tconst side = pokemon.side;\r\n\t\tif (pos >= side.active.length) {\r\n\t\t\tthrow new Error(`Invalid switch position ${pos} / ${side.active.length}`);\r\n\t\t}\r\n\t\tconst oldActive = side.active[pos];\r\n\t\tconst unfaintedActive = oldActive?.hp ? oldActive : null;\r\n\t\tif (unfaintedActive) {\r\n\t\t\toldActive.beingCalledBack = true;\r\n\t\t\tlet switchCopyFlag: 'copyvolatile' | 'shedtail' | boolean = false;\r\n\t\t\tif (sourceEffect && typeof (sourceEffect as Move).selfSwitch === 'string') {\r\n\t\t\t\tswitchCopyFlag = (sourceEffect as Move).selfSwitch!;\r\n\t\t\t}\r\n\t\t\tif (!oldActive.skipBeforeSwitchOutEventFlag && !isDrag) {\r\n\t\t\t\tthis.battle.runEvent('BeforeSwitchOut', oldActive);\r\n\t\t\t\tif (this.battle.gen >= 5) {\r\n\t\t\t\t\tthis.battle.eachEvent('Update');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\toldActive.skipBeforeSwitchOutEventFlag = false;\r\n\t\t\tif (!this.battle.runEvent('SwitchOut', oldActive)) {\r\n\t\t\t\t// Warning: DO NOT interrupt a switch-out if you just want to trap a pokemon.\r\n\t\t\t\t// To trap a pokemon and prevent it from switching out, (e.g. Mean Look, Magnet Pull)\r\n\t\t\t\t// use the 'trapped' flag instead.\r\n\r\n\t\t\t\t// Note: Nothing in the real games can interrupt a switch-out (except Pursuit KOing,\r\n\t\t\t\t// which is handled elsewhere); this is just for custom formats.\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif (!oldActive.hp) {\r\n\t\t\t\t// a pokemon fainted from Pursuit before it could switch\r\n\t\t\t\treturn 'pursuitfaint';\r\n\t\t\t}\r\n\r\n\t\t\t// will definitely switch out at this point\r\n\r\n\t\t\toldActive.illusion = null;\r\n\t\t\tthis.battle.singleEvent('End', oldActive.getAbility(), oldActive.abilityState, oldActive);\r\n\r\n\t\t\t// if a pokemon is forced out by Whirlwind/etc or Eject Button/Pack, it can't use its chosen move\r\n\t\t\tthis.battle.queue.cancelAction(oldActive);\r\n\r\n\t\t\tlet newMove = null;\r\n\t\t\tif (this.battle.gen === 4 && sourceEffect) {\r\n\t\t\t\tnewMove = oldActive.lastMove;\r\n\t\t\t}\r\n\t\t\tif (switchCopyFlag) {\r\n\t\t\t\tpokemon.copyVolatileFrom(oldActive, switchCopyFlag);\r\n\t\t\t}\r\n\t\t\tif (newMove) pokemon.lastMove = newMove;\r\n\t\t\toldActive.clearVolatile();\r\n\t\t}\r\n\t\tif (oldActive) {\r\n\t\t\toldActive.isActive = false;\r\n\t\t\toldActive.isStarted = false;\r\n\t\t\toldActive.usedItemThisTurn = false;\r\n\t\t\toldActive.statsRaisedThisTurn = false;\r\n\t\t\toldActive.statsLoweredThisTurn = false;\r\n\t\t\toldActive.position = pokemon.position;\r\n\t\t\tpokemon.position = pos;\r\n\t\t\tside.pokemon[pokemon.position] = pokemon;\r\n\t\t\tside.pokemon[oldActive.position] = oldActive;\r\n\t\t}\r\n\t\tpokemon.isActive = true;\r\n\t\tside.active[pos] = pokemon;\r\n\t\tpokemon.activeTurns = 0;\r\n\t\tpokemon.activeMoveActions = 0;\r\n\t\tfor (const moveSlot of pokemon.moveSlots) {\r\n\t\t\tmoveSlot.used = false;\r\n\t\t}\r\n\t\tthis.battle.runEvent('BeforeSwitchIn', pokemon);\r\n\t\t// COBBLED: send uuid of disguise as optional (the actual uuid will be included in the first argument; see pokemon.toString)\r\n\t\tvar optionals = [sourceEffect ? `[from] ${ sourceEffect }` : null, pokemon.illusion ? `[is] ${ pokemon.illusion }` : null];\r\n\t\tthis.battle.add(isDrag ? 'drag' : 'switch', pokemon, pokemon.getDetails, ...(optionals.filter(Boolean)));\r\n\t\t// ==================================\r\n\t\tpokemon.abilityOrder = this.battle.abilityOrder++;\r\n\t\tif (isDrag && this.battle.gen === 2) pokemon.draggedIn = this.battle.turn;\r\n\t\tpokemon.previouslySwitchedIn++;\r\n\r\n\t\tif (isDrag && this.battle.gen >= 5) {\r\n\t\t\t// runSwitch happens immediately so that Mold Breaker can make hazards bypass Clear Body and Levitate\r\n\t\t\tthis.battle.singleEvent('PreStart', pokemon.getAbility(), pokemon.abilityState, pokemon);\r\n\t\t\tthis.runSwitch(pokemon);\r\n\t\t} else {\r\n\t\t\tthis.battle.queue.insertChoice({choice: 'runUnnerve', pokemon});\r\n\t\t\tthis.battle.queue.insertChoice({choice: 'runSwitch', pokemon});\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\tdragIn(side: Side, pos: number) {\r\n\t\tconst pokemon = this.battle.getRandomSwitchable(side);\r\n\t\tif (!pokemon || pokemon.isActive) return false;\r\n\t\tconst oldActive = side.active[pos];\r\n\t\tif (!oldActive) throw new Error(`nothing to drag out`);\r\n\t\tif (!oldActive.hp) return false;\r\n\r\n\t\tif (!this.battle.runEvent('DragOut', oldActive)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (!this.switchIn(pokemon, pos, null, true)) return false;\r\n\t\treturn true;\r\n\t}\r\n\trunSwitch(pokemon: Pokemon) {\r\n\t\tthis.battle.runEvent('Swap', pokemon);\r\n\r\n\t\tif (this.battle.gen >= 5) {\r\n\t\t\tthis.battle.runEvent('SwitchIn', pokemon);\r\n\t\t}\r\n\r\n\t\tthis.battle.runEvent('EntryHazard', pokemon);\r\n\r\n\t\tif (this.battle.gen <= 4) {\r\n\t\t\tthis.battle.runEvent('SwitchIn', pokemon);\r\n\t\t}\r\n\r\n\t\tif (this.battle.gen <= 2) {\r\n\t\t\t// pokemon.lastMove is reset for all Pokemon on the field after a switch. This affects Mirror Move.\r\n\t\t\tfor (const poke of this.battle.getAllActive()) poke.lastMove = null;\r\n\t\t\tif (!pokemon.side.faintedThisTurn && pokemon.draggedIn !== this.battle.turn) {\r\n\t\t\t\tthis.battle.runEvent('AfterSwitchInSelf', pokemon);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!pokemon.hp) return false;\r\n\t\tpokemon.isStarted = true;\r\n\t\tif (!pokemon.fainted) {\r\n\t\t\tthis.battle.singleEvent('Start', pokemon.getAbility(), pokemon.abilityState, pokemon);\r\n\t\t\tthis.battle.singleEvent('Start', pokemon.getItem(), pokemon.itemState, pokemon);\r\n\t\t}\r\n\t\tif (this.battle.gen === 4) {\r\n\t\t\tfor (const foeActive of pokemon.foes()) {\r\n\t\t\t\tfoeActive.removeVolatile('substitutebroken');\r\n\t\t\t}\r\n\t\t}\r\n\t\tpokemon.draggedIn = null;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region MOVES\r\n\t// ==================================================================\r\n\r\n\t/**\r\n\t * runMove is the \"outside\" move caller. It handles deducting PP,\r\n\t * flinching, full paralysis, etc. All the stuff up to and including\r\n\t * the \"POKEMON used MOVE\" message.\r\n\t *\r\n\t * For details of the difference between runMove and useMove, see\r\n\t * useMove's info.\r\n\t *\r\n\t * externalMove skips LockMove and PP deduction, mostly for use by\r\n\t * Dancer.\r\n\t */\r\n\trunMove(\r\n\t\tmoveOrMoveName: Move | string, pokemon: Pokemon, targetLoc: number, sourceEffect?: Effect | null,\r\n\t\tzMove?: string, externalMove?: boolean, maxMove?: string, originalTarget?: Pokemon\r\n\t) {\r\n\t\tpokemon.activeMoveActions++;\r\n\t\tlet target = this.battle.getTarget(pokemon, maxMove || zMove || moveOrMoveName, targetLoc, originalTarget);\r\n\t\tlet baseMove = this.dex.getActiveMove(moveOrMoveName);\r\n\t\tconst pranksterBoosted = baseMove.pranksterBoosted;\r\n\t\tif (baseMove.id !== 'struggle' && !zMove && !maxMove && !externalMove) {\r\n\t\t\tconst changedMove = this.battle.runEvent('OverrideAction', pokemon, target, baseMove);\r\n\t\t\tif (changedMove && changedMove !== true) {\r\n\t\t\t\tbaseMove = this.dex.getActiveMove(changedMove);\r\n\t\t\t\tif (pranksterBoosted) baseMove.pranksterBoosted = pranksterBoosted;\r\n\t\t\t\ttarget = this.battle.getRandomTarget(pokemon, baseMove);\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet move = baseMove;\r\n\t\tif (zMove) {\r\n\t\t\tmove = this.getActiveZMove(baseMove, pokemon);\r\n\t\t} else if (maxMove) {\r\n\t\t\tmove = this.getActiveMaxMove(baseMove, pokemon);\r\n\t\t}\r\n\r\n\t\tmove.isExternal = externalMove;\r\n\r\n\t\tthis.battle.setActiveMove(move, pokemon, target);\r\n\r\n\t\t/* if (pokemon.moveThisTurn) {\r\n\t\t\t// THIS IS PURELY A SANITY CHECK\r\n\t\t\t// DO NOT TAKE ADVANTAGE OF THIS TO PREVENT A POKEMON FROM MOVING;\r\n\t\t\t// USE this.queue.cancelMove INSTEAD\r\n\t\t\tthis.battle.debug('' + pokemon.id + ' INCONSISTENT STATE, ALREADY MOVED: ' + pokemon.moveThisTurn);\r\n\t\t\tthis.battle.clearActiveMove(true);\r\n\t\t\treturn;\r\n\t\t} */\r\n\t\tconst willTryMove = this.battle.runEvent('BeforeMove', pokemon, target, move);\r\n\t\tif (!willTryMove) {\r\n\t\t\tthis.battle.runEvent('MoveAborted', pokemon, target, move);\r\n\t\t\tthis.battle.clearActiveMove(true);\r\n\t\t\t// The event 'BeforeMove' could have returned false or null\r\n\t\t\t// false indicates that this counts as a move failing for the purpose of calculating Stomping Tantrum's base power\r\n\t\t\t// null indicates the opposite, as the Pokemon didn't have an option to choose anything\r\n\t\t\tpokemon.moveThisTurnResult = willTryMove;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Used exclusively for a hint later\r\n\t\tif (move.flags['cantusetwice'] && pokemon.lastMove?.id === move.id) {\r\n\t\t\tpokemon.addVolatile(move.id);\r\n\t\t}\r\n\r\n\t\tif (move.beforeMoveCallback) {\r\n\t\t\tif (move.beforeMoveCallback.call(this.battle, pokemon, target, move)) {\r\n\t\t\t\tthis.battle.clearActiveMove(true);\r\n\t\t\t\tpokemon.moveThisTurnResult = false;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tpokemon.lastDamage = 0;\r\n\t\tlet lockedMove;\r\n\t\tif (!externalMove) {\r\n\t\t\tlockedMove = this.battle.runEvent('LockMove', pokemon);\r\n\t\t\tif (lockedMove === true) lockedMove = false;\r\n\t\t\tif (!lockedMove) {\r\n\t\t\t\tif (!pokemon.deductPP(baseMove, null, target) && (move.id !== 'struggle')) {\r\n\t\t\t\t\tthis.battle.add('cant', pokemon, 'nopp', move);\r\n\t\t\t\t\tthis.battle.clearActiveMove(true);\r\n\t\t\t\t\tpokemon.moveThisTurnResult = false;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tsourceEffect = this.dex.conditions.get('lockedmove');\r\n\t\t\t}\r\n\t\t\tpokemon.moveUsed(move, targetLoc);\r\n\t\t}\r\n\r\n\t\t// Dancer Petal Dance hack\r\n\t\t// TODO: implement properly\r\n\t\tconst noLock = externalMove && !pokemon.volatiles['lockedmove'];\r\n\r\n\t\tif (zMove) {\r\n\t\t\tif (pokemon.illusion) {\r\n\t\t\t\tthis.battle.singleEvent('End', this.dex.abilities.get('Illusion'), pokemon.abilityState, pokemon);\r\n\t\t\t}\r\n\t\t\tthis.battle.add('-zpower', pokemon);\r\n\t\t\tpokemon.side.zMoveUsed = true;\r\n\t\t}\r\n\r\n\t\tconst oldActiveMove = move;\r\n\r\n\t\tconst moveDidSomething = this.useMove(baseMove, pokemon, target, sourceEffect, zMove, maxMove);\r\n\t\tthis.battle.lastSuccessfulMoveThisTurn = moveDidSomething ? this.battle.activeMove && this.battle.activeMove.id : null;\r\n\t\tif (this.battle.activeMove) move = this.battle.activeMove;\r\n\t\tthis.battle.singleEvent('AfterMove', move, null, pokemon, target, move);\r\n\t\tthis.battle.runEvent('AfterMove', pokemon, target, move);\r\n\t\tif (move.flags['cantusetwice'] && pokemon.removeVolatile(move.id)) {\r\n\t\t\tthis.battle.add('-hint', `Some effects can force a Pokemon to use ${move.name} again in a row.`);\r\n\t\t}\r\n\r\n\t\t// Dancer's activation order is completely different from any other event, so it's handled separately\r\n\t\tif (move.flags['dance'] && moveDidSomething && !move.isExternal) {\r\n\t\t\tconst dancers = [];\r\n\t\t\tfor (const currentPoke of this.battle.getAllActive()) {\r\n\t\t\t\tif (pokemon === currentPoke) continue;\r\n\t\t\t\tif (currentPoke.hasAbility('dancer') && !currentPoke.isSemiInvulnerable()) {\r\n\t\t\t\t\tdancers.push(currentPoke);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Dancer activates in order of lowest speed stat to highest\r\n\t\t\t// Note that the speed stat used is after any volatile replacements like Speed Swap,\r\n\t\t\t// but before any multipliers like Agility or Choice Scarf\r\n\t\t\t// Ties go to whichever Pokemon has had the ability for the least amount of time\r\n\t\t\tdancers.sort(\r\n\t\t\t\t(a, b) => -(b.storedStats['spe'] - a.storedStats['spe']) || b.abilityOrder - a.abilityOrder\r\n\t\t\t);\r\n\t\t\tconst targetOf1stDance = this.battle.activeTarget!;\r\n\t\t\tfor (const dancer of dancers) {\r\n\t\t\t\tif (this.battle.faintMessages()) break;\r\n\t\t\t\tif (dancer.fainted) continue;\r\n\t\t\t\tthis.battle.add('-activate', dancer, 'ability: Dancer');\r\n\t\t\t\tconst dancersTarget = !targetOf1stDance.isAlly(dancer) && pokemon.isAlly(dancer) ?\r\n\t\t\t\t\ttargetOf1stDance :\r\n\t\t\t\t\tpokemon;\r\n\t\t\t\tconst dancersTargetLoc = dancer.getLocOf(dancersTarget);\r\n\t\t\t\tthis.runMove(move.id, dancer, dancersTargetLoc, this.dex.abilities.get('dancer'), undefined, true);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (noLock && pokemon.volatiles['lockedmove']) delete pokemon.volatiles['lockedmove'];\r\n\t\tthis.battle.faintMessages();\r\n\t\tthis.battle.checkWin();\r\n\r\n\t\tif (this.battle.gen <= 4) {\r\n\t\t\t// In gen 4, the outermost move is considered the last move for Copycat\r\n\t\t\tthis.battle.activeMove = oldActiveMove;\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * useMove is the \"inside\" move caller. It handles effects of the\r\n\t * move itself, but not the idea of using the move.\r\n\t *\r\n\t * Most caller effects, like Sleep Talk, Nature Power, Magic Bounce,\r\n\t * etc use useMove.\r\n\t *\r\n\t * The only ones that use runMove are Instruct, Pursuit, and\r\n\t * Dancer.\r\n\t */\r\n\tuseMove(\r\n\t\tmove: Move | string, pokemon: Pokemon, target?: Pokemon | null,\r\n\t\tsourceEffect?: Effect | null, zMove?: string, maxMove?: string\r\n\t) {\r\n\t\tpokemon.moveThisTurnResult = undefined;\r\n\t\tconst oldMoveResult: boolean | null | undefined = pokemon.moveThisTurnResult;\r\n\t\tconst moveResult = this.useMoveInner(move, pokemon, target, sourceEffect, zMove, maxMove);\r\n\t\tif (oldMoveResult === pokemon.moveThisTurnResult) pokemon.moveThisTurnResult = moveResult;\r\n\t\treturn moveResult;\r\n\t}\r\n\tuseMoveInner(\r\n\t\tmoveOrMoveName: Move | string, pokemon: Pokemon, target?: Pokemon | null,\r\n\t\tsourceEffect?: Effect | null, zMove?: string, maxMove?: string\r\n\t) {\r\n\t\tif (!sourceEffect && this.battle.effect.id) sourceEffect = this.battle.effect;\r\n\t\tif (sourceEffect && ['instruct', 'custapberry'].includes(sourceEffect.id)) sourceEffect = null;\r\n\r\n\t\tlet move = this.dex.getActiveMove(moveOrMoveName);\r\n\t\tpokemon.lastMoveUsed = move;\r\n\t\tif (move.id === 'weatherball' && zMove) {\r\n\t\t\t// Z-Weather Ball only changes types if it's used directly,\r\n\t\t\t// not if it's called by Z-Sleep Talk or something.\r\n\t\t\tthis.battle.singleEvent('ModifyType', move, null, pokemon, target, move, move);\r\n\t\t\tif (move.type !== 'Normal') sourceEffect = move;\r\n\t\t}\r\n\t\tif (zMove || (move.category !== 'Status' && sourceEffect && (sourceEffect as ActiveMove).isZ)) {\r\n\t\t\tmove = this.getActiveZMove(move, pokemon);\r\n\t\t}\r\n\t\tif (maxMove && move.category !== 'Status') {\r\n\t\t\t// Max move outcome is dependent on the move type after type modifications from ability and the move itself\r\n\t\t\tthis.battle.singleEvent('ModifyType', move, null, pokemon, target, move, move);\r\n\t\t\tthis.battle.runEvent('ModifyType', pokemon, target, move, move);\r\n\t\t}\r\n\t\tif (maxMove || (move.category !== 'Status' && sourceEffect && (sourceEffect as ActiveMove).isMax)) {\r\n\t\t\tmove = this.getActiveMaxMove(move, pokemon);\r\n\t\t}\r\n\r\n\t\tif (this.battle.activeMove) {\r\n\t\t\tmove.priority = this.battle.activeMove.priority;\r\n\t\t\tif (!move.hasBounced) move.pranksterBoosted = this.battle.activeMove.pranksterBoosted;\r\n\t\t}\r\n\t\tconst baseTarget = move.target;\r\n\t\tlet targetRelayVar = {target};\r\n\t\ttargetRelayVar = this.battle.runEvent('ModifyTarget', pokemon, target, move, targetRelayVar, true);\r\n\t\tif (targetRelayVar.target !== undefined) target = targetRelayVar.target;\r\n\t\tif (target === undefined) target = this.battle.getRandomTarget(pokemon, move);\r\n\t\tif (move.target === 'self' || move.target === 'allies') {\r\n\t\t\ttarget = pokemon;\r\n\t\t}\r\n\t\tif (sourceEffect) {\r\n\t\t\tmove.sourceEffect = sourceEffect.id;\r\n\t\t\tmove.ignoreAbility = (sourceEffect as ActiveMove).ignoreAbility;\r\n\t\t}\r\n\t\tlet moveResult = false;\r\n\r\n\t\tthis.battle.setActiveMove(move, pokemon, target);\r\n\r\n\t\tthis.battle.singleEvent('ModifyType', move, null, pokemon, target, move, move);\r\n\t\tthis.battle.singleEvent('ModifyMove', move, null, pokemon, target, move, move);\r\n\t\tif (baseTarget !== move.target) {\r\n\t\t\t// Target changed in ModifyMove, so we must adjust it here\r\n\t\t\t// Adjust before the next event so the correct target is passed to the\r\n\t\t\t// event\r\n\t\t\ttarget = this.battle.getRandomTarget(pokemon, move);\r\n\t\t}\r\n\t\tmove = this.battle.runEvent('ModifyType', pokemon, target, move, move);\r\n\t\tmove = this.battle.runEvent('ModifyMove', pokemon, target, move, move);\r\n\t\tif (baseTarget !== move.target) {\r\n\t\t\t// Adjust again\r\n\t\t\ttarget = this.battle.getRandomTarget(pokemon, move);\r\n\t\t}\r\n\t\tif (!move || pokemon.fainted) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tlet attrs = '';\r\n\r\n\t\tlet movename = move.name;\r\n\t\tif (move.id === 'hiddenpower') movename = 'Hidden Power';\r\n\t\tif (sourceEffect) attrs += `|[from]${sourceEffect.fullname}`;\r\n\t\tif (zMove && move.isZ === true) {\r\n\t\t\tattrs = '|[anim]' + movename + attrs;\r\n\t\t\tmovename = 'Z-' + movename;\r\n\t\t}\r\n\t\tthis.battle.addMove('move', pokemon, movename, target + attrs);\r\n\r\n\t\tif (zMove) this.runZPower(move, pokemon);\r\n\r\n\t\tif (!target) {\r\n\t\t\tthis.battle.attrLastMove('[notarget]');\r\n\t\t\tthis.battle.add(this.battle.gen >= 5 ? '-fail' : '-notarget', pokemon);\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tconst {targets, pressureTargets} = pokemon.getMoveTargets(move, target);\r\n\t\tif (targets.length) {\r\n\t\t\ttarget = targets[targets.length - 1]; // in case of redirection\r\n\t\t}\r\n\r\n\t\tconst callerMoveForPressure = sourceEffect && (sourceEffect as ActiveMove).pp ? sourceEffect as ActiveMove : null;\r\n\t\tif (!sourceEffect || callerMoveForPressure || sourceEffect.id === 'pursuit') {\r\n\t\t\tlet extraPP = 0;\r\n\t\t\tfor (const source of pressureTargets) {\r\n\t\t\t\tconst ppDrop = this.battle.runEvent('DeductPP', source, pokemon, move);\r\n\t\t\t\tif (ppDrop !== true) {\r\n\t\t\t\t\textraPP += ppDrop || 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (extraPP > 0) {\r\n\t\t\t\tpokemon.deductPP(callerMoveForPressure || moveOrMoveName, extraPP);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!this.battle.singleEvent('TryMove', move, null, pokemon, target, move) ||\r\n\t\t\t!this.battle.runEvent('TryMove', pokemon, target, move)) {\r\n\t\t\tmove.mindBlownRecoil = false;\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tthis.battle.singleEvent('UseMoveMessage', move, null, pokemon, target, move);\r\n\r\n\t\tif (move.ignoreImmunity === undefined) {\r\n\t\t\tmove.ignoreImmunity = (move.category === 'Status');\r\n\t\t}\r\n\r\n\t\tif (this.battle.gen !== 4 && move.selfdestruct === 'always') {\r\n\t\t\tthis.battle.faint(pokemon, pokemon, move);\r\n\t\t}\r\n\r\n\t\tlet damage: number | false | undefined | '' = false;\r\n\t\tif (move.target === 'all' || move.target === 'foeSide' || move.target === 'allySide' || move.target === 'allyTeam') {\r\n\t\t\tdamage = this.tryMoveHit(targets, pokemon, move);\r\n\t\t\tif (damage === this.battle.NOT_FAIL) pokemon.moveThisTurnResult = null;\r\n\t\t\tif (damage || damage === 0 || damage === undefined) moveResult = true;\r\n\t\t} else {\r\n\t\t\tif (!targets.length) {\r\n\t\t\t\tthis.battle.attrLastMove('[notarget]');\r\n\t\t\t\tthis.battle.add(this.battle.gen >= 5 ? '-fail' : '-notarget', pokemon);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif (this.battle.gen === 4 && move.selfdestruct === 'always') {\r\n\t\t\t\tthis.battle.faint(pokemon, pokemon, move);\r\n\t\t\t}\r\n\t\t\tmoveResult = this.trySpreadMoveHit(targets, pokemon, move);\r\n\t\t}\r\n\t\tif (move.selfBoost && moveResult) this.moveHit(pokemon, pokemon, move, move.selfBoost, false, true);\r\n\t\tif (!pokemon.hp) {\r\n\t\t\tthis.battle.faint(pokemon, pokemon, move);\r\n\t\t}\r\n\r\n\t\tif (!moveResult) {\r\n\t\t\tthis.battle.singleEvent('MoveFail', move, null, target, pokemon, move);\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (\r\n\t\t\t!move.negateSecondary &&\r\n\t\t\t!(move.hasSheerForce && pokemon.hasAbility('sheerforce')) &&\r\n\t\t\t!move.flags['futuremove']\r\n\t\t) {\r\n\t\t\tconst originalHp = pokemon.hp;\r\n\t\t\tthis.battle.singleEvent('AfterMoveSecondarySelf', move, null, pokemon, target, move);\r\n\t\t\tthis.battle.runEvent('AfterMoveSecondarySelf', pokemon, target, move);\r\n\t\t\tif (pokemon && pokemon !== target && move.category !== 'Status') {\r\n\t\t\t\tif (pokemon.hp <= pokemon.maxhp / 2 && originalHp > pokemon.maxhp / 2) {\r\n\t\t\t\t\tthis.battle.runEvent('EmergencyExit', pokemon, pokemon);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\t/** NOTE: includes single-target moves */\r\n\ttrySpreadMoveHit(targets: Pokemon[], pokemon: Pokemon, move: ActiveMove, notActive?: boolean) {\r\n\t\tif (targets.length > 1 && !move.smartTarget) move.spreadHit = true;\r\n\r\n\t\tconst moveSteps: ((targets: Pokemon[], pokemon: Pokemon, move: ActiveMove) =>\r\n\t\t(number | boolean | \"\" | undefined)[] | undefined)[] = [\r\n\t\t\t// 0. check for semi invulnerability\r\n\t\t\tthis.hitStepInvulnerabilityEvent,\r\n\r\n\t\t\t// 1. run the 'TryHit' event (Protect, Magic Bounce, Volt Absorb, etc.) (this is step 2 in gens 5 & 6, and step 4 in gen 4)\r\n\t\t\tthis.hitStepTryHitEvent,\r\n\r\n\t\t\t// 2. check for type immunity (this is step 1 in gens 4-6)\r\n\t\t\tthis.hitStepTypeImmunity,\r\n\r\n\t\t\t// 3. check for various move-specific immunities\r\n\t\t\tthis.hitStepTryImmunity,\r\n\r\n\t\t\t// 4. check accuracy\r\n\t\t\tthis.hitStepAccuracy,\r\n\r\n\t\t\t// 5. break protection effects\r\n\t\t\tthis.hitStepBreakProtect,\r\n\r\n\t\t\t// 6. steal positive boosts (Spectral Thief)\r\n\t\t\tthis.hitStepStealBoosts,\r\n\r\n\t\t\t// 7. loop that processes each hit of the move (has its own steps per iteration)\r\n\t\t\tthis.hitStepMoveHitLoop,\r\n\t\t];\r\n\t\tif (this.battle.gen <= 6) {\r\n\t\t\t// Swap step 1 with step 2\r\n\t\t\t[moveSteps[1], moveSteps[2]] = [moveSteps[2], moveSteps[1]];\r\n\t\t}\r\n\t\tif (this.battle.gen === 4) {\r\n\t\t\t// Swap step 4 with new step 2 (old step 1)\r\n\t\t\t[moveSteps[2], moveSteps[4]] = [moveSteps[4], moveSteps[2]];\r\n\t\t}\r\n\r\n\t\tif (notActive) this.battle.setActiveMove(move, pokemon, targets[0]);\r\n\r\n\t\tconst hitResult = this.battle.singleEvent('Try', move, null, pokemon, targets[0], move) &&\r\n\t\t\tthis.battle.singleEvent('PrepareHit', move, {}, targets[0], pokemon, move) &&\r\n\t\t\tthis.battle.runEvent('PrepareHit', pokemon, targets[0], move);\r\n\t\tif (!hitResult) {\r\n\t\t\tif (hitResult === false) {\r\n\t\t\t\tthis.battle.add('-fail', pokemon);\r\n\t\t\t\tthis.battle.attrLastMove('[still]');\r\n\t\t\t}\r\n\t\t\treturn hitResult === this.battle.NOT_FAIL;\r\n\t\t}\r\n\r\n\t\tlet atLeastOneFailure = false;\r\n\t\tfor (const step of moveSteps) {\r\n\t\t\tconst hitResults: (number | boolean | \"\" | undefined)[] | undefined = step.call(this, targets, pokemon, move);\r\n\t\t\tif (!hitResults) continue;\r\n\t\t\ttargets = targets.filter((val, i) => hitResults[i] || hitResults[i] === 0);\r\n\t\t\tatLeastOneFailure = atLeastOneFailure || hitResults.some(val => val === false);\r\n\t\t\tif (move.smartTarget && atLeastOneFailure) move.smartTarget = false;\r\n\t\t\tif (!targets.length) {\r\n\t\t\t\t// console.log(step.name);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst moveResult = !!targets.length;\r\n\t\tif (!moveResult && !atLeastOneFailure) pokemon.moveThisTurnResult = null;\r\n\t\tconst hitSlot = targets.map(p => p.getSlot());\r\n\t\tif (move.spreadHit) this.battle.attrLastMove('[spread] ' + hitSlot.join(','));\r\n\t\treturn moveResult;\r\n\t}\r\n\thitStepInvulnerabilityEvent(targets: Pokemon[], pokemon: Pokemon, move: ActiveMove) {\r\n\t\tif (move.id === 'helpinghand') return new Array(targets.length).fill(true);\r\n\t\tconst hitResults: boolean[] = [];\r\n\t\tfor (const [i, target] of targets.entries()) {\r\n\t\t\tif (target.volatiles['commanding']) {\r\n\t\t\t\thitResults[i] = false;\r\n\t\t\t} else if (this.battle.gen >= 8 && move.id === 'toxic' && pokemon.hasType('Poison')) {\r\n\t\t\t\thitResults[i] = true;\r\n\t\t\t} else {\r\n\t\t\t\thitResults[i] = this.battle.runEvent('Invulnerability', target, pokemon, move);\r\n\t\t\t}\r\n\t\t\tif (hitResults[i] === false) {\r\n\t\t\t\tif (move.smartTarget) {\r\n\t\t\t\t\tmove.smartTarget = false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (!move.spreadHit) this.battle.attrLastMove('[miss]');\r\n\t\t\t\t\tthis.battle.add('-miss', pokemon, target);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn hitResults;\r\n\t}\r\n\thitStepTryHitEvent(targets: Pokemon[], pokemon: Pokemon, move: ActiveMove) {\r\n\t\tconst hitResults = this.battle.runEvent('TryHit', targets, pokemon, move);\r\n\t\tif (!hitResults.includes(true) && hitResults.includes(false)) {\r\n\t\t\tthis.battle.add('-fail', pokemon);\r\n\t\t\tthis.battle.attrLastMove('[still]');\r\n\t\t}\r\n\t\tfor (const i of targets.keys()) {\r\n\t\t\tif (hitResults[i] !== this.battle.NOT_FAIL) hitResults[i] = hitResults[i] || false;\r\n\t\t}\r\n\t\treturn hitResults;\r\n\t}\r\n\thitStepTypeImmunity(targets: Pokemon[], pokemon: Pokemon, move: ActiveMove) {\r\n\t\tif (move.ignoreImmunity === undefined) {\r\n\t\t\tmove.ignoreImmunity = (move.category === 'Status');\r\n\t\t}\r\n\r\n\t\tconst hitResults = [];\r\n\t\tfor (const i of targets.keys()) {\r\n\t\t\thitResults[i] = (move.ignoreImmunity && (move.ignoreImmunity === true || move.ignoreImmunity[move.type])) ||\r\n\t\t\t\ttargets[i].runImmunity(move.type, !move.smartTarget);\r\n\t\t}\r\n\r\n\t\treturn hitResults;\r\n\t}\r\n\thitStepTryImmunity(targets: Pokemon[], pokemon: Pokemon, move: ActiveMove) {\r\n\t\tconst hitResults = [];\r\n\t\tfor (const [i, target] of targets.entries()) {\r\n\t\t\tif (this.battle.gen >= 6 && move.flags['powder'] && target !== pokemon && !this.dex.getImmunity('powder', target)) {\r\n\t\t\t\tthis.battle.debug('natural powder immunity');\r\n\t\t\t\tthis.battle.add('-immune', target);\r\n\t\t\t\thitResults[i] = false;\r\n\t\t\t} else if (!this.battle.singleEvent('TryImmunity', move, {}, target, pokemon, move)) {\r\n\t\t\t\tthis.battle.add('-immune', target);\r\n\t\t\t\thitResults[i] = false;\r\n\t\t\t} else if (this.battle.gen >= 7 && move.pranksterBoosted && pokemon.hasAbility('prankster') &&\r\n\t\t\t\t!targets[i].isAlly(pokemon) && !this.dex.getImmunity('prankster', target)) {\r\n\t\t\t\tthis.battle.debug('natural prankster immunity');\r\n\t\t\t\tif (target.illusion || !(move.status && !this.dex.getImmunity(move.status, target))) {\r\n\t\t\t\t\tthis.battle.hint(\"Since gen 7, Dark is immune to Prankster moves.\");\r\n\t\t\t\t}\r\n\t\t\t\tthis.battle.add('-immune', target);\r\n\t\t\t\thitResults[i] = false;\r\n\t\t\t} else {\r\n\t\t\t\thitResults[i] = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn hitResults;\r\n\t}\r\n\thitStepAccuracy(targets: Pokemon[], pokemon: Pokemon, move: ActiveMove) {\r\n\t\tconst hitResults = [];\r\n\t\tfor (const [i, target] of targets.entries()) {\r\n\t\t\tthis.battle.activeTarget = target;\r\n\t\t\t// calculate true accuracy\r\n\t\t\tlet accuracy = move.accuracy;\r\n\t\t\tif (move.ohko) { // bypasses accuracy modifiers\r\n\t\t\t\tif (!target.isSemiInvulnerable()) {\r\n\t\t\t\t\taccuracy = 30;\r\n\t\t\t\t\tif (move.ohko === 'Ice' && this.battle.gen >= 7 && !pokemon.hasType('Ice')) {\r\n\t\t\t\t\t\taccuracy = 20;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!target.volatiles['dynamax'] && pokemon.level >= target.level &&\r\n\t\t\t\t\t\t(move.ohko === true || !target.hasType(move.ohko))) {\r\n\t\t\t\t\t\taccuracy += (pokemon.level - target.level);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.battle.add('-immune', target, '[ohko]');\r\n\t\t\t\t\t\thitResults[i] = false;\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\taccuracy = this.battle.runEvent('ModifyAccuracy', target, pokemon, move, accuracy);\r\n\t\t\t\tif (accuracy !== true) {\r\n\t\t\t\t\tlet boost = 0;\r\n\t\t\t\t\tif (!move.ignoreAccuracy) {\r\n\t\t\t\t\t\tconst boosts = this.battle.runEvent('ModifyBoost', pokemon, null, null, {...pokemon.boosts});\r\n\t\t\t\t\t\tboost = this.battle.clampIntRange(boosts['accuracy'], -6, 6);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!move.ignoreEvasion) {\r\n\t\t\t\t\t\tconst boosts = this.battle.runEvent('ModifyBoost', target, null, null, {...target.boosts});\r\n\t\t\t\t\t\tboost = this.battle.clampIntRange(boost - boosts['evasion'], -6, 6);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (boost > 0) {\r\n\t\t\t\t\t\taccuracy = this.battle.trunc(accuracy * (3 + boost) / 3);\r\n\t\t\t\t\t} else if (boost < 0) {\r\n\t\t\t\t\t\taccuracy = this.battle.trunc(accuracy * 3 / (3 - boost));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (move.alwaysHit || (move.id === 'toxic' && this.battle.gen >= 8 && pokemon.hasType('Poison')) ||\r\n\t\t\t\t\t(move.target === 'self' && move.category === 'Status' && !target.isSemiInvulnerable())) {\r\n\t\t\t\taccuracy = true; // bypasses ohko accuracy modifiers\r\n\t\t\t} else {\r\n\t\t\t\taccuracy = this.battle.runEvent('Accuracy', target, pokemon, move, accuracy);\r\n\t\t\t}\r\n\t\t\tif (accuracy !== true && !this.battle.randomChance(accuracy, 100)) {\r\n\t\t\t\tif (move.smartTarget) {\r\n\t\t\t\t\tmove.smartTarget = false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (!move.spreadHit) this.battle.attrLastMove('[miss]');\r\n\t\t\t\t\tthis.battle.add('-miss', pokemon, target);\r\n\t\t\t\t}\r\n\t\t\t\tif (!move.ohko && pokemon.hasItem('blunderpolicy') && pokemon.useItem()) {\r\n\t\t\t\t\tthis.battle.boost({spe: 2}, pokemon);\r\n\t\t\t\t}\r\n\t\t\t\thitResults[i] = false;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\thitResults[i] = true;\r\n\t\t}\r\n\t\treturn hitResults;\r\n\t}\r\n\thitStepBreakProtect(targets: Pokemon[], pokemon: Pokemon, move: ActiveMove) {\r\n\t\tif (move.breaksProtect) {\r\n\t\t\tfor (const target of targets) {\r\n\t\t\t\tlet broke = false;\r\n\t\t\t\tfor (const effectid of [\r\n\t\t\t\t\t'banefulbunker', 'burningbulwark', 'kingsshield', 'obstruct', 'protect', 'silktrap', 'spikyshield',\r\n\t\t\t\t]) {\r\n\t\t\t\t\tif (target.removeVolatile(effectid)) broke = true;\r\n\t\t\t\t}\r\n\t\t\t\tif (this.battle.gen >= 6 || !target.isAlly(pokemon)) {\r\n\t\t\t\t\tfor (const effectid of ['craftyshield', 'matblock', 'quickguard', 'wideguard']) {\r\n\t\t\t\t\t\tif (target.side.removeSideCondition(effectid)) broke = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (broke) {\r\n\t\t\t\t\tif (move.id === 'feint') {\r\n\t\t\t\t\t\tthis.battle.add('-activate', target, 'move: Feint');\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.battle.add('-activate', target, 'move: ' + move.name, '[broken]');\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.battle.gen >= 6) delete target.volatiles['stall'];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn undefined;\r\n\t}\r\n\thitStepStealBoosts(targets: Pokemon[], pokemon: Pokemon, move: ActiveMove) {\r\n\t\tconst target = targets[0]; // hardcoded\r\n\t\tif (move.stealsBoosts) {\r\n\t\t\tconst boosts: SparseBoostsTable = {};\r\n\t\t\tlet stolen = false;\r\n\t\t\tlet statName: BoostID;\r\n\t\t\tfor (statName in target.boosts) {\r\n\t\t\t\tconst stage = target.boosts[statName];\r\n\t\t\t\tif (stage > 0) {\r\n\t\t\t\t\tboosts[statName] = stage;\r\n\t\t\t\t\tstolen = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (stolen) {\r\n\t\t\t\tthis.battle.attrLastMove('[still]');\r\n\t\t\t\tthis.battle.add('-clearpositiveboost', target, pokemon, 'move: ' + move.name);\r\n\t\t\t\tthis.battle.boost(boosts, pokemon, pokemon);\r\n\r\n\t\t\t\tlet statName2: BoostID;\r\n\t\t\t\tfor (statName2 in boosts) {\r\n\t\t\t\t\tboosts[statName2] = 0;\r\n\t\t\t\t}\r\n\t\t\t\ttarget.setBoost(boosts);\r\n\t\t\t\tthis.battle.addMove('-anim', pokemon, \"Spectral Thief\", target);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn undefined;\r\n\t}\r\n\tafterMoveSecondaryEvent(targets: Pokemon[], pokemon: Pokemon, move: ActiveMove) {\r\n\t\t// console.log(`${targets}, ${pokemon}, ${move}`)\r\n\t\tif (!move.negateSecondary && !(move.hasSheerForce && pokemon.hasAbility('sheerforce'))) {\r\n\t\t\tthis.battle.singleEvent('AfterMoveSecondary', move, null, targets[0], pokemon, move);\r\n\t\t\tthis.battle.runEvent('AfterMoveSecondary', targets, pokemon, move);\r\n\t\t}\r\n\t\treturn undefined;\r\n\t}\r\n\t/** NOTE: used only for moves that target sides/fields rather than pokemon */\r\n\ttryMoveHit(targetOrTargets: Pokemon | Pokemon[], pokemon: Pokemon, move: ActiveMove): number | undefined | false | '' {\r\n\t\tconst target = Array.isArray(targetOrTargets) ? targetOrTargets[0] : targetOrTargets;\r\n\t\tconst targets = Array.isArray(targetOrTargets) ? targetOrTargets : [target];\r\n\r\n\t\tthis.battle.setActiveMove(move, pokemon, targets[0]);\r\n\r\n\t\tlet hitResult = this.battle.singleEvent('Try', move, null, pokemon, target, move) &&\r\n\t\t\tthis.battle.singleEvent('PrepareHit', move, {}, target, pokemon, move) &&\r\n\t\t\tthis.battle.runEvent('PrepareHit', pokemon, target, move);\r\n\t\tif (!hitResult) {\r\n\t\t\tif (hitResult === false) {\r\n\t\t\t\tthis.battle.add('-fail', pokemon);\r\n\t\t\t\tthis.battle.attrLastMove('[still]');\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tconst isFFAHazard = move.target === 'foeSide' && this.battle.gameType === 'freeforall';\r\n\t\tif (move.target === 'all') {\r\n\t\t\thitResult = this.battle.runEvent('TryHitField', target, pokemon, move);\r\n\t\t} else if (isFFAHazard) {\r\n\t\t\tconst hitResults: any[] = this.battle.runEvent('TryHitSide', targets, pokemon, move);\r\n\t\t\t// if some side blocked the move, prevent the move from executing against any other sides\r\n\t\t\tif (hitResults.some(result => !result)) return false;\r\n\t\t\thitResult = true;\r\n\t\t} else {\r\n\t\t\thitResult = this.battle.runEvent('TryHitSide', target, pokemon, move);\r\n\t\t}\r\n\t\tif (!hitResult) {\r\n\t\t\tif (hitResult === false) {\r\n\t\t\t\tthis.battle.add('-fail', pokemon);\r\n\t\t\t\tthis.battle.attrLastMove('[still]');\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn this.moveHit(isFFAHazard ? targets : target, pokemon, move);\r\n\t}\r\n\thitStepMoveHitLoop(targets: Pokemon[], pokemon: Pokemon, move: ActiveMove) { // Temporary name\r\n\t\tlet damage: (number | boolean | undefined)[] = [];\r\n\t\tfor (const i of targets.keys()) {\r\n\t\t\tdamage[i] = 0;\r\n\t\t}\r\n\t\tmove.totalDamage = 0;\r\n\t\tpokemon.lastDamage = 0;\r\n\t\tlet targetHits = move.multihit || 1;\r\n\t\tif (Array.isArray(targetHits)) {\r\n\t\t\t// yes, it's hardcoded... meh\r\n\t\t\tif (targetHits[0] === 2 && targetHits[1] === 5) {\r\n\t\t\t\tif (this.battle.gen >= 5) {\r\n\t\t\t\t\t// 35-35-15-15 out of 100 for 2-3-4-5 hits\r\n\t\t\t\t\ttargetHits = this.battle.sample([2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5]);\r\n\t\t\t\t\tif (targetHits < 4 && pokemon.hasItem('loadeddice')) {\r\n\t\t\t\t\t\ttargetHits = 5 - this.battle.random(2);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttargetHits = this.battle.sample([2, 2, 2, 3, 3, 3, 4, 5]);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\ttargetHits = this.battle.random(targetHits[0], targetHits[1] + 1);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (targetHits === 10 && pokemon.hasItem('loadeddice')) targetHits -= this.battle.random(7);\r\n\t\ttargetHits = Math.floor(targetHits);\r\n\t\tlet nullDamage = true;\r\n\t\tlet moveDamage: (number | boolean | undefined)[] = [];\r\n\t\t// There is no need to recursively check the \u00B4sleepUsable\u00B4 flag as Sleep Talk can only be used while asleep.\r\n\t\tconst isSleepUsable = move.sleepUsable || this.dex.moves.get(move.sourceEffect).sleepUsable;\r\n\r\n\t\tlet targetsCopy: (Pokemon | false | null)[] = targets.slice(0);\r\n\t\tlet hit: number;\r\n\t\tfor (hit = 1; hit <= targetHits; hit++) {\r\n\t\t\tif (damage.includes(false)) break;\r\n\t\t\tif (hit > 1 && pokemon.status === 'slp' && (!isSleepUsable || this.battle.gen === 4)) break;\r\n\t\t\tif (targets.every(target => !target?.hp)) break;\r\n\t\t\tmove.hit = hit;\r\n\t\t\tif (move.smartTarget && targets.length > 1) {\r\n\t\t\t\ttargetsCopy = [targets[hit - 1]];\r\n\t\t\t\tdamage = [damage[hit - 1]];\r\n\t\t\t} else {\r\n\t\t\t\ttargetsCopy = targets.slice(0);\r\n\t\t\t}\r\n\t\t\tconst target = targetsCopy[0]; // some relevant-to-single-target-moves-only things are hardcoded\r\n\t\t\tif (target && typeof move.smartTarget === 'boolean') {\r\n\t\t\t\tif (hit > 1) {\r\n\t\t\t\t\tthis.battle.addMove('-anim', pokemon, move.name, target);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.battle.retargetLastMove(target);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// like this (Triple Kick)\r\n\t\t\tif (target && move.multiaccuracy && hit > 1) {\r\n\t\t\t\tlet accuracy = move.accuracy;\r\n\t\t\t\tconst boostTable = [1, 4 / 3, 5 / 3, 2, 7 / 3, 8 / 3, 3];\r\n\t\t\t\tif (accuracy !== true) {\r\n\t\t\t\t\tif (!move.ignoreAccuracy) {\r\n\t\t\t\t\t\tconst boosts = this.battle.runEvent('ModifyBoost', pokemon, null, null, {...pokemon.boosts});\r\n\t\t\t\t\t\tconst boost = this.battle.clampIntRange(boosts['accuracy'], -6, 6);\r\n\t\t\t\t\t\tif (boost > 0) {\r\n\t\t\t\t\t\t\taccuracy *= boostTable[boost];\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\taccuracy /= boostTable[-boost];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!move.ignoreEvasion) {\r\n\t\t\t\t\t\tconst boosts = this.battle.runEvent('ModifyBoost', target, null, null, {...target.boosts});\r\n\t\t\t\t\t\tconst boost = this.battle.clampIntRange(boosts['evasion'], -6, 6);\r\n\t\t\t\t\t\tif (boost > 0) {\r\n\t\t\t\t\t\t\taccuracy /= boostTable[boost];\r\n\t\t\t\t\t\t} else if (boost < 0) {\r\n\t\t\t\t\t\t\taccuracy *= boostTable[-boost];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\taccuracy = this.battle.runEvent('ModifyAccuracy', target, pokemon, move, accuracy);\r\n\t\t\t\tif (!move.alwaysHit) {\r\n\t\t\t\t\taccuracy = this.battle.runEvent('Accuracy', target, pokemon, move, accuracy);\r\n\t\t\t\t\tif (accuracy !== true && !this.battle.randomChance(accuracy, 100)) break;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst moveData = move;\r\n\t\t\tif (!moveData.flags) moveData.flags = {};\r\n\r\n\t\t\tlet moveDamageThisHit;\r\n\t\t\t// Modifies targetsCopy (which is why it's a copy)\r\n\t\t\t[moveDamageThisHit, targetsCopy] = this.spreadMoveHit(targetsCopy, pokemon, move, moveData);\r\n\t\t\t// When Dragon Darts targets two different pokemon, targetsCopy is a length 1 array each hit\r\n\t\t\t// so spreadMoveHit returns a length 1 damage array\r\n\t\t\tif (move.smartTarget) {\r\n\t\t\t\tmoveDamage.push(...moveDamageThisHit);\r\n\t\t\t} else {\r\n\t\t\t\tmoveDamage = moveDamageThisHit;\r\n\t\t\t}\r\n\r\n\t\t\tif (!moveDamage.some(val => val !== false)) break;\r\n\t\t\tnullDamage = false;\r\n\r\n\t\t\tfor (const [i, md] of moveDamage.entries()) {\r\n\t\t\t\tif (move.smartTarget && i !== hit - 1) continue;\r\n\t\t\t\t// Damage from each hit is individually counted for the\r\n\t\t\t\t// purposes of Counter, Metal Burst, and Mirror Coat.\r\n\t\t\t\tdamage[i] = md === true || !md ? 0 : md;\r\n\t\t\t\t// Total damage dealt is accumulated for the purposes of recoil (Parental Bond).\r\n\t\t\t\tmove.totalDamage += damage[i] as number;\r\n\t\t\t}\r\n\t\t\tif (move.mindBlownRecoil) {\r\n\t\t\t\tconst hpBeforeRecoil = pokemon.hp;\r\n\t\t\t\tthis.battle.damage(Math.round(pokemon.maxhp / 2), pokemon, pokemon, this.dex.conditions.get(move.id), true);\r\n\t\t\t\tmove.mindBlownRecoil = false;\r\n\t\t\t\tif (pokemon.hp <= pokemon.maxhp / 2 && hpBeforeRecoil > pokemon.maxhp / 2) {\r\n\t\t\t\t\tthis.battle.runEvent('EmergencyExit', pokemon, pokemon);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.battle.eachEvent('Update');\r\n\t\t\tif (!pokemon.hp && targets.length === 1) {\r\n\t\t\t\thit++; // report the correct number of hits for multihit moves\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// hit is 1 higher than the actual hit count\r\n\t\tif (hit === 1) return damage.fill(false);\r\n\t\tif (nullDamage) damage.fill(false);\r\n\t\tthis.battle.faintMessages(false, false, !pokemon.hp);\r\n\t\tif (move.multihit && typeof move.smartTarget !== 'boolean') {\r\n\t\t\tthis.battle.add('-hitcount', targets[0], hit - 1);\r\n\t\t}\r\n\r\n\t\tif ((move.recoil || move.id === 'chloroblast') && move.totalDamage) {\r\n\t\t\tconst hpBeforeRecoil = pokemon.hp;\r\n\t\t\tthis.battle.damage(this.calcRecoilDamage(move.totalDamage, move, pokemon), pokemon, pokemon, 'recoil');\r\n\t\t\tif (pokemon.hp <= pokemon.maxhp / 2 && hpBeforeRecoil > pokemon.maxhp / 2) {\r\n\t\t\t\tthis.battle.runEvent('EmergencyExit', pokemon, pokemon);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (move.struggleRecoil) {\r\n\t\t\tconst hpBeforeRecoil = pokemon.hp;\r\n\t\t\tlet recoilDamage;\r\n\t\t\tif (this.dex.gen >= 5) {\r\n\t\t\t\trecoilDamage = this.battle.clampIntRange(Math.round(pokemon.baseMaxhp / 4), 1);\r\n\t\t\t} else {\r\n\t\t\t\trecoilDamage = this.battle.clampIntRange(this.battle.trunc(pokemon.maxhp / 4), 1);\r\n\t\t\t}\r\n\t\t\tthis.battle.directDamage(recoilDamage, pokemon, pokemon, {id: 'strugglerecoil'} as Condition);\r\n\t\t\tif (pokemon.hp <= pokemon.maxhp / 2 && hpBeforeRecoil > pokemon.maxhp / 2) {\r\n\t\t\t\tthis.battle.runEvent('EmergencyExit', pokemon, pokemon);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// smartTarget messes up targetsCopy, but smartTarget should in theory ensure that targets will never fail, anyway\r\n\t\tif (move.smartTarget) {\r\n\t\t\ttargetsCopy = targets.slice(0);\r\n\t\t}\r\n\r\n\t\tfor (const [i, target] of targetsCopy.entries()) {\r\n\t\t\tif (target && pokemon !== target) {\r\n\t\t\t\ttarget.gotAttacked(move, moveDamage[i] as number | false | undefined, pokemon);\r\n\t\t\t\tif (typeof moveDamage[i] === 'number') {\r\n\t\t\t\t\ttarget.timesAttacked += move.smartTarget ? 1 : hit - 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (move.ohko && !targets[0].hp) this.battle.add('-ohko');\r\n\r\n\t\tif (!damage.some(val => !!val || val === 0)) return damage;\r\n\r\n\t\tthis.battle.eachEvent('Update');\r\n\r\n\t\tthis.afterMoveSecondaryEvent(targetsCopy.filter(val => !!val) as Pokemon[], pokemon, move);\r\n\r\n\t\tif (!move.negateSecondary && !(move.hasSheerForce && pokemon.hasAbility('sheerforce'))) {\r\n\t\t\tfor (const [i, d] of damage.entries()) {\r\n\t\t\t\t// There are no multihit spread moves, so it's safe to use move.totalDamage for multihit moves\r\n\t\t\t\t// The previous check was for `move.multihit`, but that fails for Dragon Darts\r\n\t\t\t\tconst curDamage = targets.length === 1 ? move.totalDamage : d;\r\n\t\t\t\tif (typeof curDamage === 'number' && targets[i].hp) {\r\n\t\t\t\t\tconst targetHPBeforeDamage = (targets[i].hurtThisTurn || 0) + curDamage;\r\n\t\t\t\t\tif (targets[i].hp <= targets[i].maxhp / 2 && targetHPBeforeDamage > targets[i].maxhp / 2) {\r\n\t\t\t\t\t\tthis.battle.runEvent('EmergencyExit', targets[i], pokemon);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn damage;\r\n\t}\r\n\tspreadMoveHit(\r\n\t\ttargets: SpreadMoveTargets, pokemon: Pokemon, moveOrMoveName: ActiveMove,\r\n\t\thitEffect?: Dex.HitEffect, isSecondary?: boolean, isSelf?: boolean\r\n\t): [SpreadMoveDamage, SpreadMoveTargets] {\r\n\t\t// Hardcoded for single-target purposes\r\n\t\t// (no spread moves have any kind of onTryHit handler)\r\n\t\tconst target = targets[0];\r\n\t\tlet damage: (number | boolean | undefined)[] = [];\r\n\t\tfor (const i of targets.keys()) {\r\n\t\t\tdamage[i] = true;\r\n\t\t}\r\n\t\tconst move = this.dex.getActiveMove(moveOrMoveName);\r\n\t\tlet hitResult: boolean | number | null = true;\r\n\t\tlet moveData = hitEffect as ActiveMove;\r\n\t\tif (!moveData) moveData = move;\r\n\t\tif (!moveData.flags) moveData.flags = {};\r\n\t\tif (move.target === 'all' && !isSelf) {\r\n\t\t\thitResult = this.battle.singleEvent('TryHitField', moveData, {}, target || null, pokemon, move);\r\n\t\t} else if ((move.target === 'foeSide' || move.target === 'allySide' || move.target === 'allyTeam') && !isSelf) {\r\n\t\t\thitResult = this.battle.singleEvent('TryHitSide', moveData, {}, target || null, pokemon, move);\r\n\t\t} else if (target) {\r\n\t\t\thitResult = this.battle.singleEvent('TryHit', moveData, {}, target, pokemon, move);\r\n\t\t}\r\n\t\tif (!hitResult) {\r\n\t\t\tif (hitResult === false) {\r\n\t\t\t\tthis.battle.add('-fail', pokemon);\r\n\t\t\t\tthis.battle.attrLastMove('[still]');\r\n\t\t\t}\r\n\t\t\treturn [[false], targets]; // single-target only\r\n\t\t}\r\n\r\n\t\t// 0. check for substitute\r\n\t\tif (!isSecondary && !isSelf) {\r\n\t\t\tif (move.target !== 'all' && move.target !== 'allyTeam' && move.target !== 'allySide' && move.target !== 'foeSide') {\r\n\t\t\t\tdamage = this.tryPrimaryHitEvent(damage, targets, pokemon, move, moveData, isSecondary);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (const i of targets.keys()) {\r\n\t\t\tif (damage[i] === this.battle.HIT_SUBSTITUTE) {\r\n\t\t\t\tdamage[i] = true;\r\n\t\t\t\ttargets[i] = null;\r\n\t\t\t}\r\n\t\t\tif (targets[i] && isSecondary && !moveData.self) {\r\n\t\t\t\tdamage[i] = true;\r\n\t\t\t}\r\n\t\t\tif (!damage[i]) targets[i] = false;\r\n\t\t}\r\n\t\t// 1. call to this.battle.getDamage\r\n\t\tdamage = this.getSpreadDamage(damage, targets, pokemon, move, moveData, isSecondary, isSelf);\r\n\r\n\t\tfor (const i of targets.keys()) {\r\n\t\t\tif (damage[i] === false) targets[i] = false;\r\n\t\t}\r\n\r\n\t\t// 2. call to this.battle.spreadDamage\r\n\t\tdamage = this.battle.spreadDamage(damage, targets, pokemon, move);\r\n\r\n\t\tfor (const i of targets.keys()) {\r\n\t\t\tif (damage[i] === false) targets[i] = false;\r\n\t\t}\r\n\r\n\t\t// 3. onHit event happens here\r\n\t\tdamage = this.runMoveEffects(damage, targets, pokemon, move, moveData, isSecondary, isSelf);\r\n\r\n\t\tfor (const i of targets.keys()) {\r\n\t\t\tif (!damage[i] && damage[i] !== 0) targets[i] = false;\r\n\t\t}\r\n\r\n\t\t// steps 4 and 5 can mess with this.battle.activeTarget, which needs to be preserved for Dancer\r\n\t\tconst activeTarget = this.battle.activeTarget;\r\n\r\n\t\t// 4. self drops (start checking for targets[i] === false here)\r\n\t\tif (moveData.self && !move.selfDropped) this.selfDrops(targets, pokemon, move, moveData, isSecondary);\r\n\r\n\t\t// 5. secondary effects\r\n\t\tif (moveData.secondaries) this.secondaries(targets, pokemon, move, moveData, isSelf);\r\n\r\n\t\tthis.battle.activeTarget = activeTarget;\r\n\r\n\t\t// 6. force switch\r\n\t\tif (moveData.forceSwitch) damage = this.forceSwitch(damage, targets, pokemon, move);\r\n\r\n\t\tfor (const i of targets.keys()) {\r\n\t\t\tif (!damage[i] && damage[i] !== 0) targets[i] = false;\r\n\t\t}\r\n\r\n\t\tconst damagedTargets: Pokemon[] = [];\r\n\t\tconst damagedDamage = [];\r\n\t\tfor (const [i, t] of targets.entries()) {\r\n\t\t\tif (typeof damage[i] === 'number' && t) {\r\n\t\t\t\tdamagedTargets.push(t);\r\n\t\t\t\tdamagedDamage.push(damage[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst pokemonOriginalHP = pokemon.hp;\r\n\t\tif (damagedDamage.length && !isSecondary && !isSelf) {\r\n\t\t\tthis.battle.runEvent('DamagingHit', damagedTargets, pokemon, move, damagedDamage);\r\n\t\t\tif (moveData.onAfterHit) {\r\n\t\t\t\tfor (const t of damagedTargets) {\r\n\t\t\t\t\tthis.battle.singleEvent('AfterHit', moveData, {}, t, pokemon, move);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (pokemon.hp && pokemon.hp <= pokemon.maxhp / 2 && pokemonOriginalHP > pokemon.maxhp / 2) {\r\n\t\t\t\tthis.battle.runEvent('EmergencyExit', pokemon);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn [damage, targets];\r\n\t}\r\n\ttryPrimaryHitEvent(\r\n\t\tdamage: SpreadMoveDamage, targets: SpreadMoveTargets, pokemon: Pokemon,\r\n\t\tmove: ActiveMove, moveData: ActiveMove, isSecondary?: boolean\r\n\t): SpreadMoveDamage {\r\n\t\tfor (const [i, target] of targets.entries()) {\r\n\t\t\tif (!target) continue;\r\n\t\t\tdamage[i] = this.battle.runEvent('TryPrimaryHit', target, pokemon, moveData);\r\n\t\t}\r\n\t\treturn damage;\r\n\t}\r\n\tgetSpreadDamage(\r\n\t\tdamage: SpreadMoveDamage, targets: SpreadMoveTargets, source: Pokemon,\r\n\t\tmove: ActiveMove, moveData: ActiveMove, isSecondary?: boolean, isSelf?: boolean\r\n\t): SpreadMoveDamage {\r\n\t\tfor (const [i, target] of targets.entries()) {\r\n\t\t\tif (!target) continue;\r\n\t\t\tthis.battle.activeTarget = target;\r\n\t\t\tdamage[i] = undefined;\r\n\t\t\tconst curDamage = this.getDamage(source, target, moveData);\r\n\t\t\t// getDamage has several possible return values:\r\n\t\t\t//\r\n\t\t\t//   a number:\r\n\t\t\t//     means that much damage is dealt (0 damage still counts as dealing\r\n\t\t\t//     damage for the purposes of things like Static)\r\n\t\t\t//   false:\r\n\t\t\t//     gives error message: \"But it failed!\" and move ends\r\n\t\t\t//   null:\r\n\t\t\t//     the move ends, with no message (usually, a custom fail message\r\n\t\t\t//     was already output by an event handler)\r\n\t\t\t//   undefined:\r\n\t\t\t//     means no damage is dealt and the move continues\r\n\t\t\t//\r\n\t\t\t// basically, these values have the same meanings as they do for event\r\n\t\t\t// handlers.\r\n\r\n\t\t\tif (curDamage === false || curDamage === null) {\r\n\t\t\t\tif (damage[i] === false && !isSecondary && !isSelf) {\r\n\t\t\t\t\tthis.battle.add('-fail', source);\r\n\t\t\t\t\tthis.battle.attrLastMove('[still]');\r\n\t\t\t\t}\r\n\t\t\t\tthis.battle.debug('damage calculation interrupted');\r\n\t\t\t\tdamage[i] = false;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tdamage[i] = curDamage;\r\n\t\t}\r\n\t\treturn damage;\r\n\t}\r\n\trunMoveEffects(\r\n\t\tdamage: SpreadMoveDamage, targets: SpreadMoveTargets, source: Pokemon,\r\n\t\tmove: ActiveMove, moveData: ActiveMove, isSecondary?: boolean, isSelf?: boolean\r\n\t) {\r\n\t\tlet didAnything: number | boolean | null | undefined = damage.reduce(this.combineResults);\r\n\t\tfor (const [i, target] of targets.entries()) {\r\n\t\t\tif (target === false) continue;\r\n\t\t\tlet hitResult;\r\n\t\t\tlet didSomething: number | boolean | null | undefined = undefined;\r\n\r\n\t\t\tif (target) {\r\n\t\t\t\tif (moveData.boosts && !target.fainted) {\r\n\t\t\t\t\thitResult = this.battle.boost(moveData.boosts, target, source, move, isSecondary, isSelf);\r\n\t\t\t\t\tdidSomething = this.combineResults(didSomething, hitResult);\r\n\t\t\t\t}\r\n\t\t\t\tif (moveData.heal && !target.fainted) {\r\n\t\t\t\t\tif (target.hp >= target.maxhp) {\r\n\t\t\t\t\t\tthis.battle.add('-fail', target, 'heal');\r\n\t\t\t\t\t\tthis.battle.attrLastMove('[still]');\r\n\t\t\t\t\t\tdamage[i] = this.combineResults(damage[i], false);\r\n\t\t\t\t\t\tdidAnything = this.combineResults(didAnything, null);\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst amount = target.baseMaxhp * moveData.heal[0] / moveData.heal[1];\r\n\t\t\t\t\tconst d = target.heal((this.battle.gen < 5 ? Math.floor : Math.round)(amount));\r\n\t\t\t\t\tif (!d && d !== 0) {\r\n\t\t\t\t\t\tthis.battle.add('-fail', source);\r\n\t\t\t\t\t\tthis.battle.attrLastMove('[still]');\r\n\t\t\t\t\t\tthis.battle.debug('heal interrupted');\r\n\t\t\t\t\t\tdamage[i] = this.combineResults(damage[i], false);\r\n\t\t\t\t\t\tdidAnything = this.combineResults(didAnything, null);\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.battle.add('-heal', target, target.getHealth);\r\n\t\t\t\t\tdidSomething = true;\r\n\t\t\t\t}\r\n\t\t\t\tif (moveData.status) {\r\n\t\t\t\t\thitResult = target.trySetStatus(moveData.status, source, moveData.ability ? moveData.ability : move);\r\n\t\t\t\t\tif (!hitResult && move.status) {\r\n\t\t\t\t\t\tdamage[i] = this.combineResults(damage[i], false);\r\n\t\t\t\t\t\tdidAnything = this.combineResults(didAnything, null);\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdidSomething = this.combineResults(didSomething, hitResult);\r\n\t\t\t\t}\r\n\t\t\t\tif (moveData.forceStatus) {\r\n\t\t\t\t\thitResult = target.setStatus(moveData.forceStatus, source, move);\r\n\t\t\t\t\tdidSomething = this.combineResults(didSomething, hitResult);\r\n\t\t\t\t}\r\n\t\t\t\tif (moveData.volatileStatus) {\r\n\t\t\t\t\thitResult = target.addVolatile(moveData.volatileStatus, source, move);\r\n\t\t\t\t\tdidSomething = this.combineResults(didSomething, hitResult);\r\n\t\t\t\t}\r\n\t\t\t\tif (moveData.sideCondition) {\r\n\t\t\t\t\thitResult = target.side.addSideCondition(moveData.sideCondition, source, move);\r\n\t\t\t\t\tdidSomething = this.combineResults(didSomething, hitResult);\r\n\t\t\t\t}\r\n\t\t\t\tif (moveData.slotCondition) {\r\n\t\t\t\t\thitResult = target.side.addSlotCondition(target, moveData.slotCondition, source, move);\r\n\t\t\t\t\tdidSomething = this.combineResults(didSomething, hitResult);\r\n\t\t\t\t}\r\n\t\t\t\tif (moveData.weather) {\r\n\t\t\t\t\thitResult = this.battle.field.setWeather(moveData.weather, source, move);\r\n\t\t\t\t\tdidSomething = this.combineResults(didSomething, hitResult);\r\n\t\t\t\t}\r\n\t\t\t\tif (moveData.terrain) {\r\n\t\t\t\t\thitResult = this.battle.field.setTerrain(moveData.terrain, source, move);\r\n\t\t\t\t\tdidSomething = this.combineResults(didSomething, hitResult);\r\n\t\t\t\t}\r\n\t\t\t\tif (moveData.pseudoWeather) {\r\n\t\t\t\t\thitResult = this.battle.field.addPseudoWeather(moveData.pseudoWeather, source, move);\r\n\t\t\t\t\tdidSomething = this.combineResults(didSomething, hitResult);\r\n\t\t\t\t}\r\n\t\t\t\tif (moveData.forceSwitch) {\r\n\t\t\t\t\thitResult = !!this.battle.canSwitch(target.side);\r\n\t\t\t\t\tdidSomething = this.combineResults(didSomething, hitResult);\r\n\t\t\t\t}\r\n\t\t\t\t// Hit events\r\n\t\t\t\t//   These are like the TryHit events, except we don't need a FieldHit event.\r\n\t\t\t\t//   Scroll up for the TryHit event documentation, and just ignore the \"Try\" part. ;)\r\n\t\t\t\tif (move.target === 'all' && !isSelf) {\r\n\t\t\t\t\tif (moveData.onHitField) {\r\n\t\t\t\t\t\thitResult = this.battle.singleEvent('HitField', moveData, {}, target, source, move);\r\n\t\t\t\t\t\tdidSomething = this.combineResults(didSomething, hitResult);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if ((move.target === 'foeSide' || move.target === 'allySide') && !isSelf) {\r\n\t\t\t\t\tif (moveData.onHitSide) {\r\n\t\t\t\t\t\thitResult = this.battle.singleEvent('HitSide', moveData, {}, target.side, source, move);\r\n\t\t\t\t\t\tdidSomething = this.combineResults(didSomething, hitResult);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (moveData.onHit) {\r\n\t\t\t\t\t\thitResult = this.battle.singleEvent('Hit', moveData, {}, target, source, move);\r\n\t\t\t\t\t\tdidSomething = this.combineResults(didSomething, hitResult);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!isSelf && !isSecondary) {\r\n\t\t\t\t\t\tthis.battle.runEvent('Hit', target, source, move);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (moveData.selfdestruct === 'ifHit' && damage[i] !== false) {\r\n\t\t\t\tthis.battle.faint(source, source, move);\r\n\t\t\t}\r\n\t\t\tif (moveData.selfSwitch) {\r\n\t\t\t\tif (this.battle.canSwitch(source.side) && !source.volatiles['commanded']) {\r\n\t\t\t\t\tdidSomething = true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdidSomething = this.combineResults(didSomething, false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Move didn't fail because it didn't try to do anything\r\n\t\t\tif (didSomething === undefined) didSomething = true;\r\n\t\t\tdamage[i] = this.combineResults(damage[i], didSomething === null ? false : didSomething);\r\n\t\t\tdidAnything = this.combineResults(didAnything, didSomething);\r\n\t\t}\r\n\r\n\t\tif (!didAnything && didAnything !== 0 && !moveData.self && !moveData.selfdestruct) {\r\n\t\t\tif (!isSelf && !isSecondary) {\r\n\t\t\t\tif (didAnything === false) {\r\n\t\t\t\t\tthis.battle.add('-fail', source);\r\n\t\t\t\t\tthis.battle.attrLastMove('[still]');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.battle.debug('move failed because it did nothing');\r\n\t\t} else if (move.selfSwitch && source.hp && !source.volatiles['commanded']) {\r\n\t\t\tsource.switchFlag = move.id;\r\n\t\t}\r\n\r\n\t\treturn damage;\r\n\t}\r\n\tselfDrops(\r\n\t\ttargets: SpreadMoveTargets, source: Pokemon,\r\n\t\tmove: ActiveMove, moveData: ActiveMove, isSecondary?: boolean\r\n\t) {\r\n\t\tfor (const target of targets) {\r\n\t\t\tif (target === false) continue;\r\n\t\t\tif (moveData.self && !move.selfDropped) {\r\n\t\t\t\tif (!isSecondary && moveData.self.boosts) {\r\n\t\t\t\t\tconst secondaryRoll = this.battle.random(100);\r\n\t\t\t\t\tif (typeof moveData.self.chance === 'undefined' || secondaryRoll < moveData.self.chance) {\r\n\t\t\t\t\t\tthis.moveHit(source, source, move, moveData.self, isSecondary, true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!move.multihit) move.selfDropped = true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.moveHit(source, source, move, moveData.self, isSecondary, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tsecondaries(targets: SpreadMoveTargets, source: Pokemon, move: ActiveMove, moveData: ActiveMove, isSelf?: boolean) {\r\n\t\tif (!moveData.secondaries) return;\r\n\t\tfor (const target of targets) {\r\n\t\t\tif (target === false) continue;\r\n\t\t\tconst secondaries: Dex.SecondaryEffect[] =\r\n\t\t\t\tthis.battle.runEvent('ModifySecondaries', target, source, moveData, moveData.secondaries.slice());\r\n\t\t\tfor (const secondary of secondaries) {\r\n\t\t\t\tconst secondaryRoll = this.battle.random(100);\r\n\t\t\t\t// User stat boosts or target stat drops can possibly overflow if it goes beyond 256 in Gen 8 or prior\r\n\t\t\t\tconst secondaryOverflow = (secondary.boosts || secondary.self) && this.battle.gen <= 8;\r\n\t\t\t\tif (typeof secondary.chance === 'undefined' ||\r\n\t\t\t\t\tsecondaryRoll < (secondaryOverflow ? secondary.chance % 256 : secondary.chance)) {\r\n\t\t\t\t\tthis.moveHit(target, source, move, secondary, true, isSelf);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tforceSwitch(\r\n\t\tdamage: SpreadMoveDamage, targets: SpreadMoveTargets, source: Pokemon, move: ActiveMove\r\n\t) {\r\n\t\tfor (const [i, target] of targets.entries()) {\r\n\t\t\tif (target && target.hp > 0 && source.hp > 0 && this.battle.canSwitch(target.side)) {\r\n\t\t\t\tconst hitResult = this.battle.runEvent('DragOut', target, source, move);\r\n\t\t\t\tif (hitResult) {\r\n\t\t\t\t\ttarget.forceSwitchFlag = true;\r\n\t\t\t\t} else if (hitResult === false && move.category === 'Status') {\r\n\t\t\t\t\tthis.battle.add('-fail', source);\r\n\t\t\t\t\tthis.battle.attrLastMove('[still]');\r\n\t\t\t\t\tdamage[i] = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn damage;\r\n\t}\r\n\tmoveHit(\r\n\t\ttargets: Pokemon | null | (Pokemon | null)[], pokemon: Pokemon, moveOrMoveName: ActiveMove,\r\n\t\tmoveData?: Dex.HitEffect, isSecondary?: boolean, isSelf?: boolean\r\n\t): number | undefined | false {\r\n\t\tif (!Array.isArray(targets)) targets = [targets];\r\n\t\tconst retVal = this.spreadMoveHit(targets, pokemon, moveOrMoveName, moveData, isSecondary, isSelf)[0][0];\r\n\t\treturn retVal === true ? undefined : retVal;\r\n\t}\r\n\r\n\tcalcRecoilDamage(damageDealt: number, move: Move, pokemon: Pokemon): number {\r\n\t\tif (move.id === 'chloroblast') return Math.round(pokemon.maxhp / 2);\r\n\t\treturn this.battle.clampIntRange(Math.round(damageDealt * move.recoil![0] / move.recoil![1]), 1);\r\n\t}\r\n\r\n\tgetZMove(move: Move, pokemon: Pokemon, skipChecks?: boolean): string | undefined {\r\n\t\tconst item = pokemon.getItem();\r\n\t\tif (!skipChecks) {\r\n\t\t\tif (pokemon.side.zMoveUsed) return;\r\n\t\t\tif (!item.zMove) return;\r\n\t\t\tif (item.itemUser && !item.itemUser.includes(pokemon.species.name)) return;\r\n\t\t\tconst moveData = pokemon.getMoveData(move);\r\n\t\t\t// Draining the PP of the base move prevents the corresponding Z-move from being used.\r\n\t\t\tif (!moveData?.pp) return;\r\n\t\t}\r\n\r\n\t\tif (item.zMoveFrom) {\r\n\t\t\tif (move.name === item.zMoveFrom) return item.zMove as string;\r\n\t\t} else if (item.zMove === true) {\r\n\t\t\tif (move.type === item.zMoveType) {\r\n\t\t\t\tif (move.category === \"Status\") {\r\n\t\t\t\t\treturn move.name;\r\n\t\t\t\t} else if (move.zMove?.basePower) {\r\n\t\t\t\t\treturn this.Z_MOVES[move.type];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tgetActiveZMove(move: Move, pokemon: Pokemon): ActiveMove {\r\n\t\tif (pokemon) {\r\n\t\t\tconst item = pokemon.getItem();\r\n\t\t\tif (move.name === item.zMoveFrom) {\r\n\t\t\t\tconst zMove = this.dex.getActiveMove(item.zMove as string);\r\n\t\t\t\tzMove.isZOrMaxPowered = true;\r\n\t\t\t\treturn zMove;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (move.category === 'Status') {\r\n\t\t\tconst zMove = this.dex.getActiveMove(move);\r\n\t\t\tzMove.isZ = true;\r\n\t\t\tzMove.isZOrMaxPowered = true;\r\n\t\t\treturn zMove;\r\n\t\t}\r\n\t\tconst zMove = this.dex.getActiveMove(this.Z_MOVES[move.type]);\r\n\t\tzMove.basePower = move.zMove!.basePower!;\r\n\t\tzMove.category = move.category;\r\n\t\t// copy the priority for Quick Guard\r\n\t\tzMove.priority = move.priority;\r\n\t\tzMove.isZOrMaxPowered = true;\r\n\t\treturn zMove;\r\n\t}\r\n\r\n\tcanZMove(pokemon: Pokemon) {\r\n\t\tif (pokemon.side.zMoveUsed ||\r\n\t\t\t(pokemon.transformed &&\r\n\t\t\t\t(pokemon.species.isMega || pokemon.species.isPrimal || pokemon.species.forme === \"Ultra\"))\r\n\t\t) return;\r\n\t\tconst item = pokemon.getItem();\r\n\t\tif (!item.zMove) return;\r\n\t\tif (item.itemUser && !item.itemUser.includes(pokemon.species.name)) return;\r\n\t\tlet atLeastOne = false;\r\n\t\tlet mustStruggle = true;\r\n\t\tconst zMoves: ZMoveOptions = [];\r\n\t\tfor (const moveSlot of pokemon.moveSlots) {\r\n\t\t\tif (moveSlot.pp <= 0) {\r\n\t\t\t\tzMoves.push(null);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tif (!moveSlot.disabled) {\r\n\t\t\t\tmustStruggle = false;\r\n\t\t\t}\r\n\t\t\tconst move = this.dex.moves.get(moveSlot.move);\r\n\t\t\tlet zMoveName = this.getZMove(move, pokemon, true) || '';\r\n\t\t\tif (zMoveName) {\r\n\t\t\t\tconst zMove = this.dex.moves.get(zMoveName);\r\n\t\t\t\tif (!zMove.isZ && zMove.category === 'Status') zMoveName = \"Z-\" + zMoveName;\r\n\t\t\t\tzMoves.push({move: zMoveName, target: zMove.target});\r\n\t\t\t} else {\r\n\t\t\t\tzMoves.push(null);\r\n\t\t\t}\r\n\t\t\tif (zMoveName) atLeastOne = true;\r\n\t\t}\r\n\t\tif (atLeastOne && !mustStruggle) return zMoves;\r\n\t}\r\n\r\n\tgetMaxMove(move: Move, pokemon: Pokemon) {\r\n\t\tif (typeof move === 'string') move = this.dex.moves.get(move);\r\n\t\tif (move.name === 'Struggle') return move;\r\n\t\tif (pokemon.gigantamax && pokemon.canGigantamax && move.category !== 'Status') {\r\n\t\t\tconst gMaxMove = this.dex.moves.get(pokemon.canGigantamax);\r\n\t\t\tif (gMaxMove.exists && gMaxMove.type === move.type) return gMaxMove;\r\n\t\t}\r\n\t\tconst maxMove = this.dex.moves.get(this.MAX_MOVES[move.category === 'Status' ? move.category : move.type]);\r\n\t\tif (maxMove.exists) return maxMove;\r\n\t}\r\n\r\n\tgetActiveMaxMove(move: Move, pokemon: Pokemon) {\r\n\t\tif (typeof move === 'string') move = this.dex.getActiveMove(move);\r\n\t\tif (move.name === 'Struggle') return this.dex.getActiveMove(move);\r\n\t\tlet maxMove = this.dex.getActiveMove(this.MAX_MOVES[move.category === 'Status' ? move.category : move.type]);\r\n\t\tif (move.category !== 'Status') {\r\n\t\t\tif (pokemon.gigantamax && pokemon.canGigantamax) {\r\n\t\t\t\tconst gMaxMove = this.dex.getActiveMove(pokemon.canGigantamax);\r\n\t\t\t\tif (gMaxMove.exists && gMaxMove.type === move.type) maxMove = gMaxMove;\r\n\t\t\t}\r\n\t\t\tif (!move.maxMove?.basePower) throw new Error(`${move.name} doesn't have a maxMove basePower`);\r\n\t\t\tif (!['gmaxdrumsolo', 'gmaxfireball', 'gmaxhydrosnipe'].includes(maxMove.id)) {\r\n\t\t\t\tmaxMove.basePower = move.maxMove.basePower;\r\n\t\t\t}\r\n\t\t\tmaxMove.category = move.category;\r\n\t\t}\r\n\t\tmaxMove.baseMove = move.id;\r\n\t\t// copy the priority for Psychic Terrain, Quick Guard\r\n\t\tmaxMove.priority = move.priority;\r\n\t\tmaxMove.isZOrMaxPowered = true;\r\n\t\treturn maxMove;\r\n\t}\r\n\r\n\trunZPower(move: ActiveMove, pokemon: Pokemon) {\r\n\t\tconst zPower = this.dex.conditions.get('zpower');\r\n\t\tif (move.category !== 'Status') {\r\n\t\t\tthis.battle.attrLastMove('[zeffect]');\r\n\t\t} else if (move.zMove?.boost) {\r\n\t\t\tthis.battle.boost(move.zMove.boost, pokemon, pokemon, zPower);\r\n\t\t} else if (move.zMove?.effect) {\r\n\t\t\tswitch (move.zMove.effect) {\r\n\t\t\tcase 'heal':\r\n\t\t\t\tthis.battle.heal(pokemon.maxhp, pokemon, pokemon, zPower);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'healreplacement':\r\n\t\t\t\tpokemon.side.addSlotCondition(pokemon, 'healreplacement', pokemon, move);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'clearnegativeboost':\r\n\t\t\t\tconst boosts: SparseBoostsTable = {};\r\n\t\t\t\tlet i: BoostID;\r\n\t\t\t\tfor (i in pokemon.boosts) {\r\n\t\t\t\t\tif (pokemon.boosts[i] < 0) {\r\n\t\t\t\t\t\tboosts[i] = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tpokemon.setBoost(boosts);\r\n\t\t\t\tthis.battle.add('-clearnegativeboost', pokemon, '[zeffect]');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'redirect':\r\n\t\t\t\tpokemon.addVolatile('followme', pokemon, zPower);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'crit2':\r\n\t\t\t\tpokemon.addVolatile('focusenergy', pokemon, zPower);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'curse':\r\n\t\t\t\tif (pokemon.hasType('Ghost')) {\r\n\t\t\t\t\tthis.battle.heal(pokemon.maxhp, pokemon, pokemon, zPower);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.battle.boost({atk: 1}, pokemon, pokemon, zPower);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\ttargetTypeChoices(targetType: string) {\r\n\t\treturn CHOOSABLE_TARGETS.has(targetType);\r\n\t}\r\n\r\n\tcombineResults<T extends number | boolean | null | '' | undefined,\r\n\t\tU extends number | boolean | null | '' | undefined>(\r\n\t\tleft: T, right: U\r\n\t): T | U {\r\n\t\tconst NOT_FAILURE = 'string';\r\n\t\tconst NULL = 'object';\r\n\t\tconst resultsPriorities = ['undefined', NOT_FAILURE, NULL, 'boolean', 'number'];\r\n\t\tif (resultsPriorities.indexOf(typeof left) > resultsPriorities.indexOf(typeof right)) {\r\n\t\t\treturn left;\r\n\t\t} else if (left && !right && right !== 0) {\r\n\t\t\treturn left;\r\n\t\t} else if (typeof left === 'number' && typeof right === 'number') {\r\n\t\t\treturn (left + right) as T;\r\n\t\t} else {\r\n\t\t\treturn right;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 0 is a success dealing 0 damage, such as from False Swipe at 1 HP.\r\n\t *\r\n\t * Normal PS return value rules apply:\r\n\t * undefined = success, null = silent failure, false = loud failure\r\n\t */\r\n\t getDamage(\r\n\t\tsource: Pokemon, target: Pokemon, move: string | number | ActiveMove,\r\n\t\tsuppressMessages = false\r\n\t): number | undefined | null | false {\r\n\t\tif (typeof move === 'string') move = this.dex.getActiveMove(move);\r\n\r\n\t\tif (typeof move === 'number') {\r\n\t\t\tconst basePower = move;\r\n\t\t\tmove = new Dex.Move({\r\n\t\t\t\tbasePower,\r\n\t\t\t\ttype: '???',\r\n\t\t\t\tcategory: 'Physical',\r\n\t\t\t\twillCrit: false,\r\n\t\t\t}) as ActiveMove;\r\n\t\t\tmove.hit = 0;\r\n\t\t}\r\n\r\n\t\tif (!move.ignoreImmunity || (move.ignoreImmunity !== true && !move.ignoreImmunity[move.type])) {\r\n\t\t\tif (!target.runImmunity(move.type, !suppressMessages)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (move.ohko) return target.maxhp;\r\n\t\tif (move.damageCallback) return move.damageCallback.call(this.battle, source, target);\r\n\t\tif (move.damage === 'level') {\r\n\t\t\treturn source.level;\r\n\t\t} else if (move.damage) {\r\n\t\t\treturn move.damage;\r\n\t\t}\r\n\r\n\t\tconst category = this.battle.getCategory(move);\r\n\r\n\t\tlet basePower: number | false | null = move.basePower;\r\n\t\tif (move.basePowerCallback) {\r\n\t\t\tbasePower = move.basePowerCallback.call(this.battle, source, target, move);\r\n\t\t}\r\n\t\tif (!basePower) return basePower === 0 ? undefined : basePower;\r\n\t\tbasePower = this.battle.clampIntRange(basePower, 1);\r\n\r\n\t\tlet critMult;\r\n\t\tlet critRatio = this.battle.runEvent('ModifyCritRatio', source, target, move, move.critRatio || 0);\r\n\t\tif (this.battle.gen <= 5) {\r\n\t\t\tcritRatio = this.battle.clampIntRange(critRatio, 0, 5);\r\n\t\t\tcritMult = [0, 16, 8, 4, 3, 2];\r\n\t\t} else {\r\n\t\t\tcritRatio = this.battle.clampIntRange(critRatio, 0, 4);\r\n\t\t\tif (this.battle.gen === 6) {\r\n\t\t\t\tcritMult = [0, 16, 8, 2, 1];\r\n\t\t\t} else {\r\n\t\t\t\tcritMult = [0, 24, 8, 2, 1];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst moveHit = target.getMoveHitData(move);\r\n\t\tmoveHit.crit = move.willCrit || false;\r\n\t\tif (move.willCrit === undefined) {\r\n\t\t\tif (critRatio) {\r\n\t\t\t\tmoveHit.crit = this.battle.randomChance(1, critMult[critRatio]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (moveHit.crit) {\r\n\t\t\tmoveHit.crit = this.battle.runEvent('CriticalHit', target, null, move);\r\n\t\t}\r\n\r\n\t\t// happens after crit calculation\r\n\t\tbasePower = this.battle.runEvent('BasePower', source, target, move, basePower, true);\r\n\r\n\t\tif (!basePower) return 0;\r\n\t\tbasePower = this.battle.clampIntRange(basePower, 1);\r\n\t\t// Hacked Max Moves have 0 base power, even if you Dynamax\r\n\t\tif ((!source.volatiles['dynamax'] && move.isMax) || (move.isMax && this.dex.moves.get(move.baseMove).isMax)) {\r\n\t\t\tbasePower = 0;\r\n\t\t}\r\n\r\n\t\tif (\r\n\t\t\tbasePower < 60 && source.getTypes(true).includes(move.type) && source.terastallized && move.priority <= 0 &&\r\n\t\t\t// Hard move.basePower check for moves like Dragon Energy that have variable BP\r\n\t\t\t!move.multihit && !((move.basePower === 0 || move.basePower === 150) && move.basePowerCallback)\r\n\t\t) {\r\n\t\t\tbasePower = 60;\r\n\t\t}\r\n\r\n\t\tconst level = source.level;\r\n\r\n\t\tconst attacker = move.overrideOffensivePokemon === 'target' ? target : source;\r\n\t\tconst defender = move.overrideDefensivePokemon === 'source' ? source : target;\r\n\r\n\t\tconst isPhysical = move.category === 'Physical';\r\n\t\tlet attackStat: StatIDExceptHP = move.overrideOffensiveStat || (isPhysical ? 'atk' : 'spa');\r\n\t\tconst defenseStat: StatIDExceptHP = move.overrideDefensiveStat || (isPhysical ? 'def' : 'spd');\r\n\r\n\t\tconst statTable = {atk: 'Atk', def: 'Def', spa: 'SpA', spd: 'SpD', spe: 'Spe'};\r\n\r\n\t\tlet atkBoosts = attacker.boosts[attackStat];\r\n\t\tlet defBoosts = defender.boosts[defenseStat];\r\n\r\n\t\tlet ignoreNegativeOffensive = !!move.ignoreNegativeOffensive;\r\n\t\tlet ignorePositiveDefensive = !!move.ignorePositiveDefensive;\r\n\r\n\t\tif (moveHit.crit) {\r\n\t\t\tignoreNegativeOffensive = true;\r\n\t\t\tignorePositiveDefensive = true;\r\n\t\t}\r\n\t\tconst ignoreOffensive = !!(move.ignoreOffensive || (ignoreNegativeOffensive && atkBoosts < 0));\r\n\t\tconst ignoreDefensive = !!(move.ignoreDefensive || (ignorePositiveDefensive && defBoosts > 0));\r\n\r\n\t\tif (ignoreOffensive) {\r\n\t\t\tthis.battle.debug('Negating (sp)atk boost/penalty.');\r\n\t\t\tatkBoosts = 0;\r\n\t\t}\r\n\t\tif (ignoreDefensive) {\r\n\t\t\tthis.battle.debug('Negating (sp)def boost/penalty.');\r\n\t\t\tdefBoosts = 0;\r\n\t\t}\r\n\r\n\t\tlet attack = attacker.calculateStat(attackStat, atkBoosts, 1, source);\r\n\t\tlet defense = defender.calculateStat(defenseStat, defBoosts, 1, target);\r\n\r\n\t\tattackStat = (category === 'Physical' ? 'atk' : 'spa');\r\n\r\n\t\t// Apply Stat Modifiers\r\n\t\tattack = this.battle.runEvent('Modify' + statTable[attackStat], source, target, move, attack);\r\n\t\tdefense = this.battle.runEvent('Modify' + statTable[defenseStat], target, source, move, defense);\r\n\r\n\t\tif (this.battle.gen <= 4 && ['explosion', 'selfdestruct'].includes(move.id) && defenseStat === 'def') {\r\n\t\t\tdefense = this.battle.clampIntRange(Math.floor(defense / 2), 1);\r\n\t\t}\r\n\r\n\t\tconst tr = this.battle.trunc;\r\n\r\n\t\t// int(int(int(2 * L / 5 + 2) * A * P / D) / 50);\r\n\t\tconst baseDamage = tr(tr(tr(tr(2 * level / 5 + 2) * basePower * attack) / defense) / 50);\r\n\r\n\t\t// Calculate damage modifiers separately (order differs between generations)\r\n\t\treturn this.modifyDamage(baseDamage, source, target, move, suppressMessages);\r\n\t}\r\n\r\n\tmodifyDamage(\r\n\t\tbaseDamage: number, pokemon: Pokemon, target: Pokemon, move: ActiveMove, suppressMessages = false\r\n\t) {\r\n\t\tconst tr = this.battle.trunc;\r\n\t\tif (!move.type) move.type = '???';\r\n\t\tconst type = move.type;\r\n\r\n\t\tbaseDamage += 2;\r\n\r\n\t\tif (move.spreadHit) {\r\n\t\t\t// multi-target modifier (doubles only)\r\n\t\t\tconst spreadModifier = move.spreadModifier || (this.battle.gameType === 'freeforall' ? 0.5 : 0.75);\r\n\t\t\tthis.battle.debug('Spread modifier: ' + spreadModifier);\r\n\t\t\tbaseDamage = this.battle.modify(baseDamage, spreadModifier);\r\n\t\t} else if (move.multihitType === 'parentalbond' && move.hit > 1) {\r\n\t\t\t// Parental Bond modifier\r\n\t\t\tconst bondModifier = this.battle.gen > 6 ? 0.25 : 0.5;\r\n\t\t\tthis.battle.debug(`Parental Bond modifier: ${bondModifier}`);\r\n\t\t\tbaseDamage = this.battle.modify(baseDamage, bondModifier);\r\n\t\t}\r\n\r\n\t\t// weather modifier\r\n\t\tbaseDamage = this.battle.runEvent('WeatherModifyDamage', pokemon, target, move, baseDamage);\r\n\r\n\t\t// crit - not a modifier\r\n\t\tconst isCrit = target.getMoveHitData(move).crit;\r\n\t\tif (isCrit) {\r\n\t\t\tbaseDamage = tr(baseDamage * (move.critModifier || (this.battle.gen >= 6 ? 1.5 : 2)));\r\n\t\t}\r\n\r\n\t\t// random factor - also not a modifier\r\n\t\tbaseDamage = this.battle.randomizer(baseDamage);\r\n\r\n\t\t// STAB\r\n\t\t// The \"???\" type never gets STAB\r\n\t\t// Not even if you Roost in Gen 4 and somehow manage to use\r\n\t\t// Struggle in the same turn.\r\n\t\t// (On second thought, it might be easier to get a MissingNo.)\r\n\t\tif (type !== '???') {\r\n\t\t\tlet stab: number | [number, number] = 1;\r\n\r\n\t\t\tconst isSTAB = move.forceSTAB || pokemon.hasType(type) || pokemon.getTypes(false, true).includes(type);\r\n\t\t\tif (isSTAB) {\r\n\t\t\t\tstab = 1.5;\r\n\t\t\t}\r\n\r\n\t\t\t// The Stellar tera type makes this incredibly confusing\r\n\t\t\t// If the move's type does not match one of the user's base types,\r\n\t\t\t// the Stellar tera type applies a one-time 1.2x damage boost for that type.\r\n\t\t\t//\r\n\t\t\t// If the move's type does match one of the user's base types,\r\n\t\t\t// then the Stellar tera type applies a one-time 2x STAB boost for that type,\r\n\t\t\t// and then goes back to using the regular 1.5x STAB boost for those types.\r\n\t\t\tif (pokemon.terastallized === 'Stellar') {\r\n\t\t\t\tif (!pokemon.stellarBoostedTypes.includes(type) || move.stellarBoosted) {\r\n\t\t\t\t\tstab = isSTAB ? 2 : [4915, 4096];\r\n\t\t\t\t\tmove.stellarBoosted = true;\r\n\t\t\t\t\tif (pokemon.species.name !== 'Terapagos-Stellar') {\r\n\t\t\t\t\t\tpokemon.stellarBoostedTypes.push(type);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (pokemon.terastallized === type && pokemon.getTypes(false, true).includes(type)) {\r\n\t\t\t\t\tstab = 2;\r\n\t\t\t\t}\r\n\t\t\t\tstab = this.battle.runEvent('ModifySTAB', pokemon, target, move, stab);\r\n\t\t\t}\r\n\r\n\t\t\tbaseDamage = this.battle.modify(baseDamage, stab);\r\n\t\t}\r\n\r\n\t\t// types\r\n\t\tlet typeMod = target.runEffectiveness(move);\r\n\t\ttypeMod = this.battle.clampIntRange(typeMod, -6, 6);\r\n\t\ttarget.getMoveHitData(move).typeMod = typeMod;\r\n\t\tif (typeMod > 0) {\r\n\t\t\tif (!suppressMessages) this.battle.add('-supereffective', target);\r\n\r\n\t\t\tfor (let i = 0; i < typeMod; i++) {\r\n\t\t\t\tbaseDamage *= 2;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (typeMod < 0) {\r\n\t\t\tif (!suppressMessages) this.battle.add('-resisted', target);\r\n\r\n\t\t\tfor (let i = 0; i > typeMod; i--) {\r\n\t\t\t\tbaseDamage = tr(baseDamage / 2);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (isCrit && !suppressMessages) this.battle.add('-crit', target);\r\n\r\n\t\tif (pokemon.status === 'brn' && move.category === 'Physical' && !pokemon.hasAbility('guts')) {\r\n\t\t\tif (this.battle.gen < 6 || move.id !== 'facade') {\r\n\t\t\t\tbaseDamage = this.battle.modify(baseDamage, 0.5);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Generation 5, but nothing later, sets damage to 1 before the final damage modifiers\r\n\t\tif (this.battle.gen === 5 && !baseDamage) baseDamage = 1;\r\n\r\n\t\t// Final modifier. Modifiers that modify damage after min damage check, such as Life Orb.\r\n\t\tbaseDamage = this.battle.runEvent('ModifyDamage', pokemon, target, move, baseDamage);\r\n\r\n\t\tif (move.isZOrMaxPowered && target.getMoveHitData(move).zBrokeProtect) {\r\n\t\t\tbaseDamage = this.battle.modify(baseDamage, 0.25);\r\n\t\t\tthis.battle.add('-zbroken', target);\r\n\t\t}\r\n\r\n\t\t// Generation 6-7 moves the check for minimum 1 damage after the final modifier...\r\n\t\tif (this.battle.gen !== 5 && !baseDamage) return 1;\r\n\r\n\t\t// ...but 16-bit truncation happens even later, and can truncate to 0\r\n\t\treturn tr(baseDamage, 16);\r\n\t}\r\n\r\n\t/**\r\n\t * Confusion damage is unique - most typical modifiers that get run when calculating\r\n\t * damage (e.g. Huge Power, Life Orb, critical hits) don't apply. It also uses a 16-bit\r\n\t * context for its damage, unlike the regular damage formula (though this only comes up\r\n\t * for base damage).\r\n\t */\r\n\tgetConfusionDamage(pokemon: Pokemon, basePower: number) {\r\n\t\tconst tr = this.battle.trunc;\r\n\r\n\t\tconst attack = pokemon.calculateStat('atk', pokemon.boosts['atk']);\r\n\t\tconst defense = pokemon.calculateStat('def', pokemon.boosts['def']);\r\n\t\tconst level = pokemon.level;\r\n\t\tconst baseDamage = tr(tr(tr(tr(2 * level / 5 + 2) * basePower * attack) / defense) / 50) + 2;\r\n\r\n\t\t// Damage is 16-bit context in self-hit confusion damage\r\n\t\tlet damage = tr(baseDamage, 16);\r\n\t\tdamage = this.battle.randomizer(damage);\r\n\t\treturn Math.max(1, damage);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region MEGA EVOLUTION\r\n\t// ==================================================================\r\n\r\n\tcanMegaEvo(pokemon: Pokemon) {\r\n\t\tconst species = pokemon.baseSpecies;\r\n\t\tconst item = pokemon.getItem();\r\n\t\t// COBBLED ========\r\n\t\tconst megaKey = species.otherFormes?.find(form => /.*-Mega(-[a-zA-Z])?/.test(form));\r\n\t\tconst megaForme = megaKey && this.dex.species.get(megaKey);\r\n\t\t// Mega Rayquaza\r\n\t\tif ((this.battle.gen <= 7 || this.battle.ruleTable.has('+pokemontag:past')) && megaForme?.requiredMove &&\r\n\t\t\tpokemon.baseMoves.includes(toID(megaForme.requiredMove)) && !item.zMove) {\r\n\t\t\treturn megaForme.name;\r\n\t\t}\r\n\t\t// ==================================\r\n\t\t// a hacked-in Megazard X can mega evolve into Megazard Y, but not into Megazard X\r\n\t\tif (item.megaEvolves === species.baseSpecies && item.megaStone !== species.name) {\r\n\t\t\treturn item.megaStone;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tcanUltraBurst(pokemon: Pokemon) {\r\n\t\tif (['Necrozma-Dawn-Wings', 'Necrozma-Dusk-Mane'].includes(pokemon.baseSpecies.name) &&\r\n\t\t\tpokemon.getItem().id === 'ultranecroziumz') {\r\n\t\t\treturn \"Necrozma-Ultra\";\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\trunMegaEvo(pokemon: Pokemon) {\r\n\t\tconst speciesid = pokemon.canMegaEvo || pokemon.canUltraBurst;\r\n\t\tif (!speciesid) return false;\r\n\r\n\t\tpokemon.formeChange(speciesid, pokemon.getItem(), true);\r\n\r\n\t\t// Limit one mega evolution\r\n\t\tconst wasMega = pokemon.canMegaEvo;\r\n\t\tfor (const ally of pokemon.side.pokemon) {\r\n\t\t\tif (wasMega) {\r\n\t\t\t\tally.canMegaEvo = null;\r\n\t\t\t} else {\r\n\t\t\t\tally.canUltraBurst = null;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.battle.runEvent('AfterMega', pokemon);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tcanTerastallize(pokemon: Pokemon) {\r\n\t\tif (pokemon.getItem().zMove || pokemon.canMegaEvo || this.dex.gen !== 9) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn pokemon.teraType;\r\n\t}\r\n\r\n\tterastallize(pokemon: Pokemon) {\r\n\t\tif (pokemon.illusion && ['Ogerpon', 'Terapagos'].includes(pokemon.illusion.species.baseSpecies)) {\r\n\t\t\tthis.battle.singleEvent('End', this.dex.abilities.get('Illusion'), pokemon.abilityState, pokemon);\r\n\t\t}\r\n\r\n\t\tconst type = pokemon.teraType;\r\n\t\tthis.battle.add('-terastallize', pokemon, type);\r\n\t\tpokemon.terastallized = type;\r\n\t\tfor (const ally of pokemon.side.pokemon) {\r\n\t\t\tally.canTerastallize = null;\r\n\t\t}\r\n\t\tpokemon.addedType = '';\r\n\t\tpokemon.knownType = true;\r\n\t\tpokemon.apparentType = type;\r\n\t\tif (pokemon.species.baseSpecies === 'Ogerpon') {\r\n\t\t\tconst tera = pokemon.species.id === 'ogerpon' ? 'tealtera' : 'tera';\r\n\t\t\tpokemon.formeChange(pokemon.species.id + tera, null, true);\r\n\t\t}\r\n\t\tif (pokemon.species.name === 'Terapagos-Terastal' && type === 'Stellar') {\r\n\t\t\tpokemon.formeChange('Terapagos-Stellar', null, true);\r\n\t\t\tpokemon.baseMaxhp = Math.floor(Math.floor(\r\n\t\t\t\t2 * pokemon.species.baseStats['hp'] + pokemon.set.ivs['hp'] + Math.floor(pokemon.set.evs['hp'] / 4) + 100\r\n\t\t\t) * pokemon.level / 100 + 10);\r\n\t\t\tconst newMaxHP = pokemon.baseMaxhp;\r\n\t\t\tpokemon.hp = newMaxHP - (pokemon.maxhp - pokemon.hp);\r\n\t\t\tpokemon.maxhp = newMaxHP;\r\n\t\t\tthis.battle.add('-heal', pokemon, pokemon.getHealth, '[silent]');\r\n\t\t}\r\n\t\tthis.battle.runEvent('AfterTerastallization', pokemon);\r\n\t}\r\n\r\n\t// #endregion\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAwB;AAExB,MAAM,oBAAoB,oBAAI,IAAI,CAAC,UAAU,OAAO,gBAAgB,sBAAsB,aAAa,CAAC;AAEjG,MAAM,cAAc;AAAA,EA+C1B,YAAY,QAAgB;AA3C5B,SAAS,YAA4C;AAAA,MACpD,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,MAAM;AAAA,MACN,KAAK;AAAA,MACL,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,UAAU;AAAA,MACV,UAAU;AAAA,MACV,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,OAAO;AAAA,MACP,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,QAAQ;AAAA,IACT;AAEA,SAAS,UAA0C;AAAA,MAClD,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,MAAM;AAAA,MACN,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,OAAO;AAAA,MACP,MAAM;AAAA,MACN,OAAO;AAAA,MACP,KAAK;AAAA,MACL,SAAS;AAAA,MACT,KAAK;AAAA,MACL,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,OAAO;AAAA,IACR;AAGC,SAAK,SAAS;AACd,SAAK,MAAM,OAAO;AAClB,QAAI,KAAK,IAAI,KAAK,QAAQ;AAAS,aAAO,OAAO,MAAM,KAAK,IAAI,KAAK,QAAQ,OAAO;AACpF,QAAI,OAAO,OAAO;AAAS,aAAO,OAAO,MAAM,OAAO,OAAO,OAAO;AAAA,EACrE;AAAA;AAAA;AAAA,EAKA,SAAS,SAAkB,KAAa,eAA8B,MAAM,QAAkB;AAC7F,QAAI,CAAC,WAAW,QAAQ,UAAU;AACjC,WAAK,OAAO,KAAK,2EAAwE;AACzF,aAAO;AAAA,IACR;AAEA,UAAM,OAAO,QAAQ;AACrB,QAAI,OAAO,KAAK,OAAO,QAAQ;AAC9B,YAAM,IAAI,MAAM,2BAA2B,SAAS,KAAK,OAAO,QAAQ;AAAA,IACzE;AACA,UAAM,YAAY,KAAK,OAAO,GAAG;AACjC,UAAM,kBAAkB,WAAW,KAAK,YAAY;AACpD,QAAI,iBAAiB;AACpB,gBAAU,kBAAkB;AAC5B,UAAI,iBAAwD;AAC5D,UAAI,gBAAgB,OAAQ,aAAsB,eAAe,UAAU;AAC1E,yBAAkB,aAAsB;AAAA,MACzC;AACA,UAAI,CAAC,UAAU,gCAAgC,CAAC,QAAQ;AACvD,aAAK,OAAO,SAAS,mBAAmB,SAAS;AACjD,YAAI,KAAK,OAAO,OAAO,GAAG;AACzB,eAAK,OAAO,UAAU,QAAQ;AAAA,QAC/B;AAAA,MACD;AACA,gBAAU,+BAA+B;AACzC,UAAI,CAAC,KAAK,OAAO,SAAS,aAAa,SAAS,GAAG;AAOlD,eAAO;AAAA,MACR;AACA,UAAI,CAAC,UAAU,IAAI;AAElB,eAAO;AAAA,MACR;AAIA,gBAAU,WAAW;AACrB,WAAK,OAAO,YAAY,OAAO,UAAU,WAAW,GAAG,UAAU,cAAc,SAAS;AAGxF,WAAK,OAAO,MAAM,aAAa,SAAS;AAExC,UAAI,UAAU;AACd,UAAI,KAAK,OAAO,QAAQ,KAAK,cAAc;AAC1C,kBAAU,UAAU;AAAA,MACrB;AACA,UAAI,gBAAgB;AACnB,gBAAQ,iBAAiB,WAAW,cAAc;AAAA,MACnD;AACA,UAAI;AAAS,gBAAQ,WAAW;AAChC,gBAAU,cAAc;AAAA,IACzB;AACA,QAAI,WAAW;AACd,gBAAU,WAAW;AACrB,gBAAU,YAAY;AACtB,gBAAU,mBAAmB;AAC7B,gBAAU,sBAAsB;AAChC,gBAAU,uBAAuB;AACjC,gBAAU,WAAW,QAAQ;AAC7B,cAAQ,WAAW;AACnB,WAAK,QAAQ,QAAQ,QAAQ,IAAI;AACjC,WAAK,QAAQ,UAAU,QAAQ,IAAI;AAAA,IACpC;AACA,YAAQ,WAAW;AACnB,SAAK,OAAO,GAAG,IAAI;AACnB,YAAQ,cAAc;AACtB,YAAQ,oBAAoB;AAC5B,eAAW,YAAY,QAAQ,WAAW;AACzC,eAAS,OAAO;AAAA,IACjB;AACA,SAAK,OAAO,SAAS,kBAAkB,OAAO;AAE9C,QAAI,YAAY,CAAC,eAAe,UAAW,iBAAkB,MAAM,QAAQ,WAAW,QAAS,QAAQ,aAAc,IAAI;AACzH,SAAK,OAAO,IAAI,SAAS,SAAS,UAAU,SAAS,QAAQ,YAAY,GAAI,UAAU,OAAO,OAAO,CAAE;AAEvG,YAAQ,eAAe,KAAK,OAAO;AACnC,QAAI,UAAU,KAAK,OAAO,QAAQ;AAAG,cAAQ,YAAY,KAAK,OAAO;AACrE,YAAQ;AAER,QAAI,UAAU,KAAK,OAAO,OAAO,GAAG;AAEnC,WAAK,OAAO,YAAY,YAAY,QAAQ,WAAW,GAAG,QAAQ,cAAc,OAAO;AACvF,WAAK,UAAU,OAAO;AAAA,IACvB,OAAO;AACN,WAAK,OAAO,MAAM,aAAa,EAAC,QAAQ,cAAc,QAAO,CAAC;AAC9D,WAAK,OAAO,MAAM,aAAa,EAAC,QAAQ,aAAa,QAAO,CAAC;AAAA,IAC9D;AAEA,WAAO;AAAA,EACR;AAAA,EACA,OAAO,MAAY,KAAa;AAC/B,UAAM,UAAU,KAAK,OAAO,oBAAoB,IAAI;AACpD,QAAI,CAAC,WAAW,QAAQ;AAAU,aAAO;AACzC,UAAM,YAAY,KAAK,OAAO,GAAG;AACjC,QAAI,CAAC;AAAW,YAAM,IAAI,MAAM,qBAAqB;AACrD,QAAI,CAAC,UAAU;AAAI,aAAO;AAE1B,QAAI,CAAC,KAAK,OAAO,SAAS,WAAW,SAAS,GAAG;AAChD,aAAO;AAAA,IACR;AACA,QAAI,CAAC,KAAK,SAAS,SAAS,KAAK,MAAM,IAAI;AAAG,aAAO;AACrD,WAAO;AAAA,EACR;AAAA,EACA,UAAU,SAAkB;AAC3B,SAAK,OAAO,SAAS,QAAQ,OAAO;AAEpC,QAAI,KAAK,OAAO,OAAO,GAAG;AACzB,WAAK,OAAO,SAAS,YAAY,OAAO;AAAA,IACzC;AAEA,SAAK,OAAO,SAAS,eAAe,OAAO;AAE3C,QAAI,KAAK,OAAO,OAAO,GAAG;AACzB,WAAK,OAAO,SAAS,YAAY,OAAO;AAAA,IACzC;AAEA,QAAI,KAAK,OAAO,OAAO,GAAG;AAEzB,iBAAW,QAAQ,KAAK,OAAO,aAAa;AAAG,aAAK,WAAW;AAC/D,UAAI,CAAC,QAAQ,KAAK,mBAAmB,QAAQ,cAAc,KAAK,OAAO,MAAM;AAC5E,aAAK,OAAO,SAAS,qBAAqB,OAAO;AAAA,MAClD;AAAA,IACD;AACA,QAAI,CAAC,QAAQ;AAAI,aAAO;AACxB,YAAQ,YAAY;AACpB,QAAI,CAAC,QAAQ,SAAS;AACrB,WAAK,OAAO,YAAY,SAAS,QAAQ,WAAW,GAAG,QAAQ,cAAc,OAAO;AACpF,WAAK,OAAO,YAAY,SAAS,QAAQ,QAAQ,GAAG,QAAQ,WAAW,OAAO;AAAA,IAC/E;AACA,QAAI,KAAK,OAAO,QAAQ,GAAG;AAC1B,iBAAW,aAAa,QAAQ,KAAK,GAAG;AACvC,kBAAU,eAAe,kBAAkB;AAAA,MAC5C;AAAA,IACD;AACA,YAAQ,YAAY;AACpB,WAAO;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,QACC,gBAA+B,SAAkB,WAAmB,cACpE,OAAgB,cAAwB,SAAkB,gBACzD;AACD,YAAQ;AACR,QAAI,SAAS,KAAK,OAAO,UAAU,SAAS,WAAW,SAAS,gBAAgB,WAAW,cAAc;AACzG,QAAI,WAAW,KAAK,IAAI,cAAc,cAAc;AACpD,UAAM,mBAAmB,SAAS;AAClC,QAAI,SAAS,OAAO,cAAc,CAAC,SAAS,CAAC,WAAW,CAAC,cAAc;AACtE,YAAM,cAAc,KAAK,OAAO,SAAS,kBAAkB,SAAS,QAAQ,QAAQ;AACpF,UAAI,eAAe,gBAAgB,MAAM;AACxC,mBAAW,KAAK,IAAI,cAAc,WAAW;AAC7C,YAAI;AAAkB,mBAAS,mBAAmB;AAClD,iBAAS,KAAK,OAAO,gBAAgB,SAAS,QAAQ;AAAA,MACvD;AAAA,IACD;AACA,QAAI,OAAO;AACX,QAAI,OAAO;AACV,aAAO,KAAK,eAAe,UAAU,OAAO;AAAA,IAC7C,WAAW,SAAS;AACnB,aAAO,KAAK,iBAAiB,UAAU,OAAO;AAAA,IAC/C;AAEA,SAAK,aAAa;AAElB,SAAK,OAAO,cAAc,MAAM,SAAS,MAAM;AAU/C,UAAM,cAAc,KAAK,OAAO,SAAS,cAAc,SAAS,QAAQ,IAAI;AAC5E,QAAI,CAAC,aAAa;AACjB,WAAK,OAAO,SAAS,eAAe,SAAS,QAAQ,IAAI;AACzD,WAAK,OAAO,gBAAgB,IAAI;AAIhC,cAAQ,qBAAqB;AAC7B;AAAA,IACD;AAGA,QAAI,KAAK,MAAM,cAAc,KAAK,QAAQ,UAAU,OAAO,KAAK,IAAI;AACnE,cAAQ,YAAY,KAAK,EAAE;AAAA,IAC5B;AAEA,QAAI,KAAK,oBAAoB;AAC5B,UAAI,KAAK,mBAAmB,KAAK,KAAK,QAAQ,SAAS,QAAQ,IAAI,GAAG;AACrE,aAAK,OAAO,gBAAgB,IAAI;AAChC,gBAAQ,qBAAqB;AAC7B;AAAA,MACD;AAAA,IACD;AACA,YAAQ,aAAa;AACrB,QAAI;AACJ,QAAI,CAAC,cAAc;AAClB,mBAAa,KAAK,OAAO,SAAS,YAAY,OAAO;AACrD,UAAI,eAAe;AAAM,qBAAa;AACtC,UAAI,CAAC,YAAY;AAChB,YAAI,CAAC,QAAQ,SAAS,UAAU,MAAM,MAAM,KAAM,KAAK,OAAO,YAAa;AAC1E,eAAK,OAAO,IAAI,QAAQ,SAAS,QAAQ,IAAI;AAC7C,eAAK,OAAO,gBAAgB,IAAI;AAChC,kBAAQ,qBAAqB;AAC7B;AAAA,QACD;AAAA,MACD,OAAO;AACN,uBAAe,KAAK,IAAI,WAAW,IAAI,YAAY;AAAA,MACpD;AACA,cAAQ,SAAS,MAAM,SAAS;AAAA,IACjC;AAIA,UAAM,SAAS,gBAAgB,CAAC,QAAQ,UAAU,YAAY;AAE9D,QAAI,OAAO;AACV,UAAI,QAAQ,UAAU;AACrB,aAAK,OAAO,YAAY,OAAO,KAAK,IAAI,UAAU,IAAI,UAAU,GAAG,QAAQ,cAAc,OAAO;AAAA,MACjG;AACA,WAAK,OAAO,IAAI,WAAW,OAAO;AAClC,cAAQ,KAAK,YAAY;AAAA,IAC1B;AAEA,UAAM,gBAAgB;AAEtB,UAAM,mBAAmB,KAAK,QAAQ,UAAU,SAAS,QAAQ,cAAc,OAAO,OAAO;AAC7F,SAAK,OAAO,6BAA6B,mBAAmB,KAAK,OAAO,cAAc,KAAK,OAAO,WAAW,KAAK;AAClH,QAAI,KAAK,OAAO;AAAY,aAAO,KAAK,OAAO;AAC/C,SAAK,OAAO,YAAY,aAAa,MAAM,MAAM,SAAS,QAAQ,IAAI;AACtE,SAAK,OAAO,SAAS,aAAa,SAAS,QAAQ,IAAI;AACvD,QAAI,KAAK,MAAM,cAAc,KAAK,QAAQ,eAAe,KAAK,EAAE,GAAG;AAClE,WAAK,OAAO,IAAI,SAAS,2CAA2C,KAAK,sBAAsB;AAAA,IAChG;AAGA,QAAI,KAAK,MAAM,OAAO,KAAK,oBAAoB,CAAC,KAAK,YAAY;AAChE,YAAM,UAAU,CAAC;AACjB,iBAAW,eAAe,KAAK,OAAO,aAAa,GAAG;AACrD,YAAI,YAAY;AAAa;AAC7B,YAAI,YAAY,WAAW,QAAQ,KAAK,CAAC,YAAY,mBAAmB,GAAG;AAC1E,kBAAQ,KAAK,WAAW;AAAA,QACzB;AAAA,MACD;AAKA,cAAQ;AAAA,QACP,CAAC,GAAG,MAAM,EAAE,EAAE,YAAY,KAAK,IAAI,EAAE,YAAY,KAAK,MAAM,EAAE,eAAe,EAAE;AAAA,MAChF;AACA,YAAM,mBAAmB,KAAK,OAAO;AACrC,iBAAW,UAAU,SAAS;AAC7B,YAAI,KAAK,OAAO,cAAc;AAAG;AACjC,YAAI,OAAO;AAAS;AACpB,aAAK,OAAO,IAAI,aAAa,QAAQ,iBAAiB;AACtD,cAAM,gBAAgB,CAAC,iBAAiB,OAAO,MAAM,KAAK,QAAQ,OAAO,MAAM,IAC9E,mBACA;AACD,cAAM,mBAAmB,OAAO,SAAS,aAAa;AACtD,aAAK,QAAQ,KAAK,IAAI,QAAQ,kBAAkB,KAAK,IAAI,UAAU,IAAI,QAAQ,GAAG,QAAW,IAAI;AAAA,MAClG;AAAA,IACD;AACA,QAAI,UAAU,QAAQ,UAAU,YAAY;AAAG,aAAO,QAAQ,UAAU,YAAY;AACpF,SAAK,OAAO,cAAc;AAC1B,SAAK,OAAO,SAAS;AAErB,QAAI,KAAK,OAAO,OAAO,GAAG;AAEzB,WAAK,OAAO,aAAa;AAAA,IAC1B;AAAA,EACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,QACC,MAAqB,SAAkB,QACvC,cAA8B,OAAgB,SAC7C;AACD,YAAQ,qBAAqB;AAC7B,UAAM,gBAA4C,QAAQ;AAC1D,UAAM,aAAa,KAAK,aAAa,MAAM,SAAS,QAAQ,cAAc,OAAO,OAAO;AACxF,QAAI,kBAAkB,QAAQ;AAAoB,cAAQ,qBAAqB;AAC/E,WAAO;AAAA,EACR;AAAA,EACA,aACC,gBAA+B,SAAkB,QACjD,cAA8B,OAAgB,SAC7C;AACD,QAAI,CAAC,gBAAgB,KAAK,OAAO,OAAO;AAAI,qBAAe,KAAK,OAAO;AACvE,QAAI,gBAAgB,CAAC,YAAY,aAAa,EAAE,SAAS,aAAa,EAAE;AAAG,qBAAe;AAE1F,QAAI,OAAO,KAAK,IAAI,cAAc,cAAc;AAChD,YAAQ,eAAe;AACvB,QAAI,KAAK,OAAO,iBAAiB,OAAO;AAGvC,WAAK,OAAO,YAAY,cAAc,MAAM,MAAM,SAAS,QAAQ,MAAM,IAAI;AAC7E,UAAI,KAAK,SAAS;AAAU,uBAAe;AAAA,IAC5C;AACA,QAAI,SAAU,KAAK,aAAa,YAAY,gBAAiB,aAA4B,KAAM;AAC9F,aAAO,KAAK,eAAe,MAAM,OAAO;AAAA,IACzC;AACA,QAAI,WAAW,KAAK,aAAa,UAAU;AAE1C,WAAK,OAAO,YAAY,cAAc,MAAM,MAAM,SAAS,QAAQ,MAAM,IAAI;AAC7E,WAAK,OAAO,SAAS,cAAc,SAAS,QAAQ,MAAM,IAAI;AAAA,IAC/D;AACA,QAAI,WAAY,KAAK,aAAa,YAAY,gBAAiB,aAA4B,OAAQ;AAClG,aAAO,KAAK,iBAAiB,MAAM,OAAO;AAAA,IAC3C;AAEA,QAAI,KAAK,OAAO,YAAY;AAC3B,WAAK,WAAW,KAAK,OAAO,WAAW;AACvC,UAAI,CAAC,KAAK;AAAY,aAAK,mBAAmB,KAAK,OAAO,WAAW;AAAA,IACtE;AACA,UAAM,aAAa,KAAK;AACxB,QAAI,iBAAiB,EAAC,OAAM;AAC5B,qBAAiB,KAAK,OAAO,SAAS,gBAAgB,SAAS,QAAQ,MAAM,gBAAgB,IAAI;AACjG,QAAI,eAAe,WAAW;AAAW,eAAS,eAAe;AACjE,QAAI,WAAW;AAAW,eAAS,KAAK,OAAO,gBAAgB,SAAS,IAAI;AAC5E,QAAI,KAAK,WAAW,UAAU,KAAK,WAAW,UAAU;AACvD,eAAS;AAAA,IACV;AACA,QAAI,cAAc;AACjB,WAAK,eAAe,aAAa;AACjC,WAAK,gBAAiB,aAA4B;AAAA,IACnD;AACA,QAAI,aAAa;AAEjB,SAAK,OAAO,cAAc,MAAM,SAAS,MAAM;AAE/C,SAAK,OAAO,YAAY,cAAc,MAAM,MAAM,SAAS,QAAQ,MAAM,IAAI;AAC7E,SAAK,OAAO,YAAY,cAAc,MAAM,MAAM,SAAS,QAAQ,MAAM,IAAI;AAC7E,QAAI,eAAe,KAAK,QAAQ;AAI/B,eAAS,KAAK,OAAO,gBAAgB,SAAS,IAAI;AAAA,IACnD;AACA,WAAO,KAAK,OAAO,SAAS,cAAc,SAAS,QAAQ,MAAM,IAAI;AACrE,WAAO,KAAK,OAAO,SAAS,cAAc,SAAS,QAAQ,MAAM,IAAI;AACrE,QAAI,eAAe,KAAK,QAAQ;AAE/B,eAAS,KAAK,OAAO,gBAAgB,SAAS,IAAI;AAAA,IACnD;AACA,QAAI,CAAC,QAAQ,QAAQ,SAAS;AAC7B,aAAO;AAAA,IACR;AAEA,QAAI,QAAQ;AAEZ,QAAI,WAAW,KAAK;AACpB,QAAI,KAAK,OAAO;AAAe,iBAAW;AAC1C,QAAI;AAAc,eAAS,UAAU,aAAa;AAClD,QAAI,SAAS,KAAK,QAAQ,MAAM;AAC/B,cAAQ,YAAY,WAAW;AAC/B,iBAAW,OAAO;AAAA,IACnB;AACA,SAAK,OAAO,QAAQ,QAAQ,SAAS,UAAU,SAAS,KAAK;AAE7D,QAAI;AAAO,WAAK,UAAU,MAAM,OAAO;AAEvC,QAAI,CAAC,QAAQ;AACZ,WAAK,OAAO,aAAa,YAAY;AACrC,WAAK,OAAO,IAAI,KAAK,OAAO,OAAO,IAAI,UAAU,aAAa,OAAO;AACrE,aAAO;AAAA,IACR;AAEA,UAAM,EAAC,SAAS,gBAAe,IAAI,QAAQ,eAAe,MAAM,MAAM;AACtE,QAAI,QAAQ,QAAQ;AACnB,eAAS,QAAQ,QAAQ,SAAS,CAAC;AAAA,IACpC;AAEA,UAAM,wBAAwB,gBAAiB,aAA4B,KAAK,eAA6B;AAC7G,QAAI,CAAC,gBAAgB,yBAAyB,aAAa,OAAO,WAAW;AAC5E,UAAI,UAAU;AACd,iBAAW,UAAU,iBAAiB;AACrC,cAAM,SAAS,KAAK,OAAO,SAAS,YAAY,QAAQ,SAAS,IAAI;AACrE,YAAI,WAAW,MAAM;AACpB,qBAAW,UAAU;AAAA,QACtB;AAAA,MACD;AACA,UAAI,UAAU,GAAG;AAChB,gBAAQ,SAAS,yBAAyB,gBAAgB,OAAO;AAAA,MAClE;AAAA,IACD;AAEA,QAAI,CAAC,KAAK,OAAO,YAAY,WAAW,MAAM,MAAM,SAAS,QAAQ,IAAI,KACxE,CAAC,KAAK,OAAO,SAAS,WAAW,SAAS,QAAQ,IAAI,GAAG;AACzD,WAAK,kBAAkB;AACvB,aAAO;AAAA,IACR;AAEA,SAAK,OAAO,YAAY,kBAAkB,MAAM,MAAM,SAAS,QAAQ,IAAI;AAE3E,QAAI,KAAK,mBAAmB,QAAW;AACtC,WAAK,iBAAkB,KAAK,aAAa;AAAA,IAC1C;AAEA,QAAI,KAAK,OAAO,QAAQ,KAAK,KAAK,iBAAiB,UAAU;AAC5D,WAAK,OAAO,MAAM,SAAS,SAAS,IAAI;AAAA,IACzC;AAEA,QAAI,SAA0C;AAC9C,QAAI,KAAK,WAAW,SAAS,KAAK,WAAW,aAAa,KAAK,WAAW,cAAc,KAAK,WAAW,YAAY;AACnH,eAAS,KAAK,WAAW,SAAS,SAAS,IAAI;AAC/C,UAAI,WAAW,KAAK,OAAO;AAAU,gBAAQ,qBAAqB;AAClE,UAAI,UAAU,WAAW,KAAK,WAAW;AAAW,qBAAa;AAAA,IAClE,OAAO;AACN,UAAI,CAAC,QAAQ,QAAQ;AACpB,aAAK,OAAO,aAAa,YAAY;AACrC,aAAK,OAAO,IAAI,KAAK,OAAO,OAAO,IAAI,UAAU,aAAa,OAAO;AACrE,eAAO;AAAA,MACR;AACA,UAAI,KAAK,OAAO,QAAQ,KAAK,KAAK,iBAAiB,UAAU;AAC5D,aAAK,OAAO,MAAM,SAAS,SAAS,IAAI;AAAA,MACzC;AACA,mBAAa,KAAK,iBAAiB,SAAS,SAAS,IAAI;AAAA,IAC1D;AACA,QAAI,KAAK,aAAa;AAAY,WAAK,QAAQ,SAAS,SAAS,MAAM,KAAK,WAAW,OAAO,IAAI;AAClG,QAAI,CAAC,QAAQ,IAAI;AAChB,WAAK,OAAO,MAAM,SAAS,SAAS,IAAI;AAAA,IACzC;AAEA,QAAI,CAAC,YAAY;AAChB,WAAK,OAAO,YAAY,YAAY,MAAM,MAAM,QAAQ,SAAS,IAAI;AACrE,aAAO;AAAA,IACR;AAEA,QACC,CAAC,KAAK,mBACN,EAAE,KAAK,iBAAiB,QAAQ,WAAW,YAAY,MACvD,CAAC,KAAK,MAAM,YAAY,GACvB;AACD,YAAM,aAAa,QAAQ;AAC3B,WAAK,OAAO,YAAY,0BAA0B,MAAM,MAAM,SAAS,QAAQ,IAAI;AACnF,WAAK,OAAO,SAAS,0BAA0B,SAAS,QAAQ,IAAI;AACpE,UAAI,WAAW,YAAY,UAAU,KAAK,aAAa,UAAU;AAChE,YAAI,QAAQ,MAAM,QAAQ,QAAQ,KAAK,aAAa,QAAQ,QAAQ,GAAG;AACtE,eAAK,OAAO,SAAS,iBAAiB,SAAS,OAAO;AAAA,QACvD;AAAA,MACD;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AAAA;AAAA,EAEA,iBAAiB,SAAoB,SAAkB,MAAkB,WAAqB;AAC7F,QAAI,QAAQ,SAAS,KAAK,CAAC,KAAK;AAAa,WAAK,YAAY;AAE9D,UAAM,YACiD;AAAA;AAAA,MAEtD,KAAK;AAAA;AAAA,MAGL,KAAK;AAAA;AAAA,MAGL,KAAK;AAAA;AAAA,MAGL,KAAK;AAAA;AAAA,MAGL,KAAK;AAAA;AAAA,MAGL,KAAK;AAAA;AAAA,MAGL,KAAK;AAAA;AAAA,MAGL,KAAK;AAAA,IACN;AACA,QAAI,KAAK,OAAO,OAAO,GAAG;AAEzB,OAAC,UAAU,CAAC,GAAG,UAAU,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,UAAU,CAAC,CAAC;AAAA,IAC3D;AACA,QAAI,KAAK,OAAO,QAAQ,GAAG;AAE1B,OAAC,UAAU,CAAC,GAAG,UAAU,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,UAAU,CAAC,CAAC;AAAA,IAC3D;AAEA,QAAI;AAAW,WAAK,OAAO,cAAc,MAAM,SAAS,QAAQ,CAAC,CAAC;AAElE,UAAM,YAAY,KAAK,OAAO,YAAY,OAAO,MAAM,MAAM,SAAS,QAAQ,CAAC,GAAG,IAAI,KACrF,KAAK,OAAO,YAAY,cAAc,MAAM,CAAC,GAAG,QAAQ,CAAC,GAAG,SAAS,IAAI,KACzE,KAAK,OAAO,SAAS,cAAc,SAAS,QAAQ,CAAC,GAAG,IAAI;AAC7D,QAAI,CAAC,WAAW;AACf,UAAI,cAAc,OAAO;AACxB,aAAK,OAAO,IAAI,SAAS,OAAO;AAChC,aAAK,OAAO,aAAa,SAAS;AAAA,MACnC;AACA,aAAO,cAAc,KAAK,OAAO;AAAA,IAClC;AAEA,QAAI,oBAAoB;AACxB,eAAW,QAAQ,WAAW;AAC7B,YAAM,aAAgE,KAAK,KAAK,MAAM,SAAS,SAAS,IAAI;AAC5G,UAAI,CAAC;AAAY;AACjB,gBAAU,QAAQ,OAAO,CAAC,KAAK,MAAM,WAAW,CAAC,KAAK,WAAW,CAAC,MAAM,CAAC;AACzE,0BAAoB,qBAAqB,WAAW,KAAK,SAAO,QAAQ,KAAK;AAC7E,UAAI,KAAK,eAAe;AAAmB,aAAK,cAAc;AAC9D,UAAI,CAAC,QAAQ,QAAQ;AAEpB;AAAA,MACD;AAAA,IACD;AAEA,UAAM,aAAa,CAAC,CAAC,QAAQ;AAC7B,QAAI,CAAC,cAAc,CAAC;AAAmB,cAAQ,qBAAqB;AACpE,UAAM,UAAU,QAAQ,IAAI,OAAK,EAAE,QAAQ,CAAC;AAC5C,QAAI,KAAK;AAAW,WAAK,OAAO,aAAa,cAAc,QAAQ,KAAK,GAAG,CAAC;AAC5E,WAAO;AAAA,EACR;AAAA,EACA,4BAA4B,SAAoB,SAAkB,MAAkB;AACnF,QAAI,KAAK,OAAO;AAAe,aAAO,IAAI,MAAM,QAAQ,MAAM,EAAE,KAAK,IAAI;AACzE,UAAM,aAAwB,CAAC;AAC/B,eAAW,CAAC,GAAG,MAAM,KAAK,QAAQ,QAAQ,GAAG;AAC5C,UAAI,OAAO,UAAU,YAAY,GAAG;AACnC,mBAAW,CAAC,IAAI;AAAA,MACjB,WAAW,KAAK,OAAO,OAAO,KAAK,KAAK,OAAO,WAAW,QAAQ,QAAQ,QAAQ,GAAG;AACpF,mBAAW,CAAC,IAAI;AAAA,MACjB,OAAO;AACN,mBAAW,CAAC,IAAI,KAAK,OAAO,SAAS,mBAAmB,QAAQ,SAAS,IAAI;AAAA,MAC9E;AACA,UAAI,WAAW,CAAC,MAAM,OAAO;AAC5B,YAAI,KAAK,aAAa;AACrB,eAAK,cAAc;AAAA,QACpB,OAAO;AACN,cAAI,CAAC,KAAK;AAAW,iBAAK,OAAO,aAAa,QAAQ;AACtD,eAAK,OAAO,IAAI,SAAS,SAAS,MAAM;AAAA,QACzC;AAAA,MACD;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,mBAAmB,SAAoB,SAAkB,MAAkB;AAC1E,UAAM,aAAa,KAAK,OAAO,SAAS,UAAU,SAAS,SAAS,IAAI;AACxE,QAAI,CAAC,WAAW,SAAS,IAAI,KAAK,WAAW,SAAS,KAAK,GAAG;AAC7D,WAAK,OAAO,IAAI,SAAS,OAAO;AAChC,WAAK,OAAO,aAAa,SAAS;AAAA,IACnC;AACA,eAAW,KAAK,QAAQ,KAAK,GAAG;AAC/B,UAAI,WAAW,CAAC,MAAM,KAAK,OAAO;AAAU,mBAAW,CAAC,IAAI,WAAW,CAAC,KAAK;AAAA,IAC9E;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBAAoB,SAAoB,SAAkB,MAAkB;AAC3E,QAAI,KAAK,mBAAmB,QAAW;AACtC,WAAK,iBAAkB,KAAK,aAAa;AAAA,IAC1C;AAEA,UAAM,aAAa,CAAC;AACpB,eAAW,KAAK,QAAQ,KAAK,GAAG;AAC/B,iBAAW,CAAC,IAAK,KAAK,mBAAmB,KAAK,mBAAmB,QAAQ,KAAK,eAAe,KAAK,IAAI,MACrG,QAAQ,CAAC,EAAE,YAAY,KAAK,MAAM,CAAC,KAAK,WAAW;AAAA,IACrD;AAEA,WAAO;AAAA,EACR;AAAA,EACA,mBAAmB,SAAoB,SAAkB,MAAkB;AAC1E,UAAM,aAAa,CAAC;AACpB,eAAW,CAAC,GAAG,MAAM,KAAK,QAAQ,QAAQ,GAAG;AAC5C,UAAI,KAAK,OAAO,OAAO,KAAK,KAAK,MAAM,QAAQ,KAAK,WAAW,WAAW,CAAC,KAAK,IAAI,YAAY,UAAU,MAAM,GAAG;AAClH,aAAK,OAAO,MAAM,yBAAyB;AAC3C,aAAK,OAAO,IAAI,WAAW,MAAM;AACjC,mBAAW,CAAC,IAAI;AAAA,MACjB,WAAW,CAAC,KAAK,OAAO,YAAY,eAAe,MAAM,CAAC,GAAG,QAAQ,SAAS,IAAI,GAAG;AACpF,aAAK,OAAO,IAAI,WAAW,MAAM;AACjC,mBAAW,CAAC,IAAI;AAAA,MACjB,WAAW,KAAK,OAAO,OAAO,KAAK,KAAK,oBAAoB,QAAQ,WAAW,WAAW,KACzF,CAAC,QAAQ,CAAC,EAAE,OAAO,OAAO,KAAK,CAAC,KAAK,IAAI,YAAY,aAAa,MAAM,GAAG;AAC3E,aAAK,OAAO,MAAM,4BAA4B;AAC9C,YAAI,OAAO,YAAY,EAAE,KAAK,UAAU,CAAC,KAAK,IAAI,YAAY,KAAK,QAAQ,MAAM,IAAI;AACpF,eAAK,OAAO,KAAK,iDAAiD;AAAA,QACnE;AACA,aAAK,OAAO,IAAI,WAAW,MAAM;AACjC,mBAAW,CAAC,IAAI;AAAA,MACjB,OAAO;AACN,mBAAW,CAAC,IAAI;AAAA,MACjB;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,gBAAgB,SAAoB,SAAkB,MAAkB;AACvE,UAAM,aAAa,CAAC;AACpB,eAAW,CAAC,GAAG,MAAM,KAAK,QAAQ,QAAQ,GAAG;AAC5C,WAAK,OAAO,eAAe;AAE3B,UAAI,WAAW,KAAK;AACpB,UAAI,KAAK,MAAM;AACd,YAAI,CAAC,OAAO,mBAAmB,GAAG;AACjC,qBAAW;AACX,cAAI,KAAK,SAAS,SAAS,KAAK,OAAO,OAAO,KAAK,CAAC,QAAQ,QAAQ,KAAK,GAAG;AAC3E,uBAAW;AAAA,UACZ;AACA,cAAI,CAAC,OAAO,UAAU,SAAS,KAAK,QAAQ,SAAS,OAAO,UAC1D,KAAK,SAAS,QAAQ,CAAC,OAAO,QAAQ,KAAK,IAAI,IAAI;AACpD,wBAAa,QAAQ,QAAQ,OAAO;AAAA,UACrC,OAAO;AACN,iBAAK,OAAO,IAAI,WAAW,QAAQ,QAAQ;AAC3C,uBAAW,CAAC,IAAI;AAChB;AAAA,UACD;AAAA,QACD;AAAA,MACD,OAAO;AACN,mBAAW,KAAK,OAAO,SAAS,kBAAkB,QAAQ,SAAS,MAAM,QAAQ;AACjF,YAAI,aAAa,MAAM;AACtB,cAAI,QAAQ;AACZ,cAAI,CAAC,KAAK,gBAAgB;AACzB,kBAAM,SAAS,KAAK,OAAO,SAAS,eAAe,SAAS,MAAM,MAAM,EAAC,GAAG,QAAQ,OAAM,CAAC;AAC3F,oBAAQ,KAAK,OAAO,cAAc,OAAO,UAAU,GAAG,IAAI,CAAC;AAAA,UAC5D;AACA,cAAI,CAAC,KAAK,eAAe;AACxB,kBAAM,SAAS,KAAK,OAAO,SAAS,eAAe,QAAQ,MAAM,MAAM,EAAC,GAAG,OAAO,OAAM,CAAC;AACzF,oBAAQ,KAAK,OAAO,cAAc,QAAQ,OAAO,SAAS,GAAG,IAAI,CAAC;AAAA,UACnE;AACA,cAAI,QAAQ,GAAG;AACd,uBAAW,KAAK,OAAO,MAAM,YAAY,IAAI,SAAS,CAAC;AAAA,UACxD,WAAW,QAAQ,GAAG;AACrB,uBAAW,KAAK,OAAO,MAAM,WAAW,KAAK,IAAI,MAAM;AAAA,UACxD;AAAA,QACD;AAAA,MACD;AACA,UAAI,KAAK,aAAc,KAAK,OAAO,WAAW,KAAK,OAAO,OAAO,KAAK,QAAQ,QAAQ,QAAQ,KAC3F,KAAK,WAAW,UAAU,KAAK,aAAa,YAAY,CAAC,OAAO,mBAAmB,GAAI;AACzF,mBAAW;AAAA,MACZ,OAAO;AACN,mBAAW,KAAK,OAAO,SAAS,YAAY,QAAQ,SAAS,MAAM,QAAQ;AAAA,MAC5E;AACA,UAAI,aAAa,QAAQ,CAAC,KAAK,OAAO,aAAa,UAAU,GAAG,GAAG;AAClE,YAAI,KAAK,aAAa;AACrB,eAAK,cAAc;AAAA,QACpB,OAAO;AACN,cAAI,CAAC,KAAK;AAAW,iBAAK,OAAO,aAAa,QAAQ;AACtD,eAAK,OAAO,IAAI,SAAS,SAAS,MAAM;AAAA,QACzC;AACA,YAAI,CAAC,KAAK,QAAQ,QAAQ,QAAQ,eAAe,KAAK,QAAQ,QAAQ,GAAG;AACxE,eAAK,OAAO,MAAM,EAAC,KAAK,EAAC,GAAG,OAAO;AAAA,QACpC;AACA,mBAAW,CAAC,IAAI;AAChB;AAAA,MACD;AACA,iBAAW,CAAC,IAAI;AAAA,IACjB;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBAAoB,SAAoB,SAAkB,MAAkB;AAC3E,QAAI,KAAK,eAAe;AACvB,iBAAW,UAAU,SAAS;AAC7B,YAAI,QAAQ;AACZ,mBAAW,YAAY;AAAA,UACtB;AAAA,UAAiB;AAAA,UAAkB;AAAA,UAAe;AAAA,UAAY;AAAA,UAAW;AAAA,UAAY;AAAA,QACtF,GAAG;AACF,cAAI,OAAO,eAAe,QAAQ;AAAG,oBAAQ;AAAA,QAC9C;AACA,YAAI,KAAK,OAAO,OAAO,KAAK,CAAC,OAAO,OAAO,OAAO,GAAG;AACpD,qBAAW,YAAY,CAAC,gBAAgB,YAAY,cAAc,WAAW,GAAG;AAC/E,gBAAI,OAAO,KAAK,oBAAoB,QAAQ;AAAG,sBAAQ;AAAA,UACxD;AAAA,QACD;AACA,YAAI,OAAO;AACV,cAAI,KAAK,OAAO,SAAS;AACxB,iBAAK,OAAO,IAAI,aAAa,QAAQ,aAAa;AAAA,UACnD,OAAO;AACN,iBAAK,OAAO,IAAI,aAAa,QAAQ,WAAW,KAAK,MAAM,UAAU;AAAA,UACtE;AACA,cAAI,KAAK,OAAO,OAAO;AAAG,mBAAO,OAAO,UAAU,OAAO;AAAA,QAC1D;AAAA,MACD;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,mBAAmB,SAAoB,SAAkB,MAAkB;AAC1E,UAAM,SAAS,QAAQ,CAAC;AACxB,QAAI,KAAK,cAAc;AACtB,YAAM,SAA4B,CAAC;AACnC,UAAI,SAAS;AACb,UAAI;AACJ,WAAK,YAAY,OAAO,QAAQ;AAC/B,cAAM,QAAQ,OAAO,OAAO,QAAQ;AACpC,YAAI,QAAQ,GAAG;AACd,iBAAO,QAAQ,IAAI;AACnB,mBAAS;AAAA,QACV;AAAA,MACD;AACA,UAAI,QAAQ;AACX,aAAK,OAAO,aAAa,SAAS;AAClC,aAAK,OAAO,IAAI,uBAAuB,QAAQ,SAAS,WAAW,KAAK,IAAI;AAC5E,aAAK,OAAO,MAAM,QAAQ,SAAS,OAAO;AAE1C,YAAI;AACJ,aAAK,aAAa,QAAQ;AACzB,iBAAO,SAAS,IAAI;AAAA,QACrB;AACA,eAAO,SAAS,MAAM;AACtB,aAAK,OAAO,QAAQ,SAAS,SAAS,kBAAkB,MAAM;AAAA,MAC/D;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,wBAAwB,SAAoB,SAAkB,MAAkB;AAE/E,QAAI,CAAC,KAAK,mBAAmB,EAAE,KAAK,iBAAiB,QAAQ,WAAW,YAAY,IAAI;AACvF,WAAK,OAAO,YAAY,sBAAsB,MAAM,MAAM,QAAQ,CAAC,GAAG,SAAS,IAAI;AACnF,WAAK,OAAO,SAAS,sBAAsB,SAAS,SAAS,IAAI;AAAA,IAClE;AACA,WAAO;AAAA,EACR;AAAA;AAAA,EAEA,WAAW,iBAAsC,SAAkB,MAAmD;AACrH,UAAM,SAAS,MAAM,QAAQ,eAAe,IAAI,gBAAgB,CAAC,IAAI;AACrE,UAAM,UAAU,MAAM,QAAQ,eAAe,IAAI,kBAAkB,CAAC,MAAM;AAE1E,SAAK,OAAO,cAAc,MAAM,SAAS,QAAQ,CAAC,CAAC;AAEnD,QAAI,YAAY,KAAK,OAAO,YAAY,OAAO,MAAM,MAAM,SAAS,QAAQ,IAAI,KAC/E,KAAK,OAAO,YAAY,cAAc,MAAM,CAAC,GAAG,QAAQ,SAAS,IAAI,KACrE,KAAK,OAAO,SAAS,cAAc,SAAS,QAAQ,IAAI;AACzD,QAAI,CAAC,WAAW;AACf,UAAI,cAAc,OAAO;AACxB,aAAK,OAAO,IAAI,SAAS,OAAO;AAChC,aAAK,OAAO,aAAa,SAAS;AAAA,MACnC;AACA,aAAO;AAAA,IACR;AAEA,UAAM,cAAc,KAAK,WAAW,aAAa,KAAK,OAAO,aAAa;AAC1E,QAAI,KAAK,WAAW,OAAO;AAC1B,kBAAY,KAAK,OAAO,SAAS,eAAe,QAAQ,SAAS,IAAI;AAAA,IACtE,WAAW,aAAa;AACvB,YAAM,aAAoB,KAAK,OAAO,SAAS,cAAc,SAAS,SAAS,IAAI;AAEnF,UAAI,WAAW,KAAK,YAAU,CAAC,MAAM;AAAG,eAAO;AAC/C,kBAAY;AAAA,IACb,OAAO;AACN,kBAAY,KAAK,OAAO,SAAS,cAAc,QAAQ,SAAS,IAAI;AAAA,IACrE;AACA,QAAI,CAAC,WAAW;AACf,UAAI,cAAc,OAAO;AACxB,aAAK,OAAO,IAAI,SAAS,OAAO;AAChC,aAAK,OAAO,aAAa,SAAS;AAAA,MACnC;AACA,aAAO;AAAA,IACR;AACA,WAAO,KAAK,QAAQ,cAAc,UAAU,QAAQ,SAAS,IAAI;AAAA,EAClE;AAAA,EACA,mBAAmB,SAAoB,SAAkB,MAAkB;AAC1E,QAAI,SAA2C,CAAC;AAChD,eAAW,KAAK,QAAQ,KAAK,GAAG;AAC/B,aAAO,CAAC,IAAI;AAAA,IACb;AACA,SAAK,cAAc;AACnB,YAAQ,aAAa;AACrB,QAAI,aAAa,KAAK,YAAY;AAClC,QAAI,MAAM,QAAQ,UAAU,GAAG;AAE9B,UAAI,WAAW,CAAC,MAAM,KAAK,WAAW,CAAC,MAAM,GAAG;AAC/C,YAAI,KAAK,OAAO,OAAO,GAAG;AAEzB,uBAAa,KAAK,OAAO,OAAO,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAC5F,cAAI,aAAa,KAAK,QAAQ,QAAQ,YAAY,GAAG;AACpD,yBAAa,IAAI,KAAK,OAAO,OAAO,CAAC;AAAA,UACtC;AAAA,QACD,OAAO;AACN,uBAAa,KAAK,OAAO,OAAO,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,QACzD;AAAA,MACD,OAAO;AACN,qBAAa,KAAK,OAAO,OAAO,WAAW,CAAC,GAAG,WAAW,CAAC,IAAI,CAAC;AAAA,MACjE;AAAA,IACD;AACA,QAAI,eAAe,MAAM,QAAQ,QAAQ,YAAY;AAAG,oBAAc,KAAK,OAAO,OAAO,CAAC;AAC1F,iBAAa,KAAK,MAAM,UAAU;AAClC,QAAI,aAAa;AACjB,QAAI,aAA+C,CAAC;AAEpD,UAAM,gBAAgB,KAAK,eAAe,KAAK,IAAI,MAAM,IAAI,KAAK,YAAY,EAAE;AAEhF,QAAI,cAA0C,QAAQ,MAAM,CAAC;AAC7D,QAAI;AACJ,SAAK,MAAM,GAAG,OAAO,YAAY,OAAO;AACvC,UAAI,OAAO,SAAS,KAAK;AAAG;AAC5B,UAAI,MAAM,KAAK,QAAQ,WAAW,UAAU,CAAC,iBAAiB,KAAK,OAAO,QAAQ;AAAI;AACtF,UAAI,QAAQ,MAAM,CAAAA,YAAU,CAACA,SAAQ,EAAE;AAAG;AAC1C,WAAK,MAAM;AACX,UAAI,KAAK,eAAe,QAAQ,SAAS,GAAG;AAC3C,sBAAc,CAAC,QAAQ,MAAM,CAAC,CAAC;AAC/B,iBAAS,CAAC,OAAO,MAAM,CAAC,CAAC;AAAA,MAC1B,OAAO;AACN,sBAAc,QAAQ,MAAM,CAAC;AAAA,MAC9B;AACA,YAAM,SAAS,YAAY,CAAC;AAC5B,UAAI,UAAU,OAAO,KAAK,gBAAgB,WAAW;AACpD,YAAI,MAAM,GAAG;AACZ,eAAK,OAAO,QAAQ,SAAS,SAAS,KAAK,MAAM,MAAM;AAAA,QACxD,OAAO;AACN,eAAK,OAAO,iBAAiB,MAAM;AAAA,QACpC;AAAA,MACD;AAGA,UAAI,UAAU,KAAK,iBAAiB,MAAM,GAAG;AAC5C,YAAI,WAAW,KAAK;AACpB,cAAM,aAAa,CAAC,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,IAAI,GAAG,CAAC;AACvD,YAAI,aAAa,MAAM;AACtB,cAAI,CAAC,KAAK,gBAAgB;AACzB,kBAAM,SAAS,KAAK,OAAO,SAAS,eAAe,SAAS,MAAM,MAAM,EAAC,GAAG,QAAQ,OAAM,CAAC;AAC3F,kBAAM,QAAQ,KAAK,OAAO,cAAc,OAAO,UAAU,GAAG,IAAI,CAAC;AACjE,gBAAI,QAAQ,GAAG;AACd,0BAAY,WAAW,KAAK;AAAA,YAC7B,OAAO;AACN,0BAAY,WAAW,CAAC,KAAK;AAAA,YAC9B;AAAA,UACD;AACA,cAAI,CAAC,KAAK,eAAe;AACxB,kBAAM,SAAS,KAAK,OAAO,SAAS,eAAe,QAAQ,MAAM,MAAM,EAAC,GAAG,OAAO,OAAM,CAAC;AACzF,kBAAM,QAAQ,KAAK,OAAO,cAAc,OAAO,SAAS,GAAG,IAAI,CAAC;AAChE,gBAAI,QAAQ,GAAG;AACd,0BAAY,WAAW,KAAK;AAAA,YAC7B,WAAW,QAAQ,GAAG;AACrB,0BAAY,WAAW,CAAC,KAAK;AAAA,YAC9B;AAAA,UACD;AAAA,QACD;AACA,mBAAW,KAAK,OAAO,SAAS,kBAAkB,QAAQ,SAAS,MAAM,QAAQ;AACjF,YAAI,CAAC,KAAK,WAAW;AACpB,qBAAW,KAAK,OAAO,SAAS,YAAY,QAAQ,SAAS,MAAM,QAAQ;AAC3E,cAAI,aAAa,QAAQ,CAAC,KAAK,OAAO,aAAa,UAAU,GAAG;AAAG;AAAA,QACpE;AAAA,MACD;AAEA,YAAM,WAAW;AACjB,UAAI,CAAC,SAAS;AAAO,iBAAS,QAAQ,CAAC;AAEvC,UAAI;AAEJ,OAAC,mBAAmB,WAAW,IAAI,KAAK,cAAc,aAAa,SAAS,MAAM,QAAQ;AAG1F,UAAI,KAAK,aAAa;AACrB,mBAAW,KAAK,GAAG,iBAAiB;AAAA,MACrC,OAAO;AACN,qBAAa;AAAA,MACd;AAEA,UAAI,CAAC,WAAW,KAAK,SAAO,QAAQ,KAAK;AAAG;AAC5C,mBAAa;AAEb,iBAAW,CAAC,GAAG,EAAE,KAAK,WAAW,QAAQ,GAAG;AAC3C,YAAI,KAAK,eAAe,MAAM,MAAM;AAAG;AAGvC,eAAO,CAAC,IAAI,OAAO,QAAQ,CAAC,KAAK,IAAI;AAErC,aAAK,eAAe,OAAO,CAAC;AAAA,MAC7B;AACA,UAAI,KAAK,iBAAiB;AACzB,cAAM,iBAAiB,QAAQ;AAC/B,aAAK,OAAO,OAAO,KAAK,MAAM,QAAQ,QAAQ,CAAC,GAAG,SAAS,SAAS,KAAK,IAAI,WAAW,IAAI,KAAK,EAAE,GAAG,IAAI;AAC1G,aAAK,kBAAkB;AACvB,YAAI,QAAQ,MAAM,QAAQ,QAAQ,KAAK,iBAAiB,QAAQ,QAAQ,GAAG;AAC1E,eAAK,OAAO,SAAS,iBAAiB,SAAS,OAAO;AAAA,QACvD;AAAA,MACD;AACA,WAAK,OAAO,UAAU,QAAQ;AAC9B,UAAI,CAAC,QAAQ,MAAM,QAAQ,WAAW,GAAG;AACxC;AACA;AAAA,MACD;AAAA,IACD;AAEA,QAAI,QAAQ;AAAG,aAAO,OAAO,KAAK,KAAK;AACvC,QAAI;AAAY,aAAO,KAAK,KAAK;AACjC,SAAK,OAAO,cAAc,OAAO,OAAO,CAAC,QAAQ,EAAE;AACnD,QAAI,KAAK,YAAY,OAAO,KAAK,gBAAgB,WAAW;AAC3D,WAAK,OAAO,IAAI,aAAa,QAAQ,CAAC,GAAG,MAAM,CAAC;AAAA,IACjD;AAEA,SAAK,KAAK,UAAU,KAAK,OAAO,kBAAkB,KAAK,aAAa;AACnE,YAAM,iBAAiB,QAAQ;AAC/B,WAAK,OAAO,OAAO,KAAK,iBAAiB,KAAK,aAAa,MAAM,OAAO,GAAG,SAAS,SAAS,QAAQ;AACrG,UAAI,QAAQ,MAAM,QAAQ,QAAQ,KAAK,iBAAiB,QAAQ,QAAQ,GAAG;AAC1E,aAAK,OAAO,SAAS,iBAAiB,SAAS,OAAO;AAAA,MACvD;AAAA,IACD;AAEA,QAAI,KAAK,gBAAgB;AACxB,YAAM,iBAAiB,QAAQ;AAC/B,UAAI;AACJ,UAAI,KAAK,IAAI,OAAO,GAAG;AACtB,uBAAe,KAAK,OAAO,cAAc,KAAK,MAAM,QAAQ,YAAY,CAAC,GAAG,CAAC;AAAA,MAC9E,OAAO;AACN,uBAAe,KAAK,OAAO,cAAc,KAAK,OAAO,MAAM,QAAQ,QAAQ,CAAC,GAAG,CAAC;AAAA,MACjF;AACA,WAAK,OAAO,aAAa,cAAc,SAAS,SAAS,EAAC,IAAI,iBAAgB,CAAc;AAC5F,UAAI,QAAQ,MAAM,QAAQ,QAAQ,KAAK,iBAAiB,QAAQ,QAAQ,GAAG;AAC1E,aAAK,OAAO,SAAS,iBAAiB,SAAS,OAAO;AAAA,MACvD;AAAA,IACD;AAGA,QAAI,KAAK,aAAa;AACrB,oBAAc,QAAQ,MAAM,CAAC;AAAA,IAC9B;AAEA,eAAW,CAAC,GAAG,MAAM,KAAK,YAAY,QAAQ,GAAG;AAChD,UAAI,UAAU,YAAY,QAAQ;AACjC,eAAO,YAAY,MAAM,WAAW,CAAC,GAAiC,OAAO;AAC7E,YAAI,OAAO,WAAW,CAAC,MAAM,UAAU;AACtC,iBAAO,iBAAiB,KAAK,cAAc,IAAI,MAAM;AAAA,QACtD;AAAA,MACD;AAAA,IACD;AAEA,QAAI,KAAK,QAAQ,CAAC,QAAQ,CAAC,EAAE;AAAI,WAAK,OAAO,IAAI,OAAO;AAExD,QAAI,CAAC,OAAO,KAAK,SAAO,CAAC,CAAC,OAAO,QAAQ,CAAC;AAAG,aAAO;AAEpD,SAAK,OAAO,UAAU,QAAQ;AAE9B,SAAK,wBAAwB,YAAY,OAAO,SAAO,CAAC,CAAC,GAAG,GAAgB,SAAS,IAAI;AAEzF,QAAI,CAAC,KAAK,mBAAmB,EAAE,KAAK,iBAAiB,QAAQ,WAAW,YAAY,IAAI;AACvF,iBAAW,CAAC,GAAG,CAAC,KAAK,OAAO,QAAQ,GAAG;AAGtC,cAAM,YAAY,QAAQ,WAAW,IAAI,KAAK,cAAc;AAC5D,YAAI,OAAO,cAAc,YAAY,QAAQ,CAAC,EAAE,IAAI;AACnD,gBAAM,wBAAwB,QAAQ,CAAC,EAAE,gBAAgB,KAAK;AAC9D,cAAI,QAAQ,CAAC,EAAE,MAAM,QAAQ,CAAC,EAAE,QAAQ,KAAK,uBAAuB,QAAQ,CAAC,EAAE,QAAQ,GAAG;AACzF,iBAAK,OAAO,SAAS,iBAAiB,QAAQ,CAAC,GAAG,OAAO;AAAA,UAC1D;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AAAA,EACA,cACC,SAA4B,SAAkB,gBAC9C,WAA2B,aAAuB,QACV;AAGxC,UAAM,SAAS,QAAQ,CAAC;AACxB,QAAI,SAA2C,CAAC;AAChD,eAAW,KAAK,QAAQ,KAAK,GAAG;AAC/B,aAAO,CAAC,IAAI;AAAA,IACb;AACA,UAAM,OAAO,KAAK,IAAI,cAAc,cAAc;AAClD,QAAI,YAAqC;AACzC,QAAI,WAAW;AACf,QAAI,CAAC;AAAU,iBAAW;AAC1B,QAAI,CAAC,SAAS;AAAO,eAAS,QAAQ,CAAC;AACvC,QAAI,KAAK,WAAW,SAAS,CAAC,QAAQ;AACrC,kBAAY,KAAK,OAAO,YAAY,eAAe,UAAU,CAAC,GAAG,UAAU,MAAM,SAAS,IAAI;AAAA,IAC/F,YAAY,KAAK,WAAW,aAAa,KAAK,WAAW,cAAc,KAAK,WAAW,eAAe,CAAC,QAAQ;AAC9G,kBAAY,KAAK,OAAO,YAAY,cAAc,UAAU,CAAC,GAAG,UAAU,MAAM,SAAS,IAAI;AAAA,IAC9F,WAAW,QAAQ;AAClB,kBAAY,KAAK,OAAO,YAAY,UAAU,UAAU,CAAC,GAAG,QAAQ,SAAS,IAAI;AAAA,IAClF;AACA,QAAI,CAAC,WAAW;AACf,UAAI,cAAc,OAAO;AACxB,aAAK,OAAO,IAAI,SAAS,OAAO;AAChC,aAAK,OAAO,aAAa,SAAS;AAAA,MACnC;AACA,aAAO,CAAC,CAAC,KAAK,GAAG,OAAO;AAAA,IACzB;AAGA,QAAI,CAAC,eAAe,CAAC,QAAQ;AAC5B,UAAI,KAAK,WAAW,SAAS,KAAK,WAAW,cAAc,KAAK,WAAW,cAAc,KAAK,WAAW,WAAW;AACnH,iBAAS,KAAK,mBAAmB,QAAQ,SAAS,SAAS,MAAM,UAAU,WAAW;AAAA,MACvF;AAAA,IACD;AAEA,eAAW,KAAK,QAAQ,KAAK,GAAG;AAC/B,UAAI,OAAO,CAAC,MAAM,KAAK,OAAO,gBAAgB;AAC7C,eAAO,CAAC,IAAI;AACZ,gBAAQ,CAAC,IAAI;AAAA,MACd;AACA,UAAI,QAAQ,CAAC,KAAK,eAAe,CAAC,SAAS,MAAM;AAChD,eAAO,CAAC,IAAI;AAAA,MACb;AACA,UAAI,CAAC,OAAO,CAAC;AAAG,gBAAQ,CAAC,IAAI;AAAA,IAC9B;AAEA,aAAS,KAAK,gBAAgB,QAAQ,SAAS,SAAS,MAAM,UAAU,aAAa,MAAM;AAE3F,eAAW,KAAK,QAAQ,KAAK,GAAG;AAC/B,UAAI,OAAO,CAAC,MAAM;AAAO,gBAAQ,CAAC,IAAI;AAAA,IACvC;AAGA,aAAS,KAAK,OAAO,aAAa,QAAQ,SAAS,SAAS,IAAI;AAEhE,eAAW,KAAK,QAAQ,KAAK,GAAG;AAC/B,UAAI,OAAO,CAAC,MAAM;AAAO,gBAAQ,CAAC,IAAI;AAAA,IACvC;AAGA,aAAS,KAAK,eAAe,QAAQ,SAAS,SAAS,MAAM,UAAU,aAAa,MAAM;AAE1F,eAAW,KAAK,QAAQ,KAAK,GAAG;AAC/B,UAAI,CAAC,OAAO,CAAC,KAAK,OAAO,CAAC,MAAM;AAAG,gBAAQ,CAAC,IAAI;AAAA,IACjD;AAGA,UAAM,eAAe,KAAK,OAAO;AAGjC,QAAI,SAAS,QAAQ,CAAC,KAAK;AAAa,WAAK,UAAU,SAAS,SAAS,MAAM,UAAU,WAAW;AAGpG,QAAI,SAAS;AAAa,WAAK,YAAY,SAAS,SAAS,MAAM,UAAU,MAAM;AAEnF,SAAK,OAAO,eAAe;AAG3B,QAAI,SAAS;AAAa,eAAS,KAAK,YAAY,QAAQ,SAAS,SAAS,IAAI;AAElF,eAAW,KAAK,QAAQ,KAAK,GAAG;AAC/B,UAAI,CAAC,OAAO,CAAC,KAAK,OAAO,CAAC,MAAM;AAAG,gBAAQ,CAAC,IAAI;AAAA,IACjD;AAEA,UAAM,iBAA4B,CAAC;AACnC,UAAM,gBAAgB,CAAC;AACvB,eAAW,CAAC,GAAG,CAAC,KAAK,QAAQ,QAAQ,GAAG;AACvC,UAAI,OAAO,OAAO,CAAC,MAAM,YAAY,GAAG;AACvC,uBAAe,KAAK,CAAC;AACrB,sBAAc,KAAK,OAAO,CAAC,CAAC;AAAA,MAC7B;AAAA,IACD;AACA,UAAM,oBAAoB,QAAQ;AAClC,QAAI,cAAc,UAAU,CAAC,eAAe,CAAC,QAAQ;AACpD,WAAK,OAAO,SAAS,eAAe,gBAAgB,SAAS,MAAM,aAAa;AAChF,UAAI,SAAS,YAAY;AACxB,mBAAW,KAAK,gBAAgB;AAC/B,eAAK,OAAO,YAAY,YAAY,UAAU,CAAC,GAAG,GAAG,SAAS,IAAI;AAAA,QACnE;AAAA,MACD;AACA,UAAI,QAAQ,MAAM,QAAQ,MAAM,QAAQ,QAAQ,KAAK,oBAAoB,QAAQ,QAAQ,GAAG;AAC3F,aAAK,OAAO,SAAS,iBAAiB,OAAO;AAAA,MAC9C;AAAA,IACD;AAEA,WAAO,CAAC,QAAQ,OAAO;AAAA,EACxB;AAAA,EACA,mBACC,QAA0B,SAA4B,SACtD,MAAkB,UAAsB,aACrB;AACnB,eAAW,CAAC,GAAG,MAAM,KAAK,QAAQ,QAAQ,GAAG;AAC5C,UAAI,CAAC;AAAQ;AACb,aAAO,CAAC,IAAI,KAAK,OAAO,SAAS,iBAAiB,QAAQ,SAAS,QAAQ;AAAA,IAC5E;AACA,WAAO;AAAA,EACR;AAAA,EACA,gBACC,QAA0B,SAA4B,QACtD,MAAkB,UAAsB,aAAuB,QAC5C;AACnB,eAAW,CAAC,GAAG,MAAM,KAAK,QAAQ,QAAQ,GAAG;AAC5C,UAAI,CAAC;AAAQ;AACb,WAAK,OAAO,eAAe;AAC3B,aAAO,CAAC,IAAI;AACZ,YAAM,YAAY,KAAK,UAAU,QAAQ,QAAQ,QAAQ;AAiBzD,UAAI,cAAc,SAAS,cAAc,MAAM;AAC9C,YAAI,OAAO,CAAC,MAAM,SAAS,CAAC,eAAe,CAAC,QAAQ;AACnD,eAAK,OAAO,IAAI,SAAS,MAAM;AAC/B,eAAK,OAAO,aAAa,SAAS;AAAA,QACnC;AACA,aAAK,OAAO,MAAM,gCAAgC;AAClD,eAAO,CAAC,IAAI;AACZ;AAAA,MACD;AACA,aAAO,CAAC,IAAI;AAAA,IACb;AACA,WAAO;AAAA,EACR;AAAA,EACA,eACC,QAA0B,SAA4B,QACtD,MAAkB,UAAsB,aAAuB,QAC9D;AACD,QAAI,cAAmD,OAAO,OAAO,KAAK,cAAc;AACxF,eAAW,CAAC,GAAG,MAAM,KAAK,QAAQ,QAAQ,GAAG;AAC5C,UAAI,WAAW;AAAO;AACtB,UAAI;AACJ,UAAI,eAAoD;AAExD,UAAI,QAAQ;AACX,YAAI,SAAS,UAAU,CAAC,OAAO,SAAS;AACvC,sBAAY,KAAK,OAAO,MAAM,SAAS,QAAQ,QAAQ,QAAQ,MAAM,aAAa,MAAM;AACxF,yBAAe,KAAK,eAAe,cAAc,SAAS;AAAA,QAC3D;AACA,YAAI,SAAS,QAAQ,CAAC,OAAO,SAAS;AACrC,cAAI,OAAO,MAAM,OAAO,OAAO;AAC9B,iBAAK,OAAO,IAAI,SAAS,QAAQ,MAAM;AACvC,iBAAK,OAAO,aAAa,SAAS;AAClC,mBAAO,CAAC,IAAI,KAAK,eAAe,OAAO,CAAC,GAAG,KAAK;AAChD,0BAAc,KAAK,eAAe,aAAa,IAAI;AACnD;AAAA,UACD;AACA,gBAAM,SAAS,OAAO,YAAY,SAAS,KAAK,CAAC,IAAI,SAAS,KAAK,CAAC;AACpE,gBAAM,IAAI,OAAO,MAAM,KAAK,OAAO,MAAM,IAAI,KAAK,QAAQ,KAAK,OAAO,MAAM,CAAC;AAC7E,cAAI,CAAC,KAAK,MAAM,GAAG;AAClB,iBAAK,OAAO,IAAI,SAAS,MAAM;AAC/B,iBAAK,OAAO,aAAa,SAAS;AAClC,iBAAK,OAAO,MAAM,kBAAkB;AACpC,mBAAO,CAAC,IAAI,KAAK,eAAe,OAAO,CAAC,GAAG,KAAK;AAChD,0BAAc,KAAK,eAAe,aAAa,IAAI;AACnD;AAAA,UACD;AACA,eAAK,OAAO,IAAI,SAAS,QAAQ,OAAO,SAAS;AACjD,yBAAe;AAAA,QAChB;AACA,YAAI,SAAS,QAAQ;AACpB,sBAAY,OAAO,aAAa,SAAS,QAAQ,QAAQ,SAAS,UAAU,SAAS,UAAU,IAAI;AACnG,cAAI,CAAC,aAAa,KAAK,QAAQ;AAC9B,mBAAO,CAAC,IAAI,KAAK,eAAe,OAAO,CAAC,GAAG,KAAK;AAChD,0BAAc,KAAK,eAAe,aAAa,IAAI;AACnD;AAAA,UACD;AACA,yBAAe,KAAK,eAAe,cAAc,SAAS;AAAA,QAC3D;AACA,YAAI,SAAS,aAAa;AACzB,sBAAY,OAAO,UAAU,SAAS,aAAa,QAAQ,IAAI;AAC/D,yBAAe,KAAK,eAAe,cAAc,SAAS;AAAA,QAC3D;AACA,YAAI,SAAS,gBAAgB;AAC5B,sBAAY,OAAO,YAAY,SAAS,gBAAgB,QAAQ,IAAI;AACpE,yBAAe,KAAK,eAAe,cAAc,SAAS;AAAA,QAC3D;AACA,YAAI,SAAS,eAAe;AAC3B,sBAAY,OAAO,KAAK,iBAAiB,SAAS,eAAe,QAAQ,IAAI;AAC7E,yBAAe,KAAK,eAAe,cAAc,SAAS;AAAA,QAC3D;AACA,YAAI,SAAS,eAAe;AAC3B,sBAAY,OAAO,KAAK,iBAAiB,QAAQ,SAAS,eAAe,QAAQ,IAAI;AACrF,yBAAe,KAAK,eAAe,cAAc,SAAS;AAAA,QAC3D;AACA,YAAI,SAAS,SAAS;AACrB,sBAAY,KAAK,OAAO,MAAM,WAAW,SAAS,SAAS,QAAQ,IAAI;AACvE,yBAAe,KAAK,eAAe,cAAc,SAAS;AAAA,QAC3D;AACA,YAAI,SAAS,SAAS;AACrB,sBAAY,KAAK,OAAO,MAAM,WAAW,SAAS,SAAS,QAAQ,IAAI;AACvE,yBAAe,KAAK,eAAe,cAAc,SAAS;AAAA,QAC3D;AACA,YAAI,SAAS,eAAe;AAC3B,sBAAY,KAAK,OAAO,MAAM,iBAAiB,SAAS,eAAe,QAAQ,IAAI;AACnF,yBAAe,KAAK,eAAe,cAAc,SAAS;AAAA,QAC3D;AACA,YAAI,SAAS,aAAa;AACzB,sBAAY,CAAC,CAAC,KAAK,OAAO,UAAU,OAAO,IAAI;AAC/C,yBAAe,KAAK,eAAe,cAAc,SAAS;AAAA,QAC3D;AAIA,YAAI,KAAK,WAAW,SAAS,CAAC,QAAQ;AACrC,cAAI,SAAS,YAAY;AACxB,wBAAY,KAAK,OAAO,YAAY,YAAY,UAAU,CAAC,GAAG,QAAQ,QAAQ,IAAI;AAClF,2BAAe,KAAK,eAAe,cAAc,SAAS;AAAA,UAC3D;AAAA,QACD,YAAY,KAAK,WAAW,aAAa,KAAK,WAAW,eAAe,CAAC,QAAQ;AAChF,cAAI,SAAS,WAAW;AACvB,wBAAY,KAAK,OAAO,YAAY,WAAW,UAAU,CAAC,GAAG,OAAO,MAAM,QAAQ,IAAI;AACtF,2BAAe,KAAK,eAAe,cAAc,SAAS;AAAA,UAC3D;AAAA,QACD,OAAO;AACN,cAAI,SAAS,OAAO;AACnB,wBAAY,KAAK,OAAO,YAAY,OAAO,UAAU,CAAC,GAAG,QAAQ,QAAQ,IAAI;AAC7E,2BAAe,KAAK,eAAe,cAAc,SAAS;AAAA,UAC3D;AACA,cAAI,CAAC,UAAU,CAAC,aAAa;AAC5B,iBAAK,OAAO,SAAS,OAAO,QAAQ,QAAQ,IAAI;AAAA,UACjD;AAAA,QACD;AAAA,MACD;AACA,UAAI,SAAS,iBAAiB,WAAW,OAAO,CAAC,MAAM,OAAO;AAC7D,aAAK,OAAO,MAAM,QAAQ,QAAQ,IAAI;AAAA,MACvC;AACA,UAAI,SAAS,YAAY;AACxB,YAAI,KAAK,OAAO,UAAU,OAAO,IAAI,KAAK,CAAC,OAAO,UAAU,WAAW,GAAG;AACzE,yBAAe;AAAA,QAChB,OAAO;AACN,yBAAe,KAAK,eAAe,cAAc,KAAK;AAAA,QACvD;AAAA,MACD;AAEA,UAAI,iBAAiB;AAAW,uBAAe;AAC/C,aAAO,CAAC,IAAI,KAAK,eAAe,OAAO,CAAC,GAAG,iBAAiB,OAAO,QAAQ,YAAY;AACvF,oBAAc,KAAK,eAAe,aAAa,YAAY;AAAA,IAC5D;AAEA,QAAI,CAAC,eAAe,gBAAgB,KAAK,CAAC,SAAS,QAAQ,CAAC,SAAS,cAAc;AAClF,UAAI,CAAC,UAAU,CAAC,aAAa;AAC5B,YAAI,gBAAgB,OAAO;AAC1B,eAAK,OAAO,IAAI,SAAS,MAAM;AAC/B,eAAK,OAAO,aAAa,SAAS;AAAA,QACnC;AAAA,MACD;AACA,WAAK,OAAO,MAAM,oCAAoC;AAAA,IACvD,WAAW,KAAK,cAAc,OAAO,MAAM,CAAC,OAAO,UAAU,WAAW,GAAG;AAC1E,aAAO,aAAa,KAAK;AAAA,IAC1B;AAEA,WAAO;AAAA,EACR;AAAA,EACA,UACC,SAA4B,QAC5B,MAAkB,UAAsB,aACvC;AACD,eAAW,UAAU,SAAS;AAC7B,UAAI,WAAW;AAAO;AACtB,UAAI,SAAS,QAAQ,CAAC,KAAK,aAAa;AACvC,YAAI,CAAC,eAAe,SAAS,KAAK,QAAQ;AACzC,gBAAM,gBAAgB,KAAK,OAAO,OAAO,GAAG;AAC5C,cAAI,OAAO,SAAS,KAAK,WAAW,eAAe,gBAAgB,SAAS,KAAK,QAAQ;AACxF,iBAAK,QAAQ,QAAQ,QAAQ,MAAM,SAAS,MAAM,aAAa,IAAI;AAAA,UACpE;AACA,cAAI,CAAC,KAAK;AAAU,iBAAK,cAAc;AAAA,QACxC,OAAO;AACN,eAAK,QAAQ,QAAQ,QAAQ,MAAM,SAAS,MAAM,aAAa,IAAI;AAAA,QACpE;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EACA,YAAY,SAA4B,QAAiB,MAAkB,UAAsB,QAAkB;AAClH,QAAI,CAAC,SAAS;AAAa;AAC3B,eAAW,UAAU,SAAS;AAC7B,UAAI,WAAW;AAAO;AACtB,YAAM,cACL,KAAK,OAAO,SAAS,qBAAqB,QAAQ,QAAQ,UAAU,SAAS,YAAY,MAAM,CAAC;AACjG,iBAAW,aAAa,aAAa;AACpC,cAAM,gBAAgB,KAAK,OAAO,OAAO,GAAG;AAE5C,cAAM,qBAAqB,UAAU,UAAU,UAAU,SAAS,KAAK,OAAO,OAAO;AACrF,YAAI,OAAO,UAAU,WAAW,eAC/B,iBAAiB,oBAAoB,UAAU,SAAS,MAAM,UAAU,SAAS;AACjF,eAAK,QAAQ,QAAQ,QAAQ,MAAM,WAAW,MAAM,MAAM;AAAA,QAC3D;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EACA,YACC,QAA0B,SAA4B,QAAiB,MACtE;AACD,eAAW,CAAC,GAAG,MAAM,KAAK,QAAQ,QAAQ,GAAG;AAC5C,UAAI,UAAU,OAAO,KAAK,KAAK,OAAO,KAAK,KAAK,KAAK,OAAO,UAAU,OAAO,IAAI,GAAG;AACnF,cAAM,YAAY,KAAK,OAAO,SAAS,WAAW,QAAQ,QAAQ,IAAI;AACtE,YAAI,WAAW;AACd,iBAAO,kBAAkB;AAAA,QAC1B,WAAW,cAAc,SAAS,KAAK,aAAa,UAAU;AAC7D,eAAK,OAAO,IAAI,SAAS,MAAM;AAC/B,eAAK,OAAO,aAAa,SAAS;AAClC,iBAAO,CAAC,IAAI;AAAA,QACb;AAAA,MACD;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,QACC,SAA8C,SAAkB,gBAChE,UAA0B,aAAuB,QACpB;AAC7B,QAAI,CAAC,MAAM,QAAQ,OAAO;AAAG,gBAAU,CAAC,OAAO;AAC/C,UAAM,SAAS,KAAK,cAAc,SAAS,SAAS,gBAAgB,UAAU,aAAa,MAAM,EAAE,CAAC,EAAE,CAAC;AACvG,WAAO,WAAW,OAAO,SAAY;AAAA,EACtC;AAAA,EAEA,iBAAiB,aAAqB,MAAY,SAA0B;AAC3E,QAAI,KAAK,OAAO;AAAe,aAAO,KAAK,MAAM,QAAQ,QAAQ,CAAC;AAClE,WAAO,KAAK,OAAO,cAAc,KAAK,MAAM,cAAc,KAAK,OAAQ,CAAC,IAAI,KAAK,OAAQ,CAAC,CAAC,GAAG,CAAC;AAAA,EAChG;AAAA,EAEA,SAAS,MAAY,SAAkB,YAA0C;AAChF,UAAM,OAAO,QAAQ,QAAQ;AAC7B,QAAI,CAAC,YAAY;AAChB,UAAI,QAAQ,KAAK;AAAW;AAC5B,UAAI,CAAC,KAAK;AAAO;AACjB,UAAI,KAAK,YAAY,CAAC,KAAK,SAAS,SAAS,QAAQ,QAAQ,IAAI;AAAG;AACpE,YAAM,WAAW,QAAQ,YAAY,IAAI;AAEzC,UAAI,CAAC,UAAU;AAAI;AAAA,IACpB;AAEA,QAAI,KAAK,WAAW;AACnB,UAAI,KAAK,SAAS,KAAK;AAAW,eAAO,KAAK;AAAA,IAC/C,WAAW,KAAK,UAAU,MAAM;AAC/B,UAAI,KAAK,SAAS,KAAK,WAAW;AACjC,YAAI,KAAK,aAAa,UAAU;AAC/B,iBAAO,KAAK;AAAA,QACb,WAAW,KAAK,OAAO,WAAW;AACjC,iBAAO,KAAK,QAAQ,KAAK,IAAI;AAAA,QAC9B;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EAEA,eAAe,MAAY,SAA8B;AACxD,QAAI,SAAS;AACZ,YAAM,OAAO,QAAQ,QAAQ;AAC7B,UAAI,KAAK,SAAS,KAAK,WAAW;AACjC,cAAMC,SAAQ,KAAK,IAAI,cAAc,KAAK,KAAe;AACzD,QAAAA,OAAM,kBAAkB;AACxB,eAAOA;AAAA,MACR;AAAA,IACD;AAEA,QAAI,KAAK,aAAa,UAAU;AAC/B,YAAMA,SAAQ,KAAK,IAAI,cAAc,IAAI;AACzC,MAAAA,OAAM,MAAM;AACZ,MAAAA,OAAM,kBAAkB;AACxB,aAAOA;AAAA,IACR;AACA,UAAM,QAAQ,KAAK,IAAI,cAAc,KAAK,QAAQ,KAAK,IAAI,CAAC;AAC5D,UAAM,YAAY,KAAK,MAAO;AAC9B,UAAM,WAAW,KAAK;AAEtB,UAAM,WAAW,KAAK;AACtB,UAAM,kBAAkB;AACxB,WAAO;AAAA,EACR;AAAA,EAEA,SAAS,SAAkB;AAC1B,QAAI,QAAQ,KAAK,aACf,QAAQ,gBACP,QAAQ,QAAQ,UAAU,QAAQ,QAAQ,YAAY,QAAQ,QAAQ,UAAU;AACjF;AACF,UAAM,OAAO,QAAQ,QAAQ;AAC7B,QAAI,CAAC,KAAK;AAAO;AACjB,QAAI,KAAK,YAAY,CAAC,KAAK,SAAS,SAAS,QAAQ,QAAQ,IAAI;AAAG;AACpE,QAAI,aAAa;AACjB,QAAI,eAAe;AACnB,UAAM,SAAuB,CAAC;AAC9B,eAAW,YAAY,QAAQ,WAAW;AACzC,UAAI,SAAS,MAAM,GAAG;AACrB,eAAO,KAAK,IAAI;AAChB;AAAA,MACD;AACA,UAAI,CAAC,SAAS,UAAU;AACvB,uBAAe;AAAA,MAChB;AACA,YAAM,OAAO,KAAK,IAAI,MAAM,IAAI,SAAS,IAAI;AAC7C,UAAI,YAAY,KAAK,SAAS,MAAM,SAAS,IAAI,KAAK;AACtD,UAAI,WAAW;AACd,cAAM,QAAQ,KAAK,IAAI,MAAM,IAAI,SAAS;AAC1C,YAAI,CAAC,MAAM,OAAO,MAAM,aAAa;AAAU,sBAAY,OAAO;AAClE,eAAO,KAAK,EAAC,MAAM,WAAW,QAAQ,MAAM,OAAM,CAAC;AAAA,MACpD,OAAO;AACN,eAAO,KAAK,IAAI;AAAA,MACjB;AACA,UAAI;AAAW,qBAAa;AAAA,IAC7B;AACA,QAAI,cAAc,CAAC;AAAc,aAAO;AAAA,EACzC;AAAA,EAEA,WAAW,MAAY,SAAkB;AACxC,QAAI,OAAO,SAAS;AAAU,aAAO,KAAK,IAAI,MAAM,IAAI,IAAI;AAC5D,QAAI,KAAK,SAAS;AAAY,aAAO;AACrC,QAAI,QAAQ,cAAc,QAAQ,iBAAiB,KAAK,aAAa,UAAU;AAC9E,YAAM,WAAW,KAAK,IAAI,MAAM,IAAI,QAAQ,aAAa;AACzD,UAAI,SAAS,UAAU,SAAS,SAAS,KAAK;AAAM,eAAO;AAAA,IAC5D;AACA,UAAM,UAAU,KAAK,IAAI,MAAM,IAAI,KAAK,UAAU,KAAK,aAAa,WAAW,KAAK,WAAW,KAAK,IAAI,CAAC;AACzG,QAAI,QAAQ;AAAQ,aAAO;AAAA,EAC5B;AAAA,EAEA,iBAAiB,MAAY,SAAkB;AAC9C,QAAI,OAAO,SAAS;AAAU,aAAO,KAAK,IAAI,cAAc,IAAI;AAChE,QAAI,KAAK,SAAS;AAAY,aAAO,KAAK,IAAI,cAAc,IAAI;AAChE,QAAI,UAAU,KAAK,IAAI,cAAc,KAAK,UAAU,KAAK,aAAa,WAAW,KAAK,WAAW,KAAK,IAAI,CAAC;AAC3G,QAAI,KAAK,aAAa,UAAU;AAC/B,UAAI,QAAQ,cAAc,QAAQ,eAAe;AAChD,cAAM,WAAW,KAAK,IAAI,cAAc,QAAQ,aAAa;AAC7D,YAAI,SAAS,UAAU,SAAS,SAAS,KAAK;AAAM,oBAAU;AAAA,MAC/D;AACA,UAAI,CAAC,KAAK,SAAS;AAAW,cAAM,IAAI,MAAM,GAAG,KAAK,uCAAuC;AAC7F,UAAI,CAAC,CAAC,gBAAgB,gBAAgB,gBAAgB,EAAE,SAAS,QAAQ,EAAE,GAAG;AAC7E,gBAAQ,YAAY,KAAK,QAAQ;AAAA,MAClC;AACA,cAAQ,WAAW,KAAK;AAAA,IACzB;AACA,YAAQ,WAAW,KAAK;AAExB,YAAQ,WAAW,KAAK;AACxB,YAAQ,kBAAkB;AAC1B,WAAO;AAAA,EACR;AAAA,EAEA,UAAU,MAAkB,SAAkB;AAC7C,UAAM,SAAS,KAAK,IAAI,WAAW,IAAI,QAAQ;AAC/C,QAAI,KAAK,aAAa,UAAU;AAC/B,WAAK,OAAO,aAAa,WAAW;AAAA,IACrC,WAAW,KAAK,OAAO,OAAO;AAC7B,WAAK,OAAO,MAAM,KAAK,MAAM,OAAO,SAAS,SAAS,MAAM;AAAA,IAC7D,WAAW,KAAK,OAAO,QAAQ;AAC9B,cAAQ,KAAK,MAAM,QAAQ;AAAA,QAC3B,KAAK;AACJ,eAAK,OAAO,KAAK,QAAQ,OAAO,SAAS,SAAS,MAAM;AACxD;AAAA,QACD,KAAK;AACJ,kBAAQ,KAAK,iBAAiB,SAAS,mBAAmB,SAAS,IAAI;AACvE;AAAA,QACD,KAAK;AACJ,gBAAM,SAA4B,CAAC;AACnC,cAAI;AACJ,eAAK,KAAK,QAAQ,QAAQ;AACzB,gBAAI,QAAQ,OAAO,CAAC,IAAI,GAAG;AAC1B,qBAAO,CAAC,IAAI;AAAA,YACb;AAAA,UACD;AACA,kBAAQ,SAAS,MAAM;AACvB,eAAK,OAAO,IAAI,uBAAuB,SAAS,WAAW;AAC3D;AAAA,QACD,KAAK;AACJ,kBAAQ,YAAY,YAAY,SAAS,MAAM;AAC/C;AAAA,QACD,KAAK;AACJ,kBAAQ,YAAY,eAAe,SAAS,MAAM;AAClD;AAAA,QACD,KAAK;AACJ,cAAI,QAAQ,QAAQ,OAAO,GAAG;AAC7B,iBAAK,OAAO,KAAK,QAAQ,OAAO,SAAS,SAAS,MAAM;AAAA,UACzD,OAAO;AACN,iBAAK,OAAO,MAAM,EAAC,KAAK,EAAC,GAAG,SAAS,SAAS,MAAM;AAAA,UACrD;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EAEA,kBAAkB,YAAoB;AACrC,WAAO,kBAAkB,IAAI,UAAU;AAAA,EACxC;AAAA,EAEA,eAEC,MAAS,OACD;AACR,UAAM,cAAc;AACpB,UAAM,OAAO;AACb,UAAM,oBAAoB,CAAC,aAAa,aAAa,MAAM,WAAW,QAAQ;AAC9E,QAAI,kBAAkB,QAAQ,OAAO,IAAI,IAAI,kBAAkB,QAAQ,OAAO,KAAK,GAAG;AACrF,aAAO;AAAA,IACR,WAAW,QAAQ,CAAC,SAAS,UAAU,GAAG;AACzC,aAAO;AAAA,IACR,WAAW,OAAO,SAAS,YAAY,OAAO,UAAU,UAAU;AACjE,aAAQ,OAAO;AAAA,IAChB,OAAO;AACN,aAAO;AAAA,IACR;AAAA,EACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQC,UACA,QAAiB,QAAiB,MAClC,mBAAmB,OACiB;AACpC,QAAI,OAAO,SAAS;AAAU,aAAO,KAAK,IAAI,cAAc,IAAI;AAEhE,QAAI,OAAO,SAAS,UAAU;AAC7B,YAAMC,aAAY;AAClB,aAAO,IAAI,eAAI,KAAK;AAAA,QACnB,WAAAA;AAAA,QACA,MAAM;AAAA,QACN,UAAU;AAAA,QACV,UAAU;AAAA,MACX,CAAC;AACD,WAAK,MAAM;AAAA,IACZ;AAEA,QAAI,CAAC,KAAK,kBAAmB,KAAK,mBAAmB,QAAQ,CAAC,KAAK,eAAe,KAAK,IAAI,GAAI;AAC9F,UAAI,CAAC,OAAO,YAAY,KAAK,MAAM,CAAC,gBAAgB,GAAG;AACtD,eAAO;AAAA,MACR;AAAA,IACD;AAEA,QAAI,KAAK;AAAM,aAAO,OAAO;AAC7B,QAAI,KAAK;AAAgB,aAAO,KAAK,eAAe,KAAK,KAAK,QAAQ,QAAQ,MAAM;AACpF,QAAI,KAAK,WAAW,SAAS;AAC5B,aAAO,OAAO;AAAA,IACf,WAAW,KAAK,QAAQ;AACvB,aAAO,KAAK;AAAA,IACb;AAEA,UAAM,WAAW,KAAK,OAAO,YAAY,IAAI;AAE7C,QAAI,YAAmC,KAAK;AAC5C,QAAI,KAAK,mBAAmB;AAC3B,kBAAY,KAAK,kBAAkB,KAAK,KAAK,QAAQ,QAAQ,QAAQ,IAAI;AAAA,IAC1E;AACA,QAAI,CAAC;AAAW,aAAO,cAAc,IAAI,SAAY;AACrD,gBAAY,KAAK,OAAO,cAAc,WAAW,CAAC;AAElD,QAAI;AACJ,QAAI,YAAY,KAAK,OAAO,SAAS,mBAAmB,QAAQ,QAAQ,MAAM,KAAK,aAAa,CAAC;AACjG,QAAI,KAAK,OAAO,OAAO,GAAG;AACzB,kBAAY,KAAK,OAAO,cAAc,WAAW,GAAG,CAAC;AACrD,iBAAW,CAAC,GAAG,IAAI,GAAG,GAAG,GAAG,CAAC;AAAA,IAC9B,OAAO;AACN,kBAAY,KAAK,OAAO,cAAc,WAAW,GAAG,CAAC;AACrD,UAAI,KAAK,OAAO,QAAQ,GAAG;AAC1B,mBAAW,CAAC,GAAG,IAAI,GAAG,GAAG,CAAC;AAAA,MAC3B,OAAO;AACN,mBAAW,CAAC,GAAG,IAAI,GAAG,GAAG,CAAC;AAAA,MAC3B;AAAA,IACD;AAEA,UAAM,UAAU,OAAO,eAAe,IAAI;AAC1C,YAAQ,OAAO,KAAK,YAAY;AAChC,QAAI,KAAK,aAAa,QAAW;AAChC,UAAI,WAAW;AACd,gBAAQ,OAAO,KAAK,OAAO,aAAa,GAAG,SAAS,SAAS,CAAC;AAAA,MAC/D;AAAA,IACD;AAEA,QAAI,QAAQ,MAAM;AACjB,cAAQ,OAAO,KAAK,OAAO,SAAS,eAAe,QAAQ,MAAM,IAAI;AAAA,IACtE;AAGA,gBAAY,KAAK,OAAO,SAAS,aAAa,QAAQ,QAAQ,MAAM,WAAW,IAAI;AAEnF,QAAI,CAAC;AAAW,aAAO;AACvB,gBAAY,KAAK,OAAO,cAAc,WAAW,CAAC;AAElD,QAAK,CAAC,OAAO,UAAU,SAAS,KAAK,KAAK,SAAW,KAAK,SAAS,KAAK,IAAI,MAAM,IAAI,KAAK,QAAQ,EAAE,OAAQ;AAC5G,kBAAY;AAAA,IACb;AAEA,QACC,YAAY,MAAM,OAAO,SAAS,IAAI,EAAE,SAAS,KAAK,IAAI,KAAK,OAAO,iBAAiB,KAAK,YAAY;AAAA,IAExG,CAAC,KAAK,YAAY,GAAG,KAAK,cAAc,KAAK,KAAK,cAAc,QAAQ,KAAK,oBAC5E;AACD,kBAAY;AAAA,IACb;AAEA,UAAM,QAAQ,OAAO;AAErB,UAAM,WAAW,KAAK,6BAA6B,WAAW,SAAS;AACvE,UAAM,WAAW,KAAK,6BAA6B,WAAW,SAAS;AAEvE,UAAM,aAAa,KAAK,aAAa;AACrC,QAAI,aAA6B,KAAK,0BAA0B,aAAa,QAAQ;AACrF,UAAM,cAA8B,KAAK,0BAA0B,aAAa,QAAQ;AAExF,UAAM,YAAY,EAAC,KAAK,OAAO,KAAK,OAAO,KAAK,OAAO,KAAK,OAAO,KAAK,MAAK;AAE7E,QAAI,YAAY,SAAS,OAAO,UAAU;AAC1C,QAAI,YAAY,SAAS,OAAO,WAAW;AAE3C,QAAI,0BAA0B,CAAC,CAAC,KAAK;AACrC,QAAI,0BAA0B,CAAC,CAAC,KAAK;AAErC,QAAI,QAAQ,MAAM;AACjB,gCAA0B;AAC1B,gCAA0B;AAAA,IAC3B;AACA,UAAM,kBAAkB,CAAC,EAAE,KAAK,mBAAoB,2BAA2B,YAAY;AAC3F,UAAM,kBAAkB,CAAC,EAAE,KAAK,mBAAoB,2BAA2B,YAAY;AAE3F,QAAI,iBAAiB;AACpB,WAAK,OAAO,MAAM,iCAAiC;AACnD,kBAAY;AAAA,IACb;AACA,QAAI,iBAAiB;AACpB,WAAK,OAAO,MAAM,iCAAiC;AACnD,kBAAY;AAAA,IACb;AAEA,QAAI,SAAS,SAAS,cAAc,YAAY,WAAW,GAAG,MAAM;AACpE,QAAI,UAAU,SAAS,cAAc,aAAa,WAAW,GAAG,MAAM;AAEtE,iBAAc,aAAa,aAAa,QAAQ;AAGhD,aAAS,KAAK,OAAO,SAAS,WAAW,UAAU,UAAU,GAAG,QAAQ,QAAQ,MAAM,MAAM;AAC5F,cAAU,KAAK,OAAO,SAAS,WAAW,UAAU,WAAW,GAAG,QAAQ,QAAQ,MAAM,OAAO;AAE/F,QAAI,KAAK,OAAO,OAAO,KAAK,CAAC,aAAa,cAAc,EAAE,SAAS,KAAK,EAAE,KAAK,gBAAgB,OAAO;AACrG,gBAAU,KAAK,OAAO,cAAc,KAAK,MAAM,UAAU,CAAC,GAAG,CAAC;AAAA,IAC/D;AAEA,UAAM,KAAK,KAAK,OAAO;AAGvB,UAAM,aAAa,GAAG,GAAG,GAAG,GAAG,IAAI,QAAQ,IAAI,CAAC,IAAI,YAAY,MAAM,IAAI,OAAO,IAAI,EAAE;AAGvF,WAAO,KAAK,aAAa,YAAY,QAAQ,QAAQ,MAAM,gBAAgB;AAAA,EAC5E;AAAA,EAEA,aACC,YAAoB,SAAkB,QAAiB,MAAkB,mBAAmB,OAC3F;AACD,UAAM,KAAK,KAAK,OAAO;AACvB,QAAI,CAAC,KAAK;AAAM,WAAK,OAAO;AAC5B,UAAM,OAAO,KAAK;AAElB,kBAAc;AAEd,QAAI,KAAK,WAAW;AAEnB,YAAM,iBAAiB,KAAK,mBAAmB,KAAK,OAAO,aAAa,eAAe,MAAM;AAC7F,WAAK,OAAO,MAAM,sBAAsB,cAAc;AACtD,mBAAa,KAAK,OAAO,OAAO,YAAY,cAAc;AAAA,IAC3D,WAAW,KAAK,iBAAiB,kBAAkB,KAAK,MAAM,GAAG;AAEhE,YAAM,eAAe,KAAK,OAAO,MAAM,IAAI,OAAO;AAClD,WAAK,OAAO,MAAM,2BAA2B,cAAc;AAC3D,mBAAa,KAAK,OAAO,OAAO,YAAY,YAAY;AAAA,IACzD;AAGA,iBAAa,KAAK,OAAO,SAAS,uBAAuB,SAAS,QAAQ,MAAM,UAAU;AAG1F,UAAM,SAAS,OAAO,eAAe,IAAI,EAAE;AAC3C,QAAI,QAAQ;AACX,mBAAa,GAAG,cAAc,KAAK,iBAAiB,KAAK,OAAO,OAAO,IAAI,MAAM,GAAG;AAAA,IACrF;AAGA,iBAAa,KAAK,OAAO,WAAW,UAAU;AAO9C,QAAI,SAAS,OAAO;AACnB,UAAI,OAAkC;AAEtC,YAAM,SAAS,KAAK,aAAa,QAAQ,QAAQ,IAAI,KAAK,QAAQ,SAAS,OAAO,IAAI,EAAE,SAAS,IAAI;AACrG,UAAI,QAAQ;AACX,eAAO;AAAA,MACR;AASA,UAAI,QAAQ,kBAAkB,WAAW;AACxC,YAAI,CAAC,QAAQ,oBAAoB,SAAS,IAAI,KAAK,KAAK,gBAAgB;AACvE,iBAAO,SAAS,IAAI,CAAC,MAAM,IAAI;AAC/B,eAAK,iBAAiB;AACtB,cAAI,QAAQ,QAAQ,SAAS,qBAAqB;AACjD,oBAAQ,oBAAoB,KAAK,IAAI;AAAA,UACtC;AAAA,QACD;AAAA,MACD,OAAO;AACN,YAAI,QAAQ,kBAAkB,QAAQ,QAAQ,SAAS,OAAO,IAAI,EAAE,SAAS,IAAI,GAAG;AACnF,iBAAO;AAAA,QACR;AACA,eAAO,KAAK,OAAO,SAAS,cAAc,SAAS,QAAQ,MAAM,IAAI;AAAA,MACtE;AAEA,mBAAa,KAAK,OAAO,OAAO,YAAY,IAAI;AAAA,IACjD;AAGA,QAAI,UAAU,OAAO,iBAAiB,IAAI;AAC1C,cAAU,KAAK,OAAO,cAAc,SAAS,IAAI,CAAC;AAClD,WAAO,eAAe,IAAI,EAAE,UAAU;AACtC,QAAI,UAAU,GAAG;AAChB,UAAI,CAAC;AAAkB,aAAK,OAAO,IAAI,mBAAmB,MAAM;AAEhE,eAAS,IAAI,GAAG,IAAI,SAAS,KAAK;AACjC,sBAAc;AAAA,MACf;AAAA,IACD;AACA,QAAI,UAAU,GAAG;AAChB,UAAI,CAAC;AAAkB,aAAK,OAAO,IAAI,aAAa,MAAM;AAE1D,eAAS,IAAI,GAAG,IAAI,SAAS,KAAK;AACjC,qBAAa,GAAG,aAAa,CAAC;AAAA,MAC/B;AAAA,IACD;AAEA,QAAI,UAAU,CAAC;AAAkB,WAAK,OAAO,IAAI,SAAS,MAAM;AAEhE,QAAI,QAAQ,WAAW,SAAS,KAAK,aAAa,cAAc,CAAC,QAAQ,WAAW,MAAM,GAAG;AAC5F,UAAI,KAAK,OAAO,MAAM,KAAK,KAAK,OAAO,UAAU;AAChD,qBAAa,KAAK,OAAO,OAAO,YAAY,GAAG;AAAA,MAChD;AAAA,IACD;AAGA,QAAI,KAAK,OAAO,QAAQ,KAAK,CAAC;AAAY,mBAAa;AAGvD,iBAAa,KAAK,OAAO,SAAS,gBAAgB,SAAS,QAAQ,MAAM,UAAU;AAEnF,QAAI,KAAK,mBAAmB,OAAO,eAAe,IAAI,EAAE,eAAe;AACtE,mBAAa,KAAK,OAAO,OAAO,YAAY,IAAI;AAChD,WAAK,OAAO,IAAI,YAAY,MAAM;AAAA,IACnC;AAGA,QAAI,KAAK,OAAO,QAAQ,KAAK,CAAC;AAAY,aAAO;AAGjD,WAAO,GAAG,YAAY,EAAE;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,mBAAmB,SAAkB,WAAmB;AACvD,UAAM,KAAK,KAAK,OAAO;AAEvB,UAAM,SAAS,QAAQ,cAAc,OAAO,QAAQ,OAAO,KAAK,CAAC;AACjE,UAAM,UAAU,QAAQ,cAAc,OAAO,QAAQ,OAAO,KAAK,CAAC;AAClE,UAAM,QAAQ,QAAQ;AACtB,UAAM,aAAa,GAAG,GAAG,GAAG,GAAG,IAAI,QAAQ,IAAI,CAAC,IAAI,YAAY,MAAM,IAAI,OAAO,IAAI,EAAE,IAAI;AAG3F,QAAI,SAAS,GAAG,YAAY,EAAE;AAC9B,aAAS,KAAK,OAAO,WAAW,MAAM;AACtC,WAAO,KAAK,IAAI,GAAG,MAAM;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA,EAOA,WAAW,SAAkB;AAC5B,UAAM,UAAU,QAAQ;AACxB,UAAM,OAAO,QAAQ,QAAQ;AAE7B,UAAM,UAAU,QAAQ,aAAa,KAAK,UAAQ,sBAAsB,KAAK,IAAI,CAAC;AAClF,UAAM,YAAY,WAAW,KAAK,IAAI,QAAQ,IAAI,OAAO;AAEzD,SAAK,KAAK,OAAO,OAAO,KAAK,KAAK,OAAO,UAAU,IAAI,kBAAkB,MAAM,WAAW,gBACzF,QAAQ,UAAU,aAAS,iBAAK,UAAU,YAAY,CAAC,KAAK,CAAC,KAAK,OAAO;AACzE,aAAO,UAAU;AAAA,IAClB;AAGA,QAAI,KAAK,gBAAgB,QAAQ,eAAe,KAAK,cAAc,QAAQ,MAAM;AAChF,aAAO,KAAK;AAAA,IACb;AACA,WAAO;AAAA,EACR;AAAA,EAEA,cAAc,SAAkB;AAC/B,QAAI,CAAC,uBAAuB,oBAAoB,EAAE,SAAS,QAAQ,YAAY,IAAI,KAClF,QAAQ,QAAQ,EAAE,OAAO,mBAAmB;AAC5C,aAAO;AAAA,IACR;AACA,WAAO;AAAA,EACR;AAAA,EAEA,WAAW,SAAkB;AAC5B,UAAM,YAAY,QAAQ,cAAc,QAAQ;AAChD,QAAI,CAAC;AAAW,aAAO;AAEvB,YAAQ,YAAY,WAAW,QAAQ,QAAQ,GAAG,IAAI;AAGtD,UAAM,UAAU,QAAQ;AACxB,eAAW,QAAQ,QAAQ,KAAK,SAAS;AACxC,UAAI,SAAS;AACZ,aAAK,aAAa;AAAA,MACnB,OAAO;AACN,aAAK,gBAAgB;AAAA,MACtB;AAAA,IACD;AAEA,SAAK,OAAO,SAAS,aAAa,OAAO;AACzC,WAAO;AAAA,EACR;AAAA,EAEA,gBAAgB,SAAkB;AACjC,QAAI,QAAQ,QAAQ,EAAE,SAAS,QAAQ,cAAc,KAAK,IAAI,QAAQ,GAAG;AACxE,aAAO;AAAA,IACR;AACA,WAAO,QAAQ;AAAA,EAChB;AAAA,EAEA,aAAa,SAAkB;AAC9B,QAAI,QAAQ,YAAY,CAAC,WAAW,WAAW,EAAE,SAAS,QAAQ,SAAS,QAAQ,WAAW,GAAG;AAChG,WAAK,OAAO,YAAY,OAAO,KAAK,IAAI,UAAU,IAAI,UAAU,GAAG,QAAQ,cAAc,OAAO;AAAA,IACjG;AAEA,UAAM,OAAO,QAAQ;AACrB,SAAK,OAAO,IAAI,iBAAiB,SAAS,IAAI;AAC9C,YAAQ,gBAAgB;AACxB,eAAW,QAAQ,QAAQ,KAAK,SAAS;AACxC,WAAK,kBAAkB;AAAA,IACxB;AACA,YAAQ,YAAY;AACpB,YAAQ,YAAY;AACpB,YAAQ,eAAe;AACvB,QAAI,QAAQ,QAAQ,gBAAgB,WAAW;AAC9C,YAAM,OAAO,QAAQ,QAAQ,OAAO,YAAY,aAAa;AAC7D,cAAQ,YAAY,QAAQ,QAAQ,KAAK,MAAM,MAAM,IAAI;AAAA,IAC1D;AACA,QAAI,QAAQ,QAAQ,SAAS,wBAAwB,SAAS,WAAW;AACxE,cAAQ,YAAY,qBAAqB,MAAM,IAAI;AACnD,cAAQ,YAAY,KAAK,MAAM,KAAK;AAAA,QACnC,IAAI,QAAQ,QAAQ,UAAU,IAAI,IAAI,QAAQ,IAAI,IAAI,IAAI,IAAI,KAAK,MAAM,QAAQ,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI;AAAA,MACvG,IAAI,QAAQ,QAAQ,MAAM,EAAE;AAC5B,YAAM,WAAW,QAAQ;AACzB,cAAQ,KAAK,YAAY,QAAQ,QAAQ,QAAQ;AACjD,cAAQ,QAAQ;AAChB,WAAK,OAAO,IAAI,SAAS,SAAS,QAAQ,WAAW,UAAU;AAAA,IAChE;AACA,SAAK,OAAO,SAAS,yBAAyB,OAAO;AAAA,EACtD;AAAA;AAGD;",
  "names": ["target", "zMove", "basePower"]
}
