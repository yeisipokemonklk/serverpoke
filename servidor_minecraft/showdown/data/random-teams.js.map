{
  "version": 3,
  "sources": ["../../../data/random-teams.ts"],
  "sourcesContent": ["import {Dex, toID} from '../sim/dex';\r\nimport {Utils} from '../lib';\r\nimport {PRNG, PRNGSeed} from '../sim/prng';\r\nimport {RuleTable} from '../sim/dex-formats';\r\nimport {Tags} from './tags';\r\n\r\nexport interface TeamData {\r\n\ttypeCount: {[k: string]: number};\r\n\ttypeComboCount: {[k: string]: number};\r\n\tbaseFormes: {[k: string]: number};\r\n\tmegaCount?: number;\r\n\tzCount?: number;\r\n\thas: {[k: string]: number};\r\n\tforceResult: boolean;\r\n\tweaknesses: {[k: string]: number};\r\n\tresistances: {[k: string]: number};\r\n\tweather?: string;\r\n\teeveeLimCount?: number;\r\n\tgigantamax?: boolean;\r\n}\r\nexport interface BattleFactorySpecies {\r\n\tflags: {limEevee?: 1};\r\n\tsets: BattleFactorySet[];\r\n}\r\ninterface BattleFactorySet {\r\n\tspecies: string;\r\n\titem: string;\r\n\tability: string;\r\n\tnature: string;\r\n\tmoves: string[];\r\n\tevs?: Partial<StatsTable>;\r\n\tivs?: Partial<StatsTable>;\r\n}\r\nexport class MoveCounter extends Utils.Multiset<string> {\r\n\tdamagingMoves: Set<Move>;\r\n\tironFist: number;\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.damagingMoves = new Set();\r\n\t\tthis.ironFist = 0;\r\n\t}\r\n\r\n\tget(key: string): number {\r\n\t\treturn super.get(key) || 0;\r\n\t}\r\n}\r\n\r\ntype MoveEnforcementChecker = (\r\n\tmovePool: string[], moves: Set<string>, abilities: Set<string>, types: string[],\r\n\tcounter: MoveCounter, species: Species, teamDetails: RandomTeamsTypes.TeamDetails,\r\n\tisLead: boolean, isDoubles: boolean, teraType: string, role: RandomTeamsTypes.Role,\r\n) => boolean;\r\n\r\n// Moves that restore HP:\r\nconst RECOVERY_MOVES = [\r\n\t'healorder', 'milkdrink', 'moonlight', 'morningsun', 'recover', 'roost', 'shoreup', 'slackoff', 'softboiled', 'strengthsap', 'synthesis',\r\n];\r\n// Moves that drop stats:\r\nconst CONTRARY_MOVES = [\r\n\t'armorcannon', 'closecombat', 'leafstorm', 'makeitrain', 'overheat', 'spinout', 'superpower', 'vcreate',\r\n];\r\n// Moves that boost Attack:\r\nconst PHYSICAL_SETUP = [\r\n\t'bellydrum', 'bulkup', 'coil', 'curse', 'dragondance', 'honeclaws', 'howl', 'meditate', 'poweruppunch', 'swordsdance', 'tidyup', 'victorydance',\r\n];\r\n// Moves which boost Special Attack:\r\nconst SPECIAL_SETUP = [\r\n\t'calmmind', 'chargebeam', 'geomancy', 'nastyplot', 'quiverdance', 'tailglow', 'torchsong',\r\n];\r\n// Moves that boost Attack AND Special Attack:\r\nconst MIXED_SETUP = [\r\n\t'clangoroussoul', 'growth', 'happyhour', 'holdhands', 'noretreat', 'shellsmash', 'workup',\r\n];\r\n// Some moves that only boost Speed:\r\nconst SPEED_SETUP = [\r\n\t'agility', 'autotomize', 'flamecharge', 'rockpolish', 'trailblaze',\r\n];\r\n// Conglomerate for ease of access\r\nconst SETUP = [\r\n\t'acidarmor', 'agility', 'autotomize', 'bellydrum', 'bulkup', 'calmmind', 'clangoroussoul', 'coil', 'cosmicpower', 'curse',\r\n\t'dragondance', 'flamecharge', 'growth', 'honeclaws', 'howl', 'irondefense', 'meditate', 'nastyplot', 'noretreat', 'poweruppunch',\r\n\t'quiverdance', 'rockpolish', 'shellsmash', 'shiftgear', 'swordsdance', 'tailglow', 'tidyup', 'trailblaze', 'workup', 'victorydance',\r\n];\r\nconst SPEED_CONTROL = [\r\n\t'electroweb', 'glare', 'icywind', 'lowsweep', 'quash', 'rocktomb', 'stringshot', 'tailwind', 'thunderwave', 'trickroom',\r\n];\r\n// Moves that shouldn't be the only STAB moves:\r\nconst NO_STAB = [\r\n\t'accelerock', 'aquajet', 'bounce', 'breakingswipe', 'bulletpunch', 'chatter', 'chloroblast', 'clearsmog', 'covet',\r\n\t'dragontail', 'doomdesire', 'electroweb', 'eruption', 'explosion', 'fakeout', 'feint', 'flamecharge', 'flipturn', 'futuresight',\r\n\t'grassyglide', 'iceshard', 'icywind', 'incinerate', 'infestation', 'machpunch', 'meteorbeam', 'mortalspin', 'nuzzle', 'pluck', 'pursuit',\r\n\t'quickattack', 'rapidspin', 'reversal', 'selfdestruct', 'shadowsneak', 'skydrop', 'snarl', 'strugglebug', 'suckerpunch', 'uturn',\r\n\t'vacuumwave', 'voltswitch', 'watershuriken', 'waterspout',\r\n];\r\n// Hazard-setting moves\r\nconst HAZARDS = [\r\n\t'spikes', 'stealthrock', 'stickyweb', 'toxicspikes',\r\n];\r\n// Protect and its variants\r\nconst PROTECT_MOVES = [\r\n\t'banefulbunker', 'burningbulwark', 'protect', 'silktrap', 'spikyshield',\r\n];\r\n// Moves that switch the user out\r\nconst PIVOT_MOVES = [\r\n\t'chillyreception', 'flipturn', 'partingshot', 'shedtail', 'teleport', 'uturn', 'voltswitch',\r\n];\r\n\r\n// Moves that should be paired together when possible\r\nconst MOVE_PAIRS = [\r\n\t['lightscreen', 'reflect'],\r\n\t['sleeptalk', 'rest'],\r\n\t['protect', 'wish'],\r\n\t['leechseed', 'protect'],\r\n\t['leechseed', 'substitute'],\r\n];\r\n\r\n/** Pokemon who always want priority STAB, and are fine with it as its only STAB move of that type */\r\nconst PRIORITY_POKEMON = [\r\n\t'breloom', 'brutebonnet', 'honchkrow', 'mimikyu', 'scizor',\r\n];\r\n\r\n/** Pokemon who should never be in the lead slot */\r\nconst NO_LEAD_POKEMON = [\r\n\t'Iron Boulder', 'Slither Wing', 'Zacian', 'Zamazenta',\r\n];\r\nconst DOUBLES_NO_LEAD_POKEMON = [\r\n\t'Basculegion', 'Houndstone', 'Roaring Moon', 'Zacian', 'Zamazenta',\r\n];\r\n\r\nconst DEFENSIVE_TERA_BLAST_USERS = [\r\n\t'alcremie', 'bellossom', 'comfey', 'florges',\r\n];\r\n\r\nfunction sereneGraceBenefits(move: Move) {\r\n\treturn move.secondary?.chance && move.secondary.chance > 20 && move.secondary.chance < 100;\r\n}\r\n\r\nexport class RandomTeams {\r\n\tdex: ModdedDex;\r\n\tgen: number;\r\n\tfactoryTier: string;\r\n\tformat: Format;\r\n\tprng: PRNG;\r\n\tnoStab: string[];\r\n\treadonly maxTeamSize: number;\r\n\treadonly adjustLevel: number | null;\r\n\treadonly maxMoveCount: number;\r\n\treadonly forceMonotype: string | undefined;\r\n\treadonly forceTeraType: string | undefined;\r\n\r\n\t/**\r\n\t * Checkers for move enforcement based on types or other factors\r\n\t *\r\n\t * returns true to try to force the move type, false otherwise.\r\n\t */\r\n\tmoveEnforcementCheckers: {[k: string]: MoveEnforcementChecker};\r\n\r\n\tconstructor(format: Format | string, prng: PRNG | PRNGSeed | null) {\r\n\t\tformat = Dex.formats.get(format);\r\n\t\tthis.dex = Dex.forFormat(format);\r\n\t\tthis.gen = this.dex.gen;\r\n\t\tthis.noStab = NO_STAB;\r\n\r\n\t\tconst ruleTable = Dex.formats.getRuleTable(format);\r\n\t\tthis.maxTeamSize = ruleTable.maxTeamSize;\r\n\t\tthis.adjustLevel = ruleTable.adjustLevel;\r\n\t\tthis.maxMoveCount = ruleTable.maxMoveCount;\r\n\t\tconst forceMonotype = ruleTable.valueRules.get('forcemonotype');\r\n\t\tthis.forceMonotype = forceMonotype && this.dex.types.get(forceMonotype).exists ?\r\n\t\t\tthis.dex.types.get(forceMonotype).name : undefined;\r\n\t\tconst forceTeraType = ruleTable.valueRules.get('forceteratype');\r\n\t\tthis.forceTeraType = forceTeraType && this.dex.types.get(forceTeraType).exists ?\r\n\t\t\tthis.dex.types.get(forceTeraType).name : undefined;\r\n\r\n\t\tthis.factoryTier = '';\r\n\t\tthis.format = format;\r\n\t\tthis.prng = prng && !Array.isArray(prng) ? prng : new PRNG(prng);\r\n\r\n\t\tthis.moveEnforcementCheckers = {\r\n\t\t\tBug: (movePool, moves, abilities, types, counter) => (\r\n\t\t\t\tmovePool.includes('megahorn') || movePool.includes('xscissor') ||\r\n\t\t\t\t(!counter.get('Bug') && types.includes('Electric'))\r\n\t\t\t),\r\n\t\t\tDark: (movePool, moves, abilities, types, counter) => !counter.get('Dark'),\r\n\t\t\tDragon: (movePool, moves, abilities, types, counter) => !counter.get('Dragon'),\r\n\t\t\tElectric: (movePool, moves, abilities, types, counter) => !counter.get('Electric'),\r\n\t\t\tFairy: (movePool, moves, abilities, types, counter) => !counter.get('Fairy'),\r\n\t\t\tFighting: (movePool, moves, abilities, types, counter) => !counter.get('Fighting'),\r\n\t\t\tFire: (movePool, moves, abilities, types, counter, species) => !counter.get('Fire'),\r\n\t\t\tFlying: (movePool, moves, abilities, types, counter) => !counter.get('Flying'),\r\n\t\t\tGhost: (movePool, moves, abilities, types, counter) => !counter.get('Ghost'),\r\n\t\t\tGrass: (movePool, moves, abilities, types, counter, species) => (\r\n\t\t\t\t!counter.get('Grass') && (\r\n\t\t\t\t\tmovePool.includes('leafstorm') || species.baseStats.atk >= 100 ||\r\n\t\t\t\t\ttypes.includes('Electric') || abilities.has('Seed Sower')\r\n\t\t\t\t)\r\n\t\t\t),\r\n\t\t\tGround: (movePool, moves, abilities, types, counter) => !counter.get('Ground'),\r\n\t\t\tIce: (movePool, moves, abilities, types, counter) => (\r\n\t\t\t\tmovePool.includes('freezedry') || movePool.includes('blizzard') || !counter.get('Ice')\r\n\t\t\t),\r\n\t\t\tNormal: (movePool, moves, types, counter) => (movePool.includes('boomburst') || movePool.includes('hypervoice')),\r\n\t\t\tPoison: (movePool, moves, abilities, types, counter) => {\r\n\t\t\t\tif (types.includes('Ground')) return false;\r\n\t\t\t\treturn !counter.get('Poison');\r\n\t\t\t},\r\n\t\t\tPsychic: (movePool, moves, abilities, types, counter, species, teamDetails, isLead, isDoubles) => {\r\n\t\t\t\tif (counter.get('Psychic')) return false;\r\n\t\t\t\tif (movePool.includes('calmmind') || abilities.has('Strong Jaw')) return true;\r\n\t\t\t\tif (isDoubles && movePool.includes('psychicfangs')) return true;\r\n\t\t\t\treturn abilities.has('Psychic Surge') || ['Electric', 'Fighting', 'Fire', 'Grass', 'Poison'].some(m => types.includes(m));\r\n\t\t\t},\r\n\t\t\tRock: (movePool, moves, abilities, types, counter, species) => !counter.get('Rock') && species.baseStats.atk >= 80,\r\n\t\t\tSteel: (movePool, moves, abilities, types, counter, species, teamDetails, isLead, isDoubles) => (\r\n\t\t\t\t!counter.get('Steel') &&\r\n\t\t\t\t(isDoubles || species.baseStats.atk >= 90 || movePool.includes('gigatonhammer') || movePool.includes('makeitrain'))\r\n\t\t\t),\r\n\t\t\tWater: (movePool, moves, abilities, types, counter) => (!counter.get('Water') && !types.includes('Ground')),\r\n\t\t};\r\n\t}\r\n\r\n\tsetSeed(prng?: PRNG | PRNGSeed) {\r\n\t\tthis.prng = prng && !Array.isArray(prng) ? prng : new PRNG(prng);\r\n\t}\r\n\r\n\tgetTeam(options?: PlayerOptions | null): PokemonSet[] {\r\n\t\tconst generatorName = (\r\n\t\t\ttypeof this.format.team === 'string' && this.format.team.startsWith('random')\r\n\t\t ) ? this.format.team + 'Team' : '';\r\n\t\t// @ts-ignore\r\n\t\treturn this[generatorName || 'randomTeam'](options);\r\n\t}\r\n\r\n\trandomChance(numerator: number, denominator: number) {\r\n\t\treturn this.prng.randomChance(numerator, denominator);\r\n\t}\r\n\r\n\tsample<T>(items: readonly T[]): T {\r\n\t\treturn this.prng.sample(items);\r\n\t}\r\n\r\n\tsampleIfArray<T>(item: T | T[]): T {\r\n\t\tif (Array.isArray(item)) {\r\n\t\t\treturn this.sample(item);\r\n\t\t}\r\n\t\treturn item;\r\n\t}\r\n\r\n\trandom(m?: number, n?: number) {\r\n\t\treturn this.prng.next(m, n);\r\n\t}\r\n\r\n\t/**\r\n\t * Remove an element from an unsorted array significantly faster\r\n\t * than .splice\r\n\t */\r\n\tfastPop(list: any[], index: number) {\r\n\t\t// If an array doesn't need to be in order, replacing the\r\n\t\t// element at the given index with the removed element\r\n\t\t// is much, much faster than using list.splice(index, 1).\r\n\t\tconst length = list.length;\r\n\t\tif (index < 0 || index >= list.length) {\r\n\t\t\t// sanity check\r\n\t\t\tthrow new Error(`Index ${index} out of bounds for given array`);\r\n\t\t}\r\n\r\n\t\tconst element = list[index];\r\n\t\tlist[index] = list[length - 1];\r\n\t\tlist.pop();\r\n\t\treturn element;\r\n\t}\r\n\r\n\t/**\r\n\t * Remove a random element from an unsorted array and return it.\r\n\t * Uses the battle's RNG if in a battle.\r\n\t */\r\n\tsampleNoReplace(list: any[]) {\r\n\t\tconst length = list.length;\r\n\t\tif (length === 0) return null;\r\n\t\tconst index = this.random(length);\r\n\t\treturn this.fastPop(list, index);\r\n\t}\r\n\r\n\t/**\r\n\t * Removes n random elements from an unsorted array and returns them.\r\n\t * If n is less than the array's length, randomly removes and returns all the elements\r\n\t * in the array (so the returned array could have length < n).\r\n\t */\r\n\tmultipleSamplesNoReplace<T>(list: T[], n: number): T[] {\r\n\t\tconst samples = [];\r\n\t\twhile (samples.length < n && list.length) {\r\n\t\t\tsamples.push(this.sampleNoReplace(list));\r\n\t\t}\r\n\r\n\t\treturn samples;\r\n\t}\r\n\r\n\t/**\r\n\t * Check if user has directly tried to ban/unban/restrict things in a custom battle.\r\n\t * Doesn't count bans nested inside other formats/rules.\r\n\t */\r\n\tprivate hasDirectCustomBanlistChanges() {\r\n\t\tif (this.format.banlist.length || this.format.restricted.length || this.format.unbanlist.length) return true;\r\n\t\tif (!this.format.customRules) return false;\r\n\t\tfor (const rule of this.format.customRules) {\r\n\t\t\tfor (const banlistOperator of ['-', '+', '*']) {\r\n\t\t\t\tif (rule.startsWith(banlistOperator)) return true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Inform user when custom bans are unsupported in a team generator.\r\n\t */\r\n\tprotected enforceNoDirectCustomBanlistChanges() {\r\n\t\tif (this.hasDirectCustomBanlistChanges()) {\r\n\t\t\tthrow new Error(`Custom bans are not currently supported in ${this.format.name}.`);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inform user when complex bans are unsupported in a team generator.\r\n\t */\r\n\tprotected enforceNoDirectComplexBans() {\r\n\t\tif (!this.format.customRules) return false;\r\n\t\tfor (const rule of this.format.customRules) {\r\n\t\t\tif (rule.includes('+') && !rule.startsWith('+')) {\r\n\t\t\t\tthrow new Error(`Complex bans are not currently supported in ${this.format.name}.`);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validate set element pool size is sufficient to support size requirements after simple bans.\r\n\t */\r\n\tprivate enforceCustomPoolSizeNoComplexBans(\r\n\t\teffectTypeName: string,\r\n\t\tbasicEffectPool: BasicEffect[],\r\n\t\trequiredCount: number,\r\n\t\trequiredCountExplanation: string\r\n\t) {\r\n\t\tif (basicEffectPool.length >= requiredCount) return;\r\n\t\tthrow new Error(`Legal ${effectTypeName} count is insufficient to support ${requiredCountExplanation} (${basicEffectPool.length} / ${requiredCount}).`);\r\n\t}\r\n\r\n\tqueryMoves(\r\n\t\tmoves: Set<string> | null,\r\n\t\tspecies: Species,\r\n\t\tteraType: string,\r\n\t\tabilities: Set<string> = new Set(),\r\n\t): MoveCounter {\r\n\t\t// This is primarily a helper function for random setbuilder functions.\r\n\t\tconst counter = new MoveCounter();\r\n\t\tconst types = species.types;\r\n\t\tif (!moves?.size) return counter;\r\n\r\n\t\tconst categories = {Physical: 0, Special: 0, Status: 0};\r\n\r\n\t\t// Iterate through all moves we've chosen so far and keep track of what they do:\r\n\t\tfor (const moveid of moves) {\r\n\t\t\tconst move = this.dex.moves.get(moveid);\r\n\r\n\t\t\tconst moveType = this.getMoveType(move, species, abilities, teraType);\r\n\t\t\tif (move.damage || move.damageCallback) {\r\n\t\t\t\t// Moves that do a set amount of damage:\r\n\t\t\t\tcounter.add('damage');\r\n\t\t\t\tcounter.damagingMoves.add(move);\r\n\t\t\t} else {\r\n\t\t\t\t// Are Physical/Special/Status moves:\r\n\t\t\t\tcategories[move.category]++;\r\n\t\t\t}\r\n\t\t\t// Moves that have a low base power:\r\n\t\t\tif (moveid === 'lowkick' || (move.basePower && move.basePower <= 60 && moveid !== 'rapidspin')) {\r\n\t\t\t\tcounter.add('technician');\r\n\t\t\t}\r\n\t\t\t// Moves that hit up to 5 times:\r\n\t\t\tif (move.multihit && Array.isArray(move.multihit) && move.multihit[1] === 5) counter.add('skilllink');\r\n\t\t\tif (move.recoil || move.hasCrashDamage) counter.add('recoil');\r\n\t\t\tif (move.drain) counter.add('drain');\r\n\t\t\t// Moves which have a base power:\r\n\t\t\tif (move.basePower || move.basePowerCallback) {\r\n\t\t\t\tif (!this.noStab.includes(moveid) || PRIORITY_POKEMON.includes(species.id) && move.priority > 0) {\r\n\t\t\t\t\tcounter.add(moveType);\r\n\t\t\t\t\tif (types.includes(moveType)) counter.add('stab');\r\n\t\t\t\t\tif (teraType === moveType) counter.add('stabtera');\r\n\t\t\t\t\tcounter.damagingMoves.add(move);\r\n\t\t\t\t}\r\n\t\t\t\tif (move.flags['bite']) counter.add('strongjaw');\r\n\t\t\t\tif (move.flags['punch']) counter.ironFist++;\r\n\t\t\t\tif (move.flags['sound']) counter.add('sound');\r\n\t\t\t\tif (move.priority > 0 || (moveid === 'grassyglide' && abilities.has('Grassy Surge'))) {\r\n\t\t\t\t\tcounter.add('priority');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Moves with secondary effects:\r\n\t\t\tif (move.secondary || move.hasSheerForce) {\r\n\t\t\t\tcounter.add('sheerforce');\r\n\t\t\t\tif (sereneGraceBenefits(move)) {\r\n\t\t\t\t\tcounter.add('serenegrace');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Moves with low accuracy:\r\n\t\t\tif (move.accuracy && move.accuracy !== true && move.accuracy < 90) counter.add('inaccurate');\r\n\r\n\t\t\t// Moves that change stats:\r\n\t\t\tif (RECOVERY_MOVES.includes(moveid)) counter.add('recovery');\r\n\t\t\tif (CONTRARY_MOVES.includes(moveid)) counter.add('contrary');\r\n\t\t\tif (PHYSICAL_SETUP.includes(moveid)) counter.add('physicalsetup');\r\n\t\t\tif (SPECIAL_SETUP.includes(moveid)) counter.add('specialsetup');\r\n\t\t\tif (MIXED_SETUP.includes(moveid)) counter.add('mixedsetup');\r\n\t\t\tif (SPEED_SETUP.includes(moveid)) counter.add('speedsetup');\r\n\t\t\tif (SETUP.includes(moveid)) counter.add('setup');\r\n\t\t\tif (HAZARDS.includes(moveid)) counter.add('hazards');\r\n\t\t}\r\n\r\n\t\tcounter.set('Physical', Math.floor(categories['Physical']));\r\n\t\tcounter.set('Special', Math.floor(categories['Special']));\r\n\t\tcounter.set('Status', categories['Status']);\r\n\t\treturn counter;\r\n\t}\r\n\r\n\tcullMovePool(\r\n\t\ttypes: string[],\r\n\t\tmoves: Set<string>,\r\n\t\tabilities: Set<string>,\r\n\t\tcounter: MoveCounter,\r\n\t\tmovePool: string[],\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species,\r\n\t\tisLead: boolean,\r\n\t\tisDoubles: boolean,\r\n\t\tteraType: string,\r\n\t\trole: RandomTeamsTypes.Role,\r\n\t): void {\r\n\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\r\n\t\t// If we have two unfilled moves and only one unpaired move, cull the unpaired move.\r\n\t\tif (moves.size === this.maxMoveCount - 2) {\r\n\t\t\tconst unpairedMoves = [...movePool];\r\n\t\t\tfor (const pair of MOVE_PAIRS) {\r\n\t\t\t\tif (movePool.includes(pair[0]) && movePool.includes(pair[1])) {\r\n\t\t\t\t\tthis.fastPop(unpairedMoves, unpairedMoves.indexOf(pair[0]));\r\n\t\t\t\t\tthis.fastPop(unpairedMoves, unpairedMoves.indexOf(pair[1]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (unpairedMoves.length === 1) {\r\n\t\t\t\tthis.fastPop(movePool, movePool.indexOf(unpairedMoves[0]));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// These moves are paired, and shouldn't appear if there is not room for them both.\r\n\t\tif (moves.size === this.maxMoveCount - 1) {\r\n\t\t\tfor (const pair of MOVE_PAIRS) {\r\n\t\t\t\tif (movePool.includes(pair[0]) && movePool.includes(pair[1])) {\r\n\t\t\t\t\tthis.fastPop(movePool, movePool.indexOf(pair[0]));\r\n\t\t\t\t\tthis.fastPop(movePool, movePool.indexOf(pair[1]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Develop additional move lists\r\n\t\tconst statusMoves = this.dex.moves.all()\r\n\t\t\t.filter(move => move.category === 'Status')\r\n\t\t\t.map(move => move.id);\r\n\r\n\t\t// Team-based move culls\r\n\t\tif (teamDetails.screens && movePool.length >= this.maxMoveCount + 2) {\r\n\t\t\tif (movePool.includes('reflect')) this.fastPop(movePool, movePool.indexOf('reflect'));\r\n\t\t\tif (movePool.includes('lightscreen')) this.fastPop(movePool, movePool.indexOf('lightscreen'));\r\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\r\n\t\t}\r\n\t\tif (teamDetails.stickyWeb) {\r\n\t\t\tif (movePool.includes('stickyweb')) this.fastPop(movePool, movePool.indexOf('stickyweb'));\r\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\r\n\t\t}\r\n\t\tif (teamDetails.stealthRock) {\r\n\t\t\tif (movePool.includes('stealthrock')) this.fastPop(movePool, movePool.indexOf('stealthrock'));\r\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\r\n\t\t}\r\n\t\tif (teamDetails.defog || teamDetails.rapidSpin) {\r\n\t\t\tif (movePool.includes('defog')) this.fastPop(movePool, movePool.indexOf('defog'));\r\n\t\t\tif (movePool.includes('rapidspin')) this.fastPop(movePool, movePool.indexOf('rapidspin'));\r\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\r\n\t\t}\r\n\t\tif (teamDetails.toxicSpikes) {\r\n\t\t\tif (movePool.includes('toxicspikes')) this.fastPop(movePool, movePool.indexOf('toxicspikes'));\r\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\r\n\t\t}\r\n\t\tif (teamDetails.spikes && teamDetails.spikes >= 2) {\r\n\t\t\tif (movePool.includes('spikes')) this.fastPop(movePool, movePool.indexOf('spikes'));\r\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\r\n\t\t}\r\n\r\n\t\tif (isDoubles) {\r\n\t\t\tconst doublesIncompatiblePairs = [\r\n\t\t\t\t// In order of decreasing generalizability\r\n\t\t\t\t[SPEED_CONTROL, SPEED_CONTROL],\r\n\t\t\t\t[HAZARDS, HAZARDS],\r\n\t\t\t\t['rockslide', 'stoneedge'],\r\n\t\t\t\t[SETUP, ['fakeout', 'helpinghand']],\r\n\t\t\t\t[PROTECT_MOVES, 'wideguard'],\r\n\t\t\t\t[['fierydance', 'fireblast'], 'heatwave'],\r\n\t\t\t\t['dazzlinggleam', ['fleurcannon', 'moonblast']],\r\n\t\t\t\t['poisongas', ['toxicspikes', 'willowisp']],\r\n\t\t\t\t[RECOVERY_MOVES, 'healpulse'],\r\n\t\t\t\t['lifedew', 'healpulse'],\r\n\t\t\t\t['haze', 'icywind'],\r\n\t\t\t\t[['hydropump', 'muddywater'], ['muddywater', 'scald']],\r\n\t\t\t\t['disable', 'encore'],\r\n\t\t\t\t['freezedry', 'icebeam'],\r\n\t\t\t\t['energyball', 'leafstorm'],\r\n\t\t\t\t['wildcharge', 'thunderbolt'],\r\n\t\t\t\t['earthpower', 'sandsearstorm'],\r\n\t\t\t\t['coaching', ['helpinghand', 'howl']],\r\n\t\t\t];\r\n\r\n\t\t\tfor (const pair of doublesIncompatiblePairs) this.incompatibleMoves(moves, movePool, pair[0], pair[1]);\r\n\r\n\t\t\tif (role !== 'Offensive Protect') this.incompatibleMoves(moves, movePool, PROTECT_MOVES, ['flipturn', 'uturn']);\r\n\t\t}\r\n\r\n\t\t// General incompatibilities\r\n\t\tconst incompatiblePairs = [\r\n\t\t\t// These moves don't mesh well with other aspects of the set\r\n\t\t\t[statusMoves, ['healingwish', 'switcheroo', 'trick']],\r\n\t\t\t[SETUP, PIVOT_MOVES],\r\n\t\t\t[SETUP, HAZARDS],\r\n\t\t\t[SETUP, ['defog', 'nuzzle', 'toxic', 'waterspout', 'yawn', 'haze']],\r\n\t\t\t[PHYSICAL_SETUP, PHYSICAL_SETUP],\r\n\t\t\t[SPECIAL_SETUP, 'thunderwave'],\r\n\t\t\t['substitute', PIVOT_MOVES],\r\n\t\t\t[SPEED_SETUP, ['aquajet', 'rest', 'trickroom']],\r\n\t\t\t['curse', ['irondefense', 'rapidspin']],\r\n\t\t\t['dragondance', 'dracometeor'],\r\n\r\n\t\t\t// These attacks are redundant with each other\r\n\t\t\t[['psychic', 'psychicnoise'], ['psyshock', 'psychicnoise']],\r\n\t\t\t['surf', 'hydropump'],\r\n\t\t\t['liquidation', 'wavecrash'],\r\n\t\t\t['aquajet', 'flipturn'],\r\n\t\t\t['gigadrain', 'leafstorm'],\r\n\t\t\t['powerwhip', 'hornleech'],\r\n\t\t\t[['airslash', 'bravebird', 'hurricane'], ['airslash', 'bravebird', 'hurricane']],\r\n\t\t\t['knockoff', 'foulplay'],\r\n\t\t\t['throatchop', ['crunch', 'lashout']],\r\n\t\t\t['doubleedge', ['bodyslam', 'headbutt']],\r\n\t\t\t['fireblast', ['fierydance', 'flamethrower']],\r\n\t\t\t['lavaplume', 'magmastorm'],\r\n\t\t\t['thunderpunch', 'wildcharge'],\r\n\t\t\t['gunkshot', ['direclaw', 'poisonjab', 'sludgebomb']],\r\n\t\t\t['aurasphere', 'focusblast'],\r\n\t\t\t['closecombat', 'drainpunch'],\r\n\t\t\t['bugbite', 'pounce'],\r\n\t\t\t[['dragonpulse', 'spacialrend'], 'dracometeor'],\r\n\t\t\t['alluringvoice', 'dazzlinggleam'],\r\n\r\n\t\t\t// These status moves are redundant with each other\r\n\t\t\t['taunt', 'disable'],\r\n\t\t\t['toxic', ['willowisp', 'thunderwave']],\r\n\t\t\t[['thunderwave', 'toxic', 'willowisp'], 'toxicspikes'],\r\n\r\n\t\t\t// This space reserved for assorted hardcodes that otherwise make little sense out of context\r\n\t\t\t// Landorus and Thundurus\r\n\t\t\t['nastyplot', ['rockslide', 'knockoff']],\r\n\t\t\t// Persian\r\n\t\t\t['switcheroo', 'fakeout'],\r\n\t\t\t// Beartic\r\n\t\t\t['snowscape', 'swordsdance'],\r\n\t\t\t// Magnezone\r\n\t\t\t['bodypress', 'mirrorcoat'],\r\n\t\t\t// Amoonguss, though this can work well as a general rule later\r\n\t\t\t['toxic', 'clearsmog'],\r\n\t\t\t// Chansey and Blissey\r\n\t\t\t['healbell', 'stealthrock'],\r\n\t\t\t// Azelf and Zoroarks\r\n\t\t\t['trick', 'uturn'],\r\n\t\t\t// Araquanid\r\n\t\t\t['mirrorcoat', 'hydropump'],\r\n\t\t];\r\n\r\n\t\tfor (const pair of incompatiblePairs) this.incompatibleMoves(moves, movePool, pair[0], pair[1]);\r\n\r\n\t\tif (!types.includes('Ice')) this.incompatibleMoves(moves, movePool, 'icebeam', 'icywind');\r\n\r\n\t\tif (!isDoubles) this.incompatibleMoves(moves, movePool, ['taunt', 'strengthsap'], 'encore');\r\n\r\n\t\tif (!types.includes('Dark') && teraType !== 'Dark') this.incompatibleMoves(moves, movePool, 'knockoff', 'suckerpunch');\r\n\r\n\t\tif (!abilities.has('Prankster')) this.incompatibleMoves(moves, movePool, 'thunderwave', 'yawn');\r\n\r\n\t\t// This space reserved for assorted hardcodes that otherwise make little sense out of context\r\n\t\tif (species.id === 'cyclizar') this.incompatibleMoves(moves, movePool, 'taunt', 'knockoff');\r\n\t\tif (species.id === 'mesprit') this.incompatibleMoves(moves, movePool, 'healingwish', 'uturn');\r\n\t\tif (species.id === 'camerupt') this.incompatibleMoves(moves, movePool, 'roar', 'willowisp');\r\n\t}\r\n\r\n\t// Checks for and removes incompatible moves, starting with the first move in movesA.\r\n\tincompatibleMoves(\r\n\t\tmoves: Set<string>,\r\n\t\tmovePool: string[],\r\n\t\tmovesA: string | string[],\r\n\t\tmovesB: string | string[],\r\n\t): void {\r\n\t\tconst moveArrayA = (Array.isArray(movesA)) ? movesA : [movesA];\r\n\t\tconst moveArrayB = (Array.isArray(movesB)) ? movesB : [movesB];\r\n\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\r\n\t\tfor (const moveid1 of moves) {\r\n\t\t\tif (moveArrayB.includes(moveid1)) {\r\n\t\t\t\tfor (const moveid2 of moveArrayA) {\r\n\t\t\t\t\tif (moveid1 !== moveid2 && movePool.includes(moveid2)) {\r\n\t\t\t\t\t\tthis.fastPop(movePool, movePool.indexOf(moveid2));\r\n\t\t\t\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (moveArrayA.includes(moveid1)) {\r\n\t\t\t\tfor (const moveid2 of moveArrayB) {\r\n\t\t\t\t\tif (moveid1 !== moveid2 && movePool.includes(moveid2)) {\r\n\t\t\t\t\t\tthis.fastPop(movePool, movePool.indexOf(moveid2));\r\n\t\t\t\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Adds a move to the moveset, returns the MoveCounter\r\n\taddMove(\r\n\t\tmove: string,\r\n\t\tmoves: Set<string>,\r\n\t\ttypes: string[],\r\n\t\tabilities: Set<string>,\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species,\r\n\t\tisLead: boolean,\r\n\t\tisDoubles: boolean,\r\n\t\tmovePool: string[],\r\n\t\tteraType: string,\r\n\t\trole: RandomTeamsTypes.Role,\r\n\t): MoveCounter {\r\n\t\tmoves.add(move);\r\n\t\tthis.fastPop(movePool, movePool.indexOf(move));\r\n\t\tconst counter = this.queryMoves(moves, species, teraType, abilities);\r\n\t\tthis.cullMovePool(types, moves, abilities, counter, movePool, teamDetails, species, isLead, isDoubles, teraType, role);\r\n\t\treturn counter;\r\n\t}\r\n\r\n\t// Returns the type of a given move for STAB/coverage enforcement purposes\r\n\tgetMoveType(move: Move, species: Species, abilities: Set<string>, teraType: string): string {\r\n\t\tif (move.id === 'terablast') return teraType;\r\n\t\tif (['judgment', 'revelationdance'].includes(move.id)) return species.types[0];\r\n\r\n\t\tif (move.name === \"Raging Bull\" && species.name.startsWith(\"Tauros-Paldea\")) {\r\n\t\t\tif (species.name.endsWith(\"Combat\")) return \"Fighting\";\r\n\t\t\tif (species.name.endsWith(\"Blaze\")) return \"Fire\";\r\n\t\t\tif (species.name.endsWith(\"Aqua\")) return \"Water\";\r\n\t\t}\r\n\r\n\t\tif (move.name === \"Ivy Cudgel\" && species.name.startsWith(\"Ogerpon\")) {\r\n\t\t\tif (species.name.endsWith(\"Wellspring\")) return \"Water\";\r\n\t\t\tif (species.name.endsWith(\"Hearthflame\")) return \"Fire\";\r\n\t\t\tif (species.name.endsWith(\"Cornerstone\")) return \"Rock\";\r\n\t\t}\r\n\r\n\t\tconst moveType = move.type;\r\n\t\tif (moveType === 'Normal') {\r\n\t\t\tif (abilities.has('Aerilate')) return 'Flying';\r\n\t\t\tif (abilities.has('Galvanize')) return 'Electric';\r\n\t\t\tif (abilities.has('Pixilate')) return 'Fairy';\r\n\t\t\tif (abilities.has('Refrigerate')) return 'Ice';\r\n\t\t}\r\n\t\treturn moveType;\r\n\t}\r\n\r\n\t// Generate random moveset for a given species, role, tera type.\r\n\trandomMoveset(\r\n\t\ttypes: string[],\r\n\t\tabilities: Set<string>,\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species,\r\n\t\tisLead: boolean,\r\n\t\tisDoubles: boolean,\r\n\t\tmovePool: string[],\r\n\t\tteraType: string,\r\n\t\trole: RandomTeamsTypes.Role,\r\n\t): Set<string> {\r\n\t\tconst moves = new Set<string>();\r\n\t\tlet counter = this.queryMoves(moves, species, teraType, abilities);\r\n\t\tthis.cullMovePool(types, moves, abilities, counter, movePool, teamDetails, species, isLead, isDoubles, teraType, role);\r\n\r\n\t\t// If there are only four moves, add all moves and return early\r\n\t\tif (movePool.length <= this.maxMoveCount) {\r\n\t\t\tfor (const moveid of movePool) {\r\n\t\t\t\tmoves.add(moveid);\r\n\t\t\t}\r\n\t\t\treturn moves;\r\n\t\t}\r\n\r\n\t\tconst runEnforcementChecker = (checkerName: string) => {\r\n\t\t\tif (!this.moveEnforcementCheckers[checkerName]) return false;\r\n\t\t\treturn this.moveEnforcementCheckers[checkerName](\r\n\t\t\t\tmovePool, moves, abilities, types, counter, species, teamDetails, isLead, isDoubles, teraType, role\r\n\t\t\t);\r\n\t\t};\r\n\r\n\t\tif (role === 'Tera Blast user') {\r\n\t\t\tcounter = this.addMove('terablast', moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\tmovePool, teraType, role);\r\n\t\t}\r\n\t\t// Add required move (e.g. Relic Song for Meloetta-P)\r\n\t\tif (species.requiredMove) {\r\n\t\t\tconst move = this.dex.moves.get(species.requiredMove).id;\r\n\t\t\tcounter = this.addMove(move, moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\tmovePool, teraType, role);\r\n\t\t}\r\n\r\n\t\t// Add other moves you really want to have, e.g. STAB, recovery, setup.\r\n\r\n\t\t// Enforce Facade if Guts is a possible ability\r\n\t\tif (movePool.includes('facade') && abilities.has('Guts')) {\r\n\t\t\tcounter = this.addMove('facade', moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\tmovePool, teraType, role);\r\n\t\t}\r\n\r\n\t\t// Enforce Night Shade, Revelation Dance, Revival Blessing, and Sticky Web\r\n\t\tfor (const moveid of ['nightshade', 'revelationdance', 'revivalblessing', 'stickyweb']) {\r\n\t\t\tif (movePool.includes(moveid)) {\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce Trick Room on Doubles Wallbreaker\r\n\t\tif (movePool.includes('trickroom') && role === 'Doubles Wallbreaker') {\r\n\t\t\tcounter = this.addMove('trickroom', moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\tmovePool, teraType, role);\r\n\t\t}\r\n\r\n\t\t// Enforce hazard removal on Bulky Support if the team doesn't already have it\r\n\t\tif (role === 'Bulky Support' && !teamDetails.defog && !teamDetails.rapidSpin) {\r\n\t\t\tif (movePool.includes('rapidspin')) {\r\n\t\t\t\tcounter = this.addMove('rapidspin', moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t}\r\n\t\t\tif (movePool.includes('defog')) {\r\n\t\t\t\tcounter = this.addMove('defog', moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce Knock Off on pure Normal- and Fighting-types in singles\r\n\t\tif (!isDoubles && types.length === 1 && (types.includes('Normal') || types.includes('Fighting'))) {\r\n\t\t\tif (movePool.includes('knockoff')) {\r\n\t\t\t\tcounter = this.addMove('knockoff', moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce Flip Turn on pure Water-type Wallbreakers\r\n\t\tif (types.length === 1 && types.includes('Water') && role === 'Wallbreaker') {\r\n\t\t\tif (movePool.includes('flipturn')) {\r\n\t\t\t\tcounter = this.addMove('flipturn', moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce Spore on Smeargle\r\n\t\tif (species.id === 'smeargle') {\r\n\t\t\tif (movePool.includes('spore')) {\r\n\t\t\t\tcounter = this.addMove('spore', moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce moves in doubles\r\n\t\tif (isDoubles) {\r\n\t\t\tconst doublesEnforcedMoves = ['auroraveil', 'mortalspin', 'spore'];\r\n\t\t\tfor (const moveid of doublesEnforcedMoves) {\r\n\t\t\t\tif (movePool.includes(moveid)) {\r\n\t\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Enforce Fake Out on slow Pokemon\r\n\t\t\tif (movePool.includes('fakeout') && species.baseStats.spe <= 50) {\r\n\t\t\t\tcounter = this.addMove('fakeout', moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t}\r\n\t\t\t// Enforce Tailwind on Prankster and Gale Wings users\r\n\t\t\tif (movePool.includes('tailwind') && (abilities.has('Prankster') || abilities.has('Gale Wings'))) {\r\n\t\t\t\tcounter = this.addMove('tailwind', moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t}\r\n\t\t\t// Enforce Thunder Wave on Prankster users as well\r\n\t\t\tif (movePool.includes('thunderwave') && abilities.has('Prankster')) {\r\n\t\t\t\tcounter = this.addMove('thunderwave', moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce STAB priority\r\n\t\tif (\r\n\t\t\t['Bulky Attacker', 'Bulky Setup', 'Wallbreaker', 'Doubles Wallbreaker'].includes(role) ||\r\n\t\t\tPRIORITY_POKEMON.includes(species.id)\r\n\t\t) {\r\n\t\t\tconst priorityMoves = [];\r\n\t\t\tfor (const moveid of movePool) {\r\n\t\t\t\tconst move = this.dex.moves.get(moveid);\r\n\t\t\t\tconst moveType = this.getMoveType(move, species, abilities, teraType);\r\n\t\t\t\tif (\r\n\t\t\t\t\ttypes.includes(moveType) && (move.priority > 0 || (moveid === 'grassyglide' && abilities.has('Grassy Surge'))) &&\r\n\t\t\t\t\t(move.basePower || move.basePowerCallback)\r\n\t\t\t\t) {\r\n\t\t\t\t\tpriorityMoves.push(moveid);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (priorityMoves.length) {\r\n\t\t\t\tconst moveid = this.sample(priorityMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce STAB\r\n\t\tfor (const type of types) {\r\n\t\t\t// Check if a STAB move of that type should be required\r\n\t\t\tconst stabMoves = [];\r\n\t\t\tfor (const moveid of movePool) {\r\n\t\t\t\tconst move = this.dex.moves.get(moveid);\r\n\t\t\t\tconst moveType = this.getMoveType(move, species, abilities, teraType);\r\n\t\t\t\tif (!this.noStab.includes(moveid) && (move.basePower || move.basePowerCallback) && type === moveType) {\r\n\t\t\t\t\tstabMoves.push(moveid);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\twhile (runEnforcementChecker(type)) {\r\n\t\t\t\tif (!stabMoves.length) break;\r\n\t\t\t\tconst moveid = this.sampleNoReplace(stabMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce Tera STAB\r\n\t\tif (!counter.get('stabtera') && !['Bulky Support', 'Doubles Support'].includes(role)) {\r\n\t\t\tconst stabMoves = [];\r\n\t\t\tfor (const moveid of movePool) {\r\n\t\t\t\tconst move = this.dex.moves.get(moveid);\r\n\t\t\t\tconst moveType = this.getMoveType(move, species, abilities, teraType);\r\n\t\t\t\tif (!this.noStab.includes(moveid) && (move.basePower || move.basePowerCallback) && teraType === moveType) {\r\n\t\t\t\t\tstabMoves.push(moveid);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (stabMoves.length) {\r\n\t\t\t\tconst moveid = this.sample(stabMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If no STAB move was added, add a STAB move\r\n\t\tif (!counter.get('stab')) {\r\n\t\t\tconst stabMoves = [];\r\n\t\t\tfor (const moveid of movePool) {\r\n\t\t\t\tconst move = this.dex.moves.get(moveid);\r\n\t\t\t\tconst moveType = this.getMoveType(move, species, abilities, teraType);\r\n\t\t\t\tif (!this.noStab.includes(moveid) && (move.basePower || move.basePowerCallback) && types.includes(moveType)) {\r\n\t\t\t\t\tstabMoves.push(moveid);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (stabMoves.length) {\r\n\t\t\t\tconst moveid = this.sample(stabMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce recovery\r\n\t\tif (['Bulky Support', 'Bulky Attacker', 'Bulky Setup'].includes(role)) {\r\n\t\t\tconst recoveryMoves = movePool.filter(moveid => RECOVERY_MOVES.includes(moveid));\r\n\t\t\tif (recoveryMoves.length) {\r\n\t\t\t\tconst moveid = this.sample(recoveryMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce setup\r\n\t\tif (role.includes('Setup') || role === 'Tera Blast user') {\r\n\t\t\t// First, try to add a non-Speed setup move\r\n\t\t\tconst nonSpeedSetupMoves = movePool.filter(moveid => SETUP.includes(moveid) && !SPEED_SETUP.includes(moveid));\r\n\t\t\tif (nonSpeedSetupMoves.length) {\r\n\t\t\t\tconst moveid = this.sample(nonSpeedSetupMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t} else {\r\n\t\t\t\t// No non-Speed setup moves, so add any (Speed) setup move\r\n\t\t\t\tconst setupMoves = movePool.filter(moveid => SETUP.includes(moveid));\r\n\t\t\t\tif (setupMoves.length) {\r\n\t\t\t\t\tconst moveid = this.sample(setupMoves);\r\n\t\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce redirecting moves and Fake Out on Doubles Support\r\n\t\tif (role === 'Doubles Support') {\r\n\t\t\tfor (const moveid of ['fakeout', 'followme', 'ragepowder']) {\r\n\t\t\t\tif (movePool.includes(moveid)) {\r\n\t\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce Protect\r\n\t\tif (role.includes('Protect')) {\r\n\t\t\tconst protectMoves = movePool.filter(moveid => PROTECT_MOVES.includes(moveid));\r\n\t\t\tif (protectMoves.length) {\r\n\t\t\t\tconst moveid = this.sample(protectMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce a move not on the noSTAB list\r\n\t\tif (!counter.damagingMoves.size) {\r\n\t\t\t// Choose an attacking move\r\n\t\t\tconst attackingMoves = [];\r\n\t\t\tfor (const moveid of movePool) {\r\n\t\t\t\tconst move = this.dex.moves.get(moveid);\r\n\t\t\t\tif (!this.noStab.includes(moveid) && (move.category !== 'Status')) attackingMoves.push(moveid);\r\n\t\t\t}\r\n\t\t\tif (attackingMoves.length) {\r\n\t\t\t\tconst moveid = this.sample(attackingMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce coverage move\r\n\t\tif (!['AV Pivot', 'Fast Support', 'Bulky Support', 'Bulky Protect', 'Doubles Support'].includes(role)) {\r\n\t\t\tif (counter.damagingMoves.size === 1) {\r\n\t\t\t\t// Find the type of the current attacking move\r\n\t\t\t\tconst currentAttackType = counter.damagingMoves.values().next().value.type;\r\n\t\t\t\t// Choose an attacking move that is of different type to the current single attack\r\n\t\t\t\tconst coverageMoves = [];\r\n\t\t\t\tfor (const moveid of movePool) {\r\n\t\t\t\t\tconst move = this.dex.moves.get(moveid);\r\n\t\t\t\t\tconst moveType = this.getMoveType(move, species, abilities, teraType);\r\n\t\t\t\t\tif (!this.noStab.includes(moveid) && (move.basePower || move.basePowerCallback)) {\r\n\t\t\t\t\t\tif (currentAttackType !== moveType) coverageMoves.push(moveid);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (coverageMoves.length) {\r\n\t\t\t\t\tconst moveid = this.sample(coverageMoves);\r\n\t\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Add (moves.size < this.maxMoveCount) as a condition if moves is getting larger than 4 moves.\r\n\t\t// If you want moves to be favored but not required, add something like && this.randomChance(1, 2) to your condition.\r\n\r\n\t\t// Choose remaining moves randomly from movepool and add them to moves list:\r\n\t\twhile (moves.size < this.maxMoveCount && movePool.length) {\r\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) {\r\n\t\t\t\tfor (const moveid of movePool) {\r\n\t\t\t\t\tmoves.add(moveid);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tconst moveid = this.sample(movePool);\r\n\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\tmovePool, teraType, role);\r\n\t\t\tfor (const pair of MOVE_PAIRS) {\r\n\t\t\t\tif (moveid === pair[0] && movePool.includes(pair[1])) {\r\n\t\t\t\t\tcounter = this.addMove(pair[1], moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t\t}\r\n\t\t\t\tif (moveid === pair[1] && movePool.includes(pair[0])) {\r\n\t\t\t\t\tcounter = this.addMove(pair[0], moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn moves;\r\n\t}\r\n\r\n\tshouldCullAbility(\r\n\t\tability: string,\r\n\t\ttypes: string[],\r\n\t\tmoves: Set<string>,\r\n\t\tabilities: Set<string>,\r\n\t\tcounter: MoveCounter,\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species,\r\n\t\tisLead: boolean,\r\n\t\tisDoubles: boolean,\r\n\t\tteraType: string,\r\n\t\trole: RandomTeamsTypes.Role,\r\n\t): boolean {\r\n\t\tif ([\r\n\t\t\t'Armor Tail', 'Battle Bond', 'Early Bird', 'Flare Boost', 'Galvanize', 'Gluttony', 'Harvest', 'Hydration', 'Ice Body', 'Immunity',\r\n\t\t\t'Liquid Voice', 'Marvel Scale', 'Misty Surge', 'Moody', 'Pressure', 'Quick Feet', 'Rain Dish', 'Sand Veil', 'Shed Skin',\r\n\t\t\t'Sniper', 'Snow Cloak', 'Steadfast', 'Steam Engine', 'Sweet Veil',\r\n\t\t].includes(ability)) return true;\r\n\r\n\t\tswitch (ability) {\r\n\t\t// Abilities which are primarily useful for certain moves\r\n\t\tcase 'Contrary': case 'Serene Grace': case 'Skill Link': case 'Strong Jaw':\r\n\t\t\treturn !counter.get(toID(ability));\r\n\t\tcase 'Chlorophyll':\r\n\t\t\treturn (!moves.has('sunnyday') && !teamDetails.sun && species.id !== 'lilligant');\r\n\t\tcase 'Cloud Nine':\r\n\t\t\treturn (species.id !== 'golduck');\r\n\t\tcase 'Competitive':\r\n\t\t\treturn (species.id === 'kilowattrel' && !isDoubles);\r\n\t\tcase 'Compound Eyes': case 'No Guard':\r\n\t\t\treturn !counter.get('inaccurate');\r\n\t\tcase 'Cursed Body':\r\n\t\t\treturn abilities.has('Infiltrator');\r\n\t\tcase 'Defiant':\r\n\t\t\treturn (!counter.get('Physical') || (abilities.has('Prankster') && (moves.has('thunderwave') || moves.has('taunt'))));\r\n\t\tcase 'Flame Body':\r\n\t\t\treturn (species.id === 'magcargo' && moves.has('shellsmash'));\r\n\t\tcase 'Flash Fire':\r\n\t\t\treturn (\r\n\t\t\t\t['Drought', 'Flame Body', 'Intimidate', 'Rock Head', 'Weak Armor'].some(m => abilities.has(m)) &&\r\n\t\t\t\tthis.dex.getEffectiveness('Fire', species) < 0\r\n\t\t\t);\r\n\t\tcase 'Guts':\r\n\t\t\treturn (!moves.has('facade') && !moves.has('sleeptalk'));\r\n\t\tcase 'Hustle':\r\n\t\t\t// some of this is just for Delibird in singles/doubles\r\n\t\t\treturn (!counter.get('Physical') || moves.has('fakeout') || moves.has('rapidspin'));\r\n\t\tcase 'Infiltrator':\r\n\t\t\treturn (isDoubles && abilities.has('Clear Body'));\r\n\t\tcase 'Insomnia':\r\n\t\t\treturn (role === 'Wallbreaker');\r\n\t\tcase 'Intimidate':\r\n\t\t\tif (abilities.has('Hustle')) return true;\r\n\t\t\tif (abilities.has('Sheer Force') && !!counter.get('sheerforce')) return true;\r\n\t\t\tif (species.id === 'hitmontop' && moves.has('tripleaxel')) return true;\r\n\t\t\treturn (abilities.has('Stakeout'));\r\n\t\tcase 'Iron Fist':\r\n\t\t\treturn !counter.ironFist || moves.has('dynamicpunch');\r\n\t\tcase 'Justified':\r\n\t\t\treturn !counter.get('Physical');\r\n\t\tcase 'Libero': case 'Protean':\r\n\t\t\treturn role === 'Offensive Protect' || (species.id === 'meowscarada' && role === 'Fast Attacker');\r\n\t\tcase 'Lightning Rod':\r\n\t\t\treturn species.id === 'rhyperior';\r\n\t\tcase 'Mold Breaker':\r\n\t\t\treturn (['Sharpness', 'Sheer Force', 'Unburden'].some(m => abilities.has(m)));\r\n\t\tcase 'Moxie':\r\n\t\t\treturn (!counter.get('Physical') || moves.has('stealthrock'));\r\n\t\tcase 'Natural Cure':\r\n\t\t\treturn species.id === 'pawmot';\r\n\t\tcase 'Neutralizing Gas':\r\n\t\t\treturn !isDoubles;\r\n\t\tcase 'Overcoat':\r\n\t\t\treturn types.includes('Grass');\r\n\t\tcase 'Overgrow':\r\n\t\t\treturn !counter.get('Grass');\r\n\t\tcase 'Own Tempo':\r\n\t\t\treturn (!isDoubles || (counter.get('Special')) > 1);\r\n\t\tcase 'Prankster':\r\n\t\t\treturn (!counter.get('Status') || (species.id === 'grafaiai' && role === 'Setup Sweeper'));\r\n\t\tcase 'Reckless':\r\n\t\t\treturn !counter.get('recoil');\r\n\t\tcase 'Regenerator':\r\n\t\t\treturn (species.id === 'mienshao' && role === 'Wallbreaker');\r\n\t\tcase 'Rock Head':\r\n\t\t\treturn !counter.get('recoil');\r\n\t\tcase 'Sand Force': case 'Sand Rush':\r\n\t\t\treturn !teamDetails.sand;\r\n\t\tcase 'Sap Sipper':\r\n\t\t\treturn species.id === 'wyrdeer';\r\n\t\tcase 'Seed Sower':\r\n\t\t\treturn role === 'Bulky Support';\r\n\t\tcase 'Sheer Force':\r\n\t\t\tconst braviaryCase = (species.id === 'braviaryhisui' && (role === 'Wallbreaker' || role === 'Bulky Protect'));\r\n\t\t\tconst abilitiesCase = (abilities.has('Guts') || abilities.has('Sharpness'));\r\n\t\t\tconst movesCase = (moves.has('bellydrum') || moves.has('flamecharge'));\r\n\t\t\treturn (!counter.get('sheerforce') || braviaryCase || abilitiesCase || movesCase);\r\n\t\tcase 'Slush Rush':\r\n\t\t\treturn !teamDetails.snow;\r\n\t\tcase 'Solar Power':\r\n\t\t\treturn (!teamDetails.sun || !counter.get('Special'));\r\n\t\tcase 'Speed Boost':\r\n\t\t\treturn (species.id === 'yanmega' && !moves.has('protect'));\r\n\t\tcase 'Sticky Hold':\r\n\t\t\treturn (species.id === 'muk');\r\n\t\tcase 'Sturdy':\r\n\t\t\treturn (!!counter.get('recoil') && species.id !== 'skarmory');\r\n\t\tcase 'Swarm':\r\n\t\t\treturn (!counter.get('Bug') || !!counter.get('recovery'));\r\n\t\tcase 'Swift Swim':\r\n\t\t\treturn (abilities.has('Intimidate') || (!moves.has('raindance') && !teamDetails.rain));\r\n\t\tcase 'Synchronize':\r\n\t\t\treturn (species.id !== 'umbreon' && species.id !== 'rabsca');\r\n\t\tcase 'Technician':\r\n\t\t\treturn (!counter.get('technician') || abilities.has('Punk Rock') || abilities.has('Fur Coat'));\r\n\t\tcase 'Tinted Lens':\r\n\t\t\tconst hbraviaryCase = (species.id === 'braviaryhisui' && (role === 'Setup Sweeper' || role === 'Doubles Wallbreaker'));\r\n\t\t\tconst yanmegaCase = (species.id === 'yanmega' && moves.has('protect'));\r\n\t\t\treturn (yanmegaCase || hbraviaryCase || species.id === 'illumise');\r\n\t\tcase 'Unaware':\r\n\t\t\treturn (species.id === 'clefable' && role !== 'Bulky Support');\r\n\t\tcase 'Unburden':\r\n\t\t\treturn (abilities.has('Prankster') || !counter.get('setup') || species.id === 'sceptile');\r\n\t\tcase 'Vital Spirit':\r\n\t\t\t// Magmar and Electabuzz want their contact status abilities in Doubles\r\n\t\t\treturn (species.nfe && isDoubles);\r\n\t\tcase 'Volt Absorb':\r\n\t\t\tif (abilities.has('Iron Fist') && counter.ironFist >= 2) return true;\r\n\t\t\treturn (this.dex.getEffectiveness('Electric', species) < -1);\r\n\t\tcase 'Water Absorb':\r\n\t\t\treturn (['lanturn', 'politoed', 'quagsire'].includes(species.id) || moves.has('raindance'));\r\n\t\tcase 'Weak Armor':\r\n\t\t\treturn (moves.has('shellsmash') && species.id !== 'magcargo');\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\tgetAbility(\r\n\t\ttypes: string[],\r\n\t\tmoves: Set<string>,\r\n\t\tabilities: Set<string>,\r\n\t\tcounter: MoveCounter,\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species,\r\n\t\tisLead: boolean,\r\n\t\tisDoubles: boolean,\r\n\t\tteraType: string,\r\n\t\trole: RandomTeamsTypes.Role,\r\n\t): string {\r\n\t\tconst abilityData = Array.from(abilities).map(a => this.dex.abilities.get(a));\r\n\t\tUtils.sortBy(abilityData, abil => -abil.rating);\r\n\r\n\t\tif (abilityData.length <= 1) return abilityData[0].name;\r\n\r\n\t\t// Hard-code abilities here\r\n\t\tif (species.id === 'florges') return 'Flower Veil';\r\n\t\tif (species.id === 'bombirdier' && !counter.get('Rock')) return 'Big Pecks';\r\n\t\tif (species.id === 'scovillain') return 'Chlorophyll';\r\n\t\tif (species.id === 'empoleon') return 'Competitive';\r\n\t\tif (species.id === 'swampert' && !counter.get('Water') && !moves.has('flipturn')) return 'Damp';\r\n\t\tif (species.id === 'dodrio') return 'Early Bird';\r\n\t\tif (species.id === 'chandelure') return 'Flash Fire';\r\n\t\tif (species.id === 'golemalola' && moves.has('doubleedge')) return 'Galvanize';\r\n\t\tif (abilities.has('Guts') && (moves.has('facade') || moves.has('sleeptalk') || species.id === 'gurdurr')) return 'Guts';\r\n\t\tif (species.id === 'copperajah' && moves.has('heavyslam')) return 'Heavy Metal';\r\n\t\tif (species.id === 'jumpluff') return 'Infiltrator';\r\n\t\tif (species.id === 'toucannon' && !counter.get('skilllink')) return 'Keen Eye';\r\n\t\tif (species.id === 'reuniclus') return 'Magic Guard';\r\n\t\tif (species.id === 'smeargle' && !counter.get('technician')) return 'Own Tempo';\r\n\t\tif (species.id === 'zebstrika') return (moves.has('wildcharge')) ? 'Sap Sipper' : 'Lightning Rod';\r\n\t\tif (species.id === 'sandaconda' || (species.id === 'scrafty' && moves.has('rest'))) return 'Shed Skin';\r\n\t\tif (species.id === 'cetitan' && (role === 'Wallbreaker' || isDoubles)) return 'Sheer Force';\r\n\t\tif (species.id === 'dipplin') return 'Sticky Hold';\r\n\t\tif (species.id === 'breloom' || species.id === 'cinccino') return 'Technician';\r\n\t\tif (species.id === 'shiftry' && moves.has('tailwind')) return 'Wind Rider';\r\n\r\n\t\t// singles\r\n\t\tif (!isDoubles) {\r\n\t\t\tif (species.id === 'hypno') return 'Insomnia';\r\n\t\t\tif (species.id === 'staraptor') return 'Reckless';\r\n\t\t\tif (species.id === 'arcaninehisui') return 'Rock Head';\r\n\t\t\tif (['raikou', 'suicune', 'vespiquen'].includes(species.id)) return 'Pressure';\r\n\t\t\tif (species.id === 'enamorus' && moves.has('calmmind')) return 'Cute Charm';\r\n\t\t\tif (species.id === 'klawf' && role === 'Setup Sweeper') return 'Anger Shell';\r\n\t\t\tif (abilities.has('Cud Chew') && moves.has('substitute')) return 'Cud Chew';\r\n\t\t\tif (abilities.has('Harvest') && (moves.has('protect') || moves.has('substitute'))) return 'Harvest';\r\n\t\t\tif (abilities.has('Serene Grace') && moves.has('headbutt')) return 'Serene Grace';\r\n\t\t\tif (abilities.has('Own Tempo') && moves.has('petaldance')) return 'Own Tempo';\r\n\t\t\tif (abilities.has('Slush Rush') && moves.has('snowscape')) return 'Slush Rush';\r\n\t\t\tif (abilities.has('Soundproof') && (moves.has('substitute') || counter.get('setup'))) return 'Soundproof';\r\n\t\t}\r\n\r\n\t\t// doubles, multi, and ffa\r\n\t\tif (isDoubles) {\r\n\t\t\tif (species.id === 'gumshoos' || species.id === 'porygonz') return 'Adaptability';\r\n\t\t\tif (species.id === 'farigiraf') return 'Armor Tail';\r\n\t\t\tif (species.id === 'dragapult') return 'Clear Body';\r\n\t\t\tif (species.id === 'altaria') return 'Cloud Nine';\r\n\t\t\tif (species.id === 'meowsticf') return 'Competitive';\r\n\t\t\tif (species.id === 'armarouge' && !moves.has('meteorbeam')) return 'Flash Fire';\r\n\t\t\tif (species.id === 'talonflame') return 'Gale Wings';\r\n\t\t\tif (\r\n\t\t\t\t['oinkologne', 'oinkolognef', 'snorlax', 'swalot'].includes(species.id) && role !== 'Doubles Wallbreaker'\r\n\t\t\t) return 'Gluttony';\r\n\t\t\tif (species.id === 'conkeldurr' && role === 'Doubles Wallbreaker') return 'Guts';\r\n\t\t\tif (species.id !== 'arboliva' && abilities.has('Harvest')) return 'Harvest';\r\n\t\t\tif (species.id === 'dragonite' || species.id === 'lucario') return 'Inner Focus';\r\n\t\t\tif (species.id === 'ariados') return 'Insomnia';\r\n\t\t\tif (species.id === 'primarina') return 'Liquid Voice';\r\n\t\t\tif (species.id === 'kommoo') return 'Soundproof';\r\n\t\t\tif (\r\n\t\t\t\t(species.id === 'flapple' && role === 'Doubles Bulky Attacker') ||\r\n\t\t\t\t(species.id === 'appletun' && this.randomChance(1, 2))\r\n\t\t\t) return 'Ripen';\r\n\t\t\tif (species.id === 'magnezone') return 'Sturdy';\r\n\t\t\tif (species.id === 'clefable' && role === 'Doubles Support') return 'Unaware';\r\n\t\t\tif (['drifblim', 'hitmonlee', 'sceptile'].includes(species.id) && !moves.has('shedtail')) return 'Unburden';\r\n\t\t\tif (abilities.has('Intimidate')) return 'Intimidate';\r\n\r\n\t\t\tif (this.randomChance(1, 2) && species.id === 'kingambit') return 'Defiant';\r\n\r\n\t\t\t// just doubles and multi\r\n\t\t\tif (this.format.gameType !== 'freeforall') {\r\n\t\t\t\tif (\r\n\t\t\t\t\tspecies.id === 'clefairy' ||\r\n\t\t\t\t\t(species.baseSpecies === 'Maushold' && role === 'Doubles Support')\r\n\t\t\t\t) return 'Friend Guard';\r\n\t\t\t\tif (species.id === 'blissey') return 'Healer';\r\n\t\t\t\tif (species.id === 'sinistcha') return 'Hospitality';\r\n\t\t\t\tif (species.id === 'duraludon') return 'Stalwart';\r\n\t\t\t\tif (species.id === 'barraskewda') return 'Propeller Tail';\r\n\t\t\t\tif (species.id === 'oranguru' || abilities.has('Pressure') && abilities.has('Telepathy')) return 'Telepathy';\r\n\r\n\t\t\t\tif (this.randomChance(1, 2) && species.id === 'mukalola') return 'Power of Alchemy';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet abilityAllowed: Ability[] = [];\r\n\t\t// Obtain a list of abilities that are allowed (not culled)\r\n\t\tfor (const ability of abilityData) {\r\n\t\t\tif (ability.rating >= 1 && !this.shouldCullAbility(\r\n\t\t\t\tability.name, types, moves, abilities, counter, teamDetails, species, isLead, isDoubles, teraType, role\r\n\t\t\t)) {\r\n\t\t\t\tabilityAllowed.push(ability);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If all abilities are rejected, re-allow all abilities\r\n\t\tif (!abilityAllowed.length) {\r\n\t\t\tfor (const ability of abilityData) {\r\n\t\t\t\tif (ability.rating > 0) abilityAllowed.push(ability);\r\n\t\t\t}\r\n\t\t\tif (!abilityAllowed.length) abilityAllowed = abilityData;\r\n\t\t}\r\n\r\n\t\tif (abilityAllowed.length === 1) return abilityAllowed[0].name;\r\n\t\t// Sort abilities by rating with an element of randomness\r\n\t\t// All three abilities can be chosen\r\n\t\tif (abilityAllowed[2] && abilityAllowed[0].rating - 0.5 <= abilityAllowed[2].rating) {\r\n\t\t\tif (abilityAllowed[1].rating <= abilityAllowed[2].rating) {\r\n\t\t\t\tif (this.randomChance(1, 2)) [abilityAllowed[1], abilityAllowed[2]] = [abilityAllowed[2], abilityAllowed[1]];\r\n\t\t\t} else {\r\n\t\t\t\tif (this.randomChance(1, 3)) [abilityAllowed[1], abilityAllowed[2]] = [abilityAllowed[2], abilityAllowed[1]];\r\n\t\t\t}\r\n\t\t\tif (abilityAllowed[0].rating <= abilityAllowed[1].rating) {\r\n\t\t\t\tif (this.randomChance(2, 3)) [abilityAllowed[0], abilityAllowed[1]] = [abilityAllowed[1], abilityAllowed[0]];\r\n\t\t\t} else {\r\n\t\t\t\tif (this.randomChance(1, 2)) [abilityAllowed[0], abilityAllowed[1]] = [abilityAllowed[1], abilityAllowed[0]];\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// Third ability cannot be chosen\r\n\t\t\tif (abilityAllowed[0].rating <= abilityAllowed[1].rating) {\r\n\t\t\t\tif (this.randomChance(1, 2)) [abilityAllowed[0], abilityAllowed[1]] = [abilityAllowed[1], abilityAllowed[0]];\r\n\t\t\t} else if (abilityAllowed[0].rating - 0.5 <= abilityAllowed[1].rating) {\r\n\t\t\t\tif (this.randomChance(1, 3)) [abilityAllowed[0], abilityAllowed[1]] = [abilityAllowed[1], abilityAllowed[0]];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// After sorting, choose the first ability\r\n\t\treturn abilityAllowed[0].name;\r\n\t}\r\n\r\n\tgetPriorityItem(\r\n\t\tability: string,\r\n\t\ttypes: string[],\r\n\t\tmoves: Set<string>,\r\n\t\tcounter: MoveCounter,\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species,\r\n\t\tisLead: boolean,\r\n\t\tisDoubles: boolean,\r\n\t\tteraType: string,\r\n\t\trole: RandomTeamsTypes.Role,\r\n\t) {\r\n\t\tif (!isDoubles) {\r\n\t\t\tif (\r\n\t\t\t\t!isLead && role === 'Bulky Setup' &&\r\n\t\t\t\t(ability === 'Quark Drive' || ability === 'Protosynthesis')\r\n\t\t\t) {\r\n\t\t\t\treturn 'Booster Energy';\r\n\t\t\t}\r\n\t\t\tif (species.id === 'lokix') {\r\n\t\t\t\treturn (role === 'Fast Attacker') ? 'Silver Powder' : 'Life Orb';\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (species.requiredItems) {\r\n\t\t\t// Z-Crystals aren't available in Gen 9, so require Plates\r\n\t\t\tif (species.baseSpecies === 'Arceus') {\r\n\t\t\t\treturn species.requiredItems[0];\r\n\t\t\t}\r\n\t\t\treturn this.sample(species.requiredItems);\r\n\t\t}\r\n\t\tif (role === 'AV Pivot') return 'Assault Vest';\r\n\t\tif (species.id === 'pikachu') return 'Light Ball';\r\n\t\tif (species.id === 'regieleki') return 'Magnet';\r\n\t\tif (species.id === 'smeargle') return 'Focus Sash';\r\n\t\tif (species.id === 'froslass' || moves.has('populationbomb')) return 'Wide Lens';\r\n\t\tif (moves.has('clangoroussoul') || (species.id === 'toxtricity' && moves.has('shiftgear'))) return 'Throat Spray';\r\n\t\tif (\r\n\t\t\t(species.baseSpecies === 'Magearna' && role === 'Tera Blast user') ||\r\n\t\t\tspecies.id === 'necrozmaduskmane' || (species.id === 'calyrexice' && isDoubles)\r\n\t\t) return 'Weakness Policy';\r\n\t\tif (moves.has('lastrespects') || moves.has('dragonenergy')) return 'Choice Scarf';\r\n\t\tif (\r\n\t\t\tability === 'Imposter' ||\r\n\t\t\t(species.id === 'magnezone' && moves.has('bodypress') && !isDoubles)\r\n\t\t) return 'Choice Scarf';\r\n\t\tif (species.id === 'rampardos' && (role === 'Fast Attacker' || isDoubles)) return 'Choice Scarf';\r\n\t\tif (species.id === 'luvdisc' || moves.has('courtchange')) return 'Heavy-Duty Boots';\r\n\t\tif (moves.has('bellydrum') && moves.has('substitute')) return 'Salac Berry';\r\n\t\tif (\r\n\t\t\t['Cheek Pouch', 'Cud Chew', 'Harvest', 'Ripen'].some(m => ability === m) ||\r\n\t\t\tmoves.has('bellydrum') || moves.has('filletaway')\r\n\t\t) {\r\n\t\t\treturn 'Sitrus Berry';\r\n\t\t}\r\n\t\tif (['healingwish', 'switcheroo', 'trick'].some(m => moves.has(m))) {\r\n\t\t\tif (\r\n\t\t\t\tspecies.baseStats.spe >= 60 && species.baseStats.spe <= 108 &&\r\n\t\t\t\trole !== 'Wallbreaker' && role !== 'Doubles Wallbreaker' && !counter.get('priority')\r\n\t\t\t) {\r\n\t\t\t\treturn 'Choice Scarf';\r\n\t\t\t} else {\r\n\t\t\t\treturn (counter.get('Physical') > counter.get('Special')) ? 'Choice Band' : 'Choice Specs';\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (counter.get('Status') && (species.name === 'Latias' || species.name === 'Latios')) return 'Soul Dew';\r\n\t\tif (species.id === 'scyther' && !isDoubles) return (isLead && !moves.has('uturn')) ? 'Eviolite' : 'Heavy-Duty Boots';\r\n\t\tif (species.nfe) return 'Eviolite';\r\n\t\tif (ability === 'Poison Heal') return 'Toxic Orb';\r\n\t\tif ((ability === 'Guts' || moves.has('facade')) && !moves.has('sleeptalk')) {\r\n\t\t\treturn (types.includes('Fire') || ability === 'Toxic Boost') ? 'Toxic Orb' : 'Flame Orb';\r\n\t\t}\r\n\t\tif (species.id === 'reuniclus' || (ability === 'Sheer Force' && counter.get('sheerforce'))) return 'Life Orb';\r\n\t\tif (ability === 'Anger Shell') return this.sample(['Rindo Berry', 'Passho Berry', 'Scope Lens', 'Sitrus Berry']);\r\n\t\tif (moves.has('dragondance') && isDoubles) return 'Clear Amulet';\r\n\t\tif (counter.get('skilllink') && ability !== 'Skill Link' && species.id !== 'breloom') return 'Loaded Dice';\r\n\t\tif (ability === 'Unburden') {\r\n\t\t\treturn (moves.has('closecombat') || moves.has('leafstorm')) ? 'White Herb' : 'Sitrus Berry';\r\n\t\t}\r\n\t\tif (moves.has('shellsmash') && ability !== 'Weak Armor') return 'White Herb';\r\n\t\tif (moves.has('meteorbeam') || (moves.has('electroshot') && !teamDetails.rain)) return 'Power Herb';\r\n\t\tif (moves.has('acrobatics') && ability !== 'Protosynthesis') return '';\r\n\t\tif (moves.has('auroraveil') || moves.has('lightscreen') && moves.has('reflect')) return 'Light Clay';\r\n\t\tif (ability === 'Gluttony') return `${this.sample(['Aguav', 'Figy', 'Iapapa', 'Mago', 'Wiki'])} Berry`;\r\n\t\tif (\r\n\t\t\tmoves.has('rest') && !moves.has('sleeptalk') &&\r\n\t\t\tability !== 'Natural Cure' && ability !== 'Shed Skin'\r\n\t\t) {\r\n\t\t\treturn 'Chesto Berry';\r\n\t\t}\r\n\t\tif (\r\n\t\t\tspecies.id !== 'yanmega' &&\r\n\t\t\tthis.dex.getEffectiveness('Rock', species) >= 2 && (!types.includes('Flying') || !isDoubles)\r\n\t\t) return 'Heavy-Duty Boots';\r\n\t}\r\n\r\n\t/** Item generation specific to Random Doubles */\r\n\tgetDoublesItem(\r\n\t\tability: string,\r\n\t\ttypes: string[],\r\n\t\tmoves: Set<string>,\r\n\t\tcounter: MoveCounter,\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species,\r\n\t\tisLead: boolean,\r\n\t\tteraType: string,\r\n\t\trole: RandomTeamsTypes.Role,\r\n\t): string {\r\n\t\tconst scarfReqs = (\r\n\t\t\t!counter.get('priority') && ability !== 'Speed Boost' && role !== 'Doubles Wallbreaker' &&\r\n\t\t\tspecies.baseStats.spe >= 60 && species.baseStats.spe <= 108 &&\r\n\t\t\tthis.randomChance(1, 2)\r\n\t\t);\r\n\t\tconst offensiveRole = (\r\n\t\t\t['Doubles Fast Attacker', 'Doubles Wallbreaker', 'Doubles Setup Sweeper', 'Offensive Protect'].some(m => role === m)\r\n\t\t);\r\n\r\n\t\tif (species.id === 'ursalunabloodmoon' || (moves.has('doubleedge') && moves.has('fakeout'))) return 'Silk Scarf';\r\n\t\tif (\r\n\t\t\tmoves.has('flipturn') && moves.has('protect') && (moves.has('aquajet') || (moves.has('jetpunch')))\r\n\t\t) return 'Mystic Water';\r\n\t\tif (moves.has('waterspout')) return 'Choice Scarf';\r\n\t\tif (counter.get('speedsetup') && role === 'Doubles Bulky Setup') return 'Weakness Policy';\r\n\t\tif (species.id === 'toxapex') return 'Binding Band';\r\n\t\tif (moves.has('blizzard') && ability !== 'Snow Warning' && !teamDetails.snow) return 'Blunder Policy';\r\n\r\n\t\tif (role === 'Choice Item user') {\r\n\t\t\tif (scarfReqs || (counter.get('Physical') < 4 && counter.get('Special') < 3 && !moves.has('memento'))) {\r\n\t\t\t\treturn 'Choice Scarf';\r\n\t\t\t}\r\n\t\t\treturn (counter.get('Physical') >= 3) ? 'Choice Band' : 'Choice Specs';\r\n\t\t}\r\n\t\tif (counter.get('Physical') >= 4 &&\r\n\t\t\t['fakeout', 'feint', 'firstimpression', 'rapidspin', 'suckerpunch'].every(m => !moves.has(m)) &&\r\n\t\t\t(moves.has('flipturn') || moves.has('uturn') || role === 'Doubles Wallbreaker')\r\n\t\t) {\r\n\t\t\treturn (scarfReqs) ? 'Choice Scarf' : 'Choice Band';\r\n\t\t}\r\n\t\tif (\r\n\t\t\t((counter.get('Special') >= 4 && (moves.has('voltswitch') || role === 'Doubles Wallbreaker')) || (\r\n\t\t\t\tcounter.get('Special') >= 3 && (moves.has('uturn') || moves.has('flipturn'))\r\n\t\t\t)) && !moves.has('electroweb')\r\n\t\t) {\r\n\t\t\treturn (scarfReqs) ? 'Choice Scarf' : 'Choice Specs';\r\n\t\t}\r\n\t\tif (\r\n\t\t\t(role === 'Bulky Protect' && counter.get('setup')) || moves.has('substitute') ||\r\n\t\t\tspecies.id === 'eternatus'\r\n\t\t) return 'Leftovers';\r\n\t\tif (species.id === 'sylveon') return 'Pixie Plate';\r\n\t\tif (\r\n\t\t\t(offensiveRole || (role === 'Tera Blast user' && (species.baseStats.spe >= 80 || moves.has('trickroom')))) &&\r\n\t\t\t(!moves.has('fakeout') || species.id === 'ambipom') && !moves.has('incinerate') &&\r\n\t\t\t(!moves.has('uturn') || types.includes('Bug') || species.baseStats.atk >= 120 || ability === 'Libero') &&\r\n\t\t\t((!moves.has('icywind') && !moves.has('electroweb')) || species.id === 'ironbundle')\r\n\t\t) {\r\n\t\t\treturn (\r\n\t\t\t\t(ability === 'Quark Drive' || ability === 'Protosynthesis') &&\r\n\t\t\t\t['firstimpression', 'uturn', 'voltswitch'].every(m => !moves.has(m)) && species.id !== 'ironvaliant'\r\n\t\t\t) ? 'Booster Energy' : 'Life Orb';\r\n\t\t}\r\n\t\tif (isLead && (species.id === 'glimmora' ||\r\n\t\t\t(['Doubles Fast Attacker', 'Doubles Wallbreaker', 'Offensive Protect'].includes(role) &&\r\n\t\t\tspecies.baseStats.hp + species.baseStats.def + species.baseStats.spd <= 230))\r\n\t\t) return 'Focus Sash';\r\n\t\tif (\r\n\t\t\t['Doubles Fast Attacker', 'Doubles Wallbreaker', 'Offensive Protect'].includes(role) &&\r\n\t\t\tmoves.has('fakeout') || moves.has('incinerate')\r\n\t\t) {\r\n\t\t\treturn (this.dex.getEffectiveness('Rock', species) >= 1) ? 'Heavy-Duty Boots' : 'Clear Amulet';\r\n\t\t}\r\n\t\tif (!counter.get('Status')) return 'Assault Vest';\r\n\t\treturn 'Sitrus Berry';\r\n\t}\r\n\r\n\tgetItem(\r\n\t\tability: string,\r\n\t\ttypes: string[],\r\n\t\tmoves: Set<string>,\r\n\t\tcounter: MoveCounter,\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species,\r\n\t\tisLead: boolean,\r\n\t\tteraType: string,\r\n\t\trole: RandomTeamsTypes.Role,\r\n\t): string {\r\n\t\tif (types.includes('Normal') && moves.has('fakeout')) return 'Silk Scarf';\r\n\t\tif (\r\n\t\t\tspecies.id !== 'jirachi' && (counter.get('Physical') >= 4) &&\r\n\t\t\t['dragontail', 'fakeout', 'firstimpression', 'flamecharge', 'rapidspin'].every(m => !moves.has(m))\r\n\t\t) {\r\n\t\t\tconst scarfReqs = (\r\n\t\t\t\trole !== 'Wallbreaker' &&\r\n\t\t\t\t(species.baseStats.atk >= 100 || ability === 'Huge Power' || ability === 'Pure Power') &&\r\n\t\t\t\tspecies.baseStats.spe >= 60 && species.baseStats.spe <= 108 &&\r\n\t\t\t\tability !== 'Speed Boost' && !counter.get('priority') && !moves.has('aquastep')\r\n\t\t\t);\r\n\t\t\treturn (scarfReqs && this.randomChance(1, 2)) ? 'Choice Scarf' : 'Choice Band';\r\n\t\t}\r\n\t\tif (\r\n\t\t\t(counter.get('Special') >= 4) ||\r\n\t\t\t(counter.get('Special') >= 3 && ['flipturn', 'partingshot', 'uturn'].some(m => moves.has(m)))\r\n\t\t) {\r\n\t\t\tconst scarfReqs = (\r\n\t\t\t\trole !== 'Wallbreaker' &&\r\n\t\t\t\tspecies.baseStats.spa >= 100 &&\r\n\t\t\t\tspecies.baseStats.spe >= 60 && species.baseStats.spe <= 108 &&\r\n\t\t\t\tability !== 'Speed Boost' && ability !== 'Tinted Lens' && !counter.get('Physical')\r\n\t\t\t);\r\n\t\t\treturn (scarfReqs && this.randomChance(1, 2)) ? 'Choice Scarf' : 'Choice Specs';\r\n\t\t}\r\n\t\tif (counter.get('speedsetup') && role === 'Bulky Setup') return 'Weakness Policy';\r\n\t\tif (\r\n\t\t\t!counter.get('Status') &&\r\n\t\t\t!['Fast Attacker', 'Wallbreaker', 'Tera Blast user'].includes(role)\r\n\t\t) {\r\n\t\t\treturn 'Assault Vest';\r\n\t\t}\r\n\t\tif (species.id === 'golem') return (counter.get('speedsetup')) ? 'Weakness Policy' : 'Custap Berry';\r\n\t\tif (species.id === 'palkia') return 'Lustrous Orb';\r\n\t\tif (moves.has('substitute')) return 'Leftovers';\r\n\t\tif (moves.has('stickyweb') && species.id !== 'araquanid' && isLead) return 'Focus Sash';\r\n\t\tif (this.dex.getEffectiveness('Rock', species) >= 1) return 'Heavy-Duty Boots';\r\n\t\tif (\r\n\t\t\t(moves.has('chillyreception') || (\r\n\t\t\t\trole === 'Fast Support' &&\r\n\t\t\t\t[...PIVOT_MOVES, 'defog', 'mortalspin', 'rapidspin'].some(m => moves.has(m)) &&\r\n\t\t\t\t!types.includes('Flying') && ability !== 'Levitate'\r\n\t\t\t))\r\n\t\t) return 'Heavy-Duty Boots';\r\n\r\n\t\t// Low Priority\r\n\t\tif (\r\n\t\t\t(species.id === 'garchomp' && role === 'Fast Support') || (\r\n\t\t\t\tability === 'Regenerator' && (role === 'Bulky Support' || role === 'Bulky Attacker') &&\r\n\t\t\t\t(species.baseStats.hp + species.baseStats.def) >= 180 && this.randomChance(1, 2)\r\n\t\t\t)\r\n\t\t) return 'Rocky Helmet';\r\n\t\tif (moves.has('outrage')) return 'Lum Berry';\r\n\t\tif (moves.has('protect') && ability !== 'Speed Boost') return 'Leftovers';\r\n\t\tif (\r\n\t\t\trole === 'Fast Support' && isLead &&\r\n\t\t\t!counter.get('recovery') && !counter.get('recoil') &&\r\n\t\t\t(species.baseStats.hp + species.baseStats.def + species.baseStats.spd) < 258\r\n\t\t) return 'Focus Sash';\r\n\t\tif (\r\n\t\t\t!counter.get('setup') && ability !== 'Levitate' && this.dex.getEffectiveness('Ground', species) >= 2\r\n\t\t) return 'Air Balloon';\r\n\t\tif (['Bulky Attacker', 'Bulky Support', 'Bulky Setup'].some(m => role === (m))) return 'Leftovers';\r\n\t\tif (species.id === 'pawmot' && moves.has('nuzzle')) return 'Leppa Berry';\r\n\t\tif (\r\n\t\t\t['Fast Bulky Setup', 'Fast Attacker', 'Setup Sweeper', 'Wallbreaker'].some(m => role === m) &&\r\n\t\t\ttypes.includes('Dark') && moves.has('suckerpunch') && !PRIORITY_POKEMON.includes(species.id) &&\r\n\t\t\tcounter.get('physicalsetup') && counter.get('Dark')\r\n\t\t) return 'Black Glasses';\r\n\t\tif (role === 'Fast Support' || role === 'Fast Bulky Setup') {\r\n\t\t\treturn (counter.get('Physical') + counter.get('Special') >= 3 && !moves.has('nuzzle')) ? 'Life Orb' : 'Leftovers';\r\n\t\t}\r\n\t\tif (role === 'Tera Blast user' && DEFENSIVE_TERA_BLAST_USERS.includes(species.id)) return 'Leftovers';\r\n\t\tif (\r\n\t\t\t['flamecharge', 'rapidspin', 'trailblaze'].every(m => !moves.has(m)) &&\r\n\t\t\t['Fast Attacker', 'Setup Sweeper', 'Tera Blast user', 'Wallbreaker'].some(m => role === (m))\r\n\t\t) return 'Life Orb';\r\n\t\treturn 'Leftovers';\r\n\t}\r\n\r\n\tgetLevel(\r\n\t\tspecies: Species,\r\n\t\tisDoubles: boolean,\r\n\t): number {\r\n\t\tif (this.adjustLevel) return this.adjustLevel;\r\n\t\t// doubles levelling\r\n\t\tif (isDoubles && this.randomDoublesSets[species.id][\"level\"]) return this.randomDoublesSets[species.id][\"level\"]!;\r\n\t\tif (!isDoubles && this.randomSets[species.id][\"level\"]) return this.randomSets[species.id][\"level\"]!;\r\n\t\t// Default to tier-based levelling\r\n\t\tconst tier = species.tier;\r\n\t\tconst tierScale: Partial<Record<Species['tier'], number>> = {\r\n\t\t\tUber: 76,\r\n\t\t\tOU: 80,\r\n\t\t\tUUBL: 81,\r\n\t\t\tUU: 82,\r\n\t\t\tRUBL: 83,\r\n\t\t\tRU: 84,\r\n\t\t\tNUBL: 85,\r\n\t\t\tNU: 86,\r\n\t\t\tPUBL: 87,\r\n\t\t\tPU: 88, \"(PU)\": 88, NFE: 88,\r\n\t\t};\r\n\t\treturn tierScale[tier] || 80;\r\n\t}\r\n\r\n\tgetForme(species: Species): string {\r\n\t\tif (typeof species.battleOnly === 'string') {\r\n\t\t\t// Only change the forme. The species has custom moves, and may have different typing and requirements.\r\n\t\t\treturn species.battleOnly;\r\n\t\t}\r\n\t\tif (species.cosmeticFormes) return this.sample([species.name].concat(species.cosmeticFormes));\r\n\r\n\t\t// Consolidate mostly-cosmetic formes, at least for the purposes of Random Battles\r\n\t\tif (['Dudunsparce', 'Magearna', 'Maushold', 'Polteageist', 'Sinistcha', 'Zarude'].includes(species.baseSpecies)) {\r\n\t\t\treturn this.sample([species.name].concat(species.otherFormes!));\r\n\t\t}\r\n\t\tif (species.baseSpecies === 'Basculin') return 'Basculin' + this.sample(['', '-Blue-Striped']);\r\n\t\tif (species.baseSpecies === 'Pikachu') {\r\n\t\t\treturn 'Pikachu' + this.sample(\r\n\t\t\t\t['', '-Original', '-Hoenn', '-Sinnoh', '-Unova', '-Kalos', '-Alola', '-Partner', '-World']\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn species.name;\r\n\t}\r\n\r\n\trandomSet(\r\n\t\ts: string | Species,\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails = {},\r\n\t\tisLead = false,\r\n\t\tisDoubles = false\r\n\t): RandomTeamsTypes.RandomSet {\r\n\t\tconst species = this.dex.species.get(s);\r\n\t\tconst forme = this.getForme(species);\r\n\t\tconst sets = (this as any)[`random${isDoubles ? 'Doubles' : ''}Sets`][species.id][\"sets\"];\r\n\t\tconst possibleSets = [];\r\n\r\n\t\tconst ruleTable = this.dex.formats.getRuleTable(this.format);\r\n\r\n\t\tfor (const set of sets) {\r\n\t\t\t// Prevent Tera Blast user if the team already has one, or if Terastallizion is prevented.\r\n\t\t\tif ((teamDetails.teraBlast || ruleTable.has('terastalclause')) && set.role === 'Tera Blast user') {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tpossibleSets.push(set);\r\n\t\t}\r\n\t\tconst set = this.sampleIfArray(possibleSets);\r\n\t\tconst role = set.role;\r\n\t\tconst movePool: string[] = [];\r\n\t\tfor (const movename of set.movepool) {\r\n\t\t\tmovePool.push(this.dex.moves.get(movename).id);\r\n\t\t}\r\n\t\tconst teraTypes = set.teraTypes;\r\n\t\tlet teraType = this.sampleIfArray(teraTypes);\r\n\r\n\t\tlet ability = '';\r\n\t\tlet item = undefined;\r\n\r\n\t\tconst evs = {hp: 85, atk: 85, def: 85, spa: 85, spd: 85, spe: 85};\r\n\t\tconst ivs = {hp: 31, atk: 31, def: 31, spa: 31, spd: 31, spe: 31};\r\n\r\n\t\tconst types = species.types;\r\n\t\tconst abilities = new Set(Object.values(species.abilities));\r\n\t\tif (species.unreleasedHidden) abilities.delete(species.abilities.H);\r\n\r\n\t\t// Get moves\r\n\t\tconst moves = this.randomMoveset(types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);\r\n\t\tconst counter = this.queryMoves(moves, species, teraType, abilities);\r\n\r\n\t\t// Get ability\r\n\t\tability = this.getAbility(types, moves, abilities, counter, teamDetails, species, isLead, isDoubles, teraType, role);\r\n\r\n\t\t// Get items\r\n\t\t// First, the priority items\r\n\t\titem = this.getPriorityItem(ability, types, moves, counter, teamDetails, species, isLead, isDoubles, teraType, role);\r\n\t\tif (item === undefined) {\r\n\t\t\tif (isDoubles) {\r\n\t\t\t\titem = this.getDoublesItem(ability, types, moves, counter, teamDetails, species, isLead, teraType, role);\r\n\t\t\t} else {\r\n\t\t\t\titem = this.getItem(ability, types, moves, counter, teamDetails, species, isLead, teraType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Get level\r\n\t\tconst level = this.getLevel(species, isDoubles);\r\n\r\n\t\t// Prepare optimal HP\r\n\t\tconst srImmunity = ability === 'Magic Guard' || item === 'Heavy-Duty Boots';\r\n\t\tlet srWeakness = srImmunity ? 0 : this.dex.getEffectiveness('Rock', species);\r\n\t\t// Crash damage move users want an odd HP to survive two misses\r\n\t\tif (['axekick', 'highjumpkick', 'jumpkick'].some(m => moves.has(m))) srWeakness = 2;\r\n\t\twhile (evs.hp > 1) {\r\n\t\t\tconst hp = Math.floor(Math.floor(2 * species.baseStats.hp + ivs.hp + Math.floor(evs.hp / 4) + 100) * level / 100 + 10);\r\n\t\t\tif ((moves.has('substitute') && ['Sitrus Berry', 'Salac Berry'].includes(item))) {\r\n\t\t\t\t// Two Substitutes should activate Sitrus Berry\r\n\t\t\t\tif (hp % 4 === 0) break;\r\n\t\t\t} else if ((moves.has('bellydrum') || moves.has('filletaway')) && (item === 'Sitrus Berry' || ability === 'Gluttony')) {\r\n\t\t\t\t// Belly Drum should activate Sitrus Berry\r\n\t\t\t\tif (hp % 2 === 0) break;\r\n\t\t\t} else if (moves.has('substitute') && moves.has('endeavor')) {\r\n\t\t\t\t// Luvdisc should be able to Substitute down to very low HP\r\n\t\t\t\tif (hp % 4 > 0) break;\r\n\t\t\t} else {\r\n\t\t\t\t// Maximize number of Stealth Rock switch-ins\r\n\t\t\t\tif (srWeakness <= 0 || ability === 'Regenerator' || ['Leftovers', 'Life Orb'].includes(item)) break;\r\n\t\t\t\tif (item !== 'Sitrus Berry' && hp % (4 / srWeakness) > 0) break;\r\n\t\t\t\t// Minimise number of Stealth Rock switch-ins to activate Sitrus Berry\r\n\t\t\t\tif (item === 'Sitrus Berry' && hp % (4 / srWeakness) === 0) break;\r\n\t\t\t}\r\n\t\t\tevs.hp -= 4;\r\n\t\t}\r\n\r\n\t\t// Minimize confusion damage\r\n\t\tconst noAttackStatMoves = [...moves].every(m => {\r\n\t\t\tconst move = this.dex.moves.get(m);\r\n\t\t\tif (move.damageCallback || move.damage) return true;\r\n\t\t\tif (move.id === 'shellsidearm') return false;\r\n\t\t\t// Magearna and doubles Dragonite, though these can work well as a general rule\r\n\t\t\tif (move.id === 'terablast' && (\r\n\t\t\t\tspecies.id === 'porygon2' || moves.has('shiftgear') || species.baseStats.atk > species.baseStats.spa)\r\n\t\t\t) return false;\r\n\t\t\treturn move.category !== 'Physical' || move.id === 'bodypress' || move.id === 'foulplay';\r\n\t\t});\r\n\t\tif (noAttackStatMoves && !moves.has('transform') && this.format.mod !== 'partnersincrime') {\r\n\t\t\tevs.atk = 0;\r\n\t\t\tivs.atk = 0;\r\n\t\t}\r\n\r\n\t\tif (moves.has('gyroball') || moves.has('trickroom')) {\r\n\t\t\tevs.spe = 0;\r\n\t\t\tivs.spe = 0;\r\n\t\t}\r\n\r\n\t\t// Enforce Tera Type after all set generation is done to prevent infinite generation\r\n\t\tif (this.forceTeraType) teraType = this.forceTeraType;\r\n\r\n\t\t// shuffle moves to add more randomness to camomons\r\n\t\tconst shuffledMoves = Array.from(moves);\r\n\t\tthis.prng.shuffle(shuffledMoves);\r\n\t\treturn {\r\n\t\t\tname: species.baseSpecies,\r\n\t\t\tspecies: forme,\r\n\t\t\tgender: species.baseSpecies === 'Greninja' ? 'M' : species.gender,\r\n\t\t\tshiny: this.randomChance(1, 1024),\r\n\t\t\tlevel,\r\n\t\t\tmoves: shuffledMoves,\r\n\t\t\tability,\r\n\t\t\tevs,\r\n\t\t\tivs,\r\n\t\t\titem,\r\n\t\t\tteraType,\r\n\t\t\trole,\r\n\t\t};\r\n\t}\r\n\r\n\tgetPokemonPool(\r\n\t\ttype: string,\r\n\t\tpokemonToExclude: RandomTeamsTypes.RandomSet[] = [],\r\n\t\tisMonotype = false,\r\n\t\tpokemonList: string[]\r\n\t): [{[k: string]: string[]}, string[]] {\r\n\t\tconst exclude = pokemonToExclude.map(p => toID(p.species));\r\n\t\tconst pokemonPool: {[k: string]: string[]} = {};\r\n\t\tconst baseSpeciesPool = [];\r\n\t\tfor (const pokemon of pokemonList) {\r\n\t\t\tlet species = this.dex.species.get(pokemon);\r\n\t\t\tif (exclude.includes(species.id)) continue;\r\n\t\t\tif (isMonotype) {\r\n\t\t\t\tif (!species.types.includes(type)) continue;\r\n\t\t\t\tif (typeof species.battleOnly === 'string') {\r\n\t\t\t\t\tspecies = this.dex.species.get(species.battleOnly);\r\n\t\t\t\t\tif (!species.types.includes(type)) continue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (species.baseSpecies in pokemonPool) {\r\n\t\t\t\tpokemonPool[species.baseSpecies].push(pokemon);\r\n\t\t\t} else {\r\n\t\t\t\tpokemonPool[species.baseSpecies] = [pokemon];\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Include base species 1x if 1-3 formes, 2x if 4-6 formes, 3x if 7+ formes\r\n\t\tfor (const baseSpecies of Object.keys(pokemonPool)) {\r\n\t\t\t// Squawkabilly has 4 formes, but only 2 functionally different formes, so only include it 1x\r\n\t\t\tconst weight = (baseSpecies === 'Squawkabilly') ? 1 : Math.min(Math.ceil(pokemonPool[baseSpecies].length / 3), 3);\r\n\t\t\tfor (let i = 0; i < weight; i++) baseSpeciesPool.push(baseSpecies);\r\n\t\t}\r\n\t\treturn [pokemonPool, baseSpeciesPool];\r\n\t}\r\n\r\n\trandomSets: {[species: string]: RandomTeamsTypes.RandomSpeciesData} = require('./random-sets.json');\r\n\trandomDoublesSets: {[species: string]: RandomTeamsTypes.RandomSpeciesData} = require('./random-doubles-sets.json');\r\n\r\n\trandomTeam() {\r\n\t\tthis.enforceNoDirectCustomBanlistChanges();\r\n\r\n\t\tconst seed = this.prng.seed;\r\n\t\tconst ruleTable = this.dex.formats.getRuleTable(this.format);\r\n\t\tconst pokemon: RandomTeamsTypes.RandomSet[] = [];\r\n\r\n\t\t// For Monotype\r\n\t\tconst isMonotype = !!this.forceMonotype || ruleTable.has('sametypeclause');\r\n\t\tconst isDoubles = this.format.gameType !== 'singles';\r\n\t\tconst typePool = this.dex.types.names().filter(name => name !== \"Stellar\");\r\n\t\tconst type = this.forceMonotype || this.sample(typePool);\r\n\r\n\t\t// PotD stuff\r\n\t\tconst usePotD = global.Config && Config.potd && ruleTable.has('potd');\r\n\t\tconst potd = usePotD ? this.dex.species.get(Config.potd) : null;\r\n\r\n\t\tconst baseFormes: {[k: string]: number} = {};\r\n\r\n\t\tconst typeCount: {[k: string]: number} = {};\r\n\t\tconst typeComboCount: {[k: string]: number} = {};\r\n\t\tconst typeWeaknesses: {[k: string]: number} = {};\r\n\t\tconst teamDetails: RandomTeamsTypes.TeamDetails = {};\r\n\t\tlet numMaxLevelPokemon = 0;\r\n\r\n\t\tconst pokemonList = isDoubles ? Object.keys(this.randomDoublesSets) : Object.keys(this.randomSets);\r\n\t\tconst [pokemonPool, baseSpeciesPool] = this.getPokemonPool(type, pokemon, isMonotype, pokemonList);\r\n\r\n\t\tlet leadsRemaining = this.format.gameType === 'doubles' ? 2 : 1;\r\n\t\twhile (baseSpeciesPool.length && pokemon.length < this.maxTeamSize) {\r\n\t\t\tconst baseSpecies = this.sampleNoReplace(baseSpeciesPool);\r\n\t\t\tlet species = this.dex.species.get(this.sample(pokemonPool[baseSpecies]));\r\n\t\t\tif (!species.exists) continue;\r\n\r\n\t\t\t// Limit to one of each species (Species Clause)\r\n\t\t\tif (baseFormes[species.baseSpecies]) continue;\r\n\r\n\t\t\t// Treat Ogerpon formes and Terapagos like the Tera Blast user role; reject if team has one already\r\n\t\t\tif ((species.baseSpecies === 'Ogerpon' || species.baseSpecies === 'Terapagos') && teamDetails.teraBlast) continue;\r\n\r\n\t\t\t// Illusion shouldn't be on the last slot\r\n\t\t\tif (species.baseSpecies === 'Zoroark' && pokemon.length >= (this.maxTeamSize - 1)) continue;\r\n\r\n\t\t\tconst types = species.types;\r\n\t\t\tconst typeCombo = types.slice().sort().join();\r\n\t\t\tconst weakToFreezeDry = (\r\n\t\t\t\tthis.dex.getEffectiveness('Ice', species) > 0 ||\r\n\t\t\t\t(this.dex.getEffectiveness('Ice', species) > -2 && types.includes('Water'))\r\n\t\t\t);\r\n\t\t\t// Dynamically scale limits for different team sizes. The default and minimum value is 1.\r\n\t\t\tconst limitFactor = Math.round(this.maxTeamSize / 6) || 1;\r\n\r\n\t\t\tif (!isMonotype && !this.forceMonotype) {\r\n\t\t\t\tlet skip = false;\r\n\r\n\t\t\t\t// Limit two of any type\r\n\t\t\t\tfor (const typeName of types) {\r\n\t\t\t\t\tif (typeCount[typeName] >= 2 * limitFactor) {\r\n\t\t\t\t\t\tskip = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (skip) continue;\r\n\r\n\t\t\t\t// Limit three weak to any type\r\n\t\t\t\tfor (const typeName of this.dex.types.names()) {\r\n\t\t\t\t\t// it's weak to the type\r\n\t\t\t\t\tif (this.dex.getEffectiveness(typeName, species) > 0) {\r\n\t\t\t\t\t\tif (!typeWeaknesses[typeName]) typeWeaknesses[typeName] = 0;\r\n\t\t\t\t\t\tif (typeWeaknesses[typeName] >= 3 * limitFactor) {\r\n\t\t\t\t\t\t\tskip = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (skip) continue;\r\n\r\n\t\t\t\t// Limit four weak to Freeze-Dry\r\n\t\t\t\tif (weakToFreezeDry) {\r\n\t\t\t\t\tif (!typeWeaknesses['Freeze-Dry']) typeWeaknesses['Freeze-Dry'] = 0;\r\n\t\t\t\t\tif (typeWeaknesses['Freeze-Dry'] >= 4 * limitFactor) continue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Limit one level 100 Pokemon\r\n\t\t\t\tif (!this.adjustLevel && (this.getLevel(species, isDoubles) === 100) && numMaxLevelPokemon >= limitFactor) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Limit three of any type combination in Monotype\r\n\t\t\tif (!this.forceMonotype && isMonotype && (typeComboCount[typeCombo] >= 3 * limitFactor)) continue;\r\n\r\n\t\t\t// The Pokemon of the Day\r\n\t\t\tif (potd?.exists && (pokemon.length === 1 || this.maxTeamSize === 1)) species = potd;\r\n\r\n\t\t\tlet set: RandomTeamsTypes.RandomSet;\r\n\r\n\t\t\tif (leadsRemaining) {\r\n\t\t\t\tif (\r\n\t\t\t\t\tisDoubles && DOUBLES_NO_LEAD_POKEMON.includes(species.baseSpecies) ||\r\n\t\t\t\t\t!isDoubles && NO_LEAD_POKEMON.includes(species.baseSpecies)\r\n\t\t\t\t) {\r\n\t\t\t\t\tif (pokemon.length + leadsRemaining === this.maxTeamSize) continue;\r\n\t\t\t\t\tset = this.randomSet(species, teamDetails, false, isDoubles);\r\n\t\t\t\t\tpokemon.push(set);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tset = this.randomSet(species, teamDetails, true, isDoubles);\r\n\t\t\t\t\tpokemon.unshift(set);\r\n\t\t\t\t\tleadsRemaining--;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tset = this.randomSet(species, teamDetails, false, isDoubles);\r\n\t\t\t\tpokemon.push(set);\r\n\t\t\t}\r\n\r\n\t\t\t// Don't bother tracking details for the last Pokemon\r\n\t\t\tif (pokemon.length === this.maxTeamSize) break;\r\n\r\n\t\t\t// Now that our Pokemon has passed all checks, we can increment our counters\r\n\t\t\tbaseFormes[species.baseSpecies] = 1;\r\n\r\n\t\t\t// Increment type counters\r\n\t\t\tfor (const typeName of types) {\r\n\t\t\t\tif (typeName in typeCount) {\r\n\t\t\t\t\ttypeCount[typeName]++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttypeCount[typeName] = 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (typeCombo in typeComboCount) {\r\n\t\t\t\ttypeComboCount[typeCombo]++;\r\n\t\t\t} else {\r\n\t\t\t\ttypeComboCount[typeCombo] = 1;\r\n\t\t\t}\r\n\r\n\t\t\t// Increment weakness counter\r\n\t\t\tfor (const typeName of this.dex.types.names()) {\r\n\t\t\t\t// it's weak to the type\r\n\t\t\t\tif (this.dex.getEffectiveness(typeName, species) > 0) {\r\n\t\t\t\t\ttypeWeaknesses[typeName]++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (weakToFreezeDry) typeWeaknesses['Freeze-Dry']++;\r\n\r\n\t\t\t// Increment level 100 counter\r\n\t\t\tif (set.level === 100) numMaxLevelPokemon++;\r\n\r\n\t\t\t// Track what the team has\r\n\t\t\tif (set.ability === 'Drizzle' || set.moves.includes('raindance')) teamDetails.rain = 1;\r\n\t\t\tif (set.ability === 'Drought' || set.ability === 'Orichalcum Pulse' || set.moves.includes('sunnyday')) {\r\n\t\t\t\tteamDetails.sun = 1;\r\n\t\t\t}\r\n\t\t\tif (set.ability === 'Sand Stream') teamDetails.sand = 1;\r\n\t\t\tif (set.ability === 'Snow Warning' || set.moves.includes('snowscape') || set.moves.includes('chillyreception')) {\r\n\t\t\t\tteamDetails.snow = 1;\r\n\t\t\t}\r\n\t\t\tif (set.moves.includes('spikes') || set.moves.includes('ceaselessedge')) {\r\n\t\t\t\tteamDetails.spikes = (teamDetails.spikes || 0) + 1;\r\n\t\t\t}\r\n\t\t\tif (set.moves.includes('toxicspikes') || set.ability === 'Toxic Debris') teamDetails.toxicSpikes = 1;\r\n\t\t\tif (set.moves.includes('stealthrock') || set.moves.includes('stoneaxe')) teamDetails.stealthRock = 1;\r\n\t\t\tif (set.moves.includes('stickyweb')) teamDetails.stickyWeb = 1;\r\n\t\t\tif (set.moves.includes('defog')) teamDetails.defog = 1;\r\n\t\t\tif (set.moves.includes('rapidspin') || set.moves.includes('mortalspin')) teamDetails.rapidSpin = 1;\r\n\t\t\tif (set.moves.includes('auroraveil') || (set.moves.includes('reflect') && set.moves.includes('lightscreen'))) {\r\n\t\t\t\tteamDetails.screens = 1;\r\n\t\t\t}\r\n\t\t\tif (set.role === 'Tera Blast user' || species.baseSpecies === \"Ogerpon\" || species.baseSpecies === \"Terapagos\") {\r\n\t\t\t\tteamDetails.teraBlast = 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (pokemon.length < this.maxTeamSize && pokemon.length < 12) { // large teams sometimes cannot be built\r\n\t\t\tthrow new Error(`Could not build a random team for ${this.format} (seed=${seed})`);\r\n\t\t}\r\n\r\n\t\treturn pokemon;\r\n\t}\r\n\r\n\trandomCCTeam(): RandomTeamsTypes.RandomSet[] {\r\n\t\tthis.enforceNoDirectCustomBanlistChanges();\r\n\r\n\t\tconst dex = this.dex;\r\n\t\tconst team = [];\r\n\r\n\t\tconst natures = this.dex.natures.all();\r\n\t\tconst items = this.dex.items.all();\r\n\r\n\t\tconst randomN = this.randomNPokemon(this.maxTeamSize, this.forceMonotype, undefined, undefined, true);\r\n\r\n\t\tfor (let forme of randomN) {\r\n\t\t\tlet species = dex.species.get(forme);\r\n\t\t\tif (species.isNonstandard) species = dex.species.get(species.baseSpecies);\r\n\r\n\t\t\t// Random legal item\r\n\t\t\tlet item = '';\r\n\t\t\tlet isIllegalItem;\r\n\t\t\tlet isBadItem;\r\n\t\t\tif (this.gen >= 2) {\r\n\t\t\t\tdo {\r\n\t\t\t\t\titem = this.sample(items).name;\r\n\t\t\t\t\tisIllegalItem = this.dex.items.get(item).gen > this.gen || this.dex.items.get(item).isNonstandard;\r\n\t\t\t\t\tisBadItem = item.startsWith(\"TR\") || this.dex.items.get(item).isPokeball;\r\n\t\t\t\t} while (isIllegalItem || (isBadItem && this.randomChance(19, 20)));\r\n\t\t\t}\r\n\r\n\t\t\t// Make sure forme is legal\r\n\t\t\tif (species.battleOnly) {\r\n\t\t\t\tif (typeof species.battleOnly === 'string') {\r\n\t\t\t\t\tspecies = dex.species.get(species.battleOnly);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tspecies = dex.species.get(this.sample(species.battleOnly));\r\n\t\t\t\t}\r\n\t\t\t\tforme = species.name;\r\n\t\t\t} else if (species.requiredItems && !species.requiredItems.some(req => toID(req) === item)) {\r\n\t\t\t\tif (!species.changesFrom) throw new Error(`${species.name} needs a changesFrom value`);\r\n\t\t\t\tspecies = dex.species.get(species.changesFrom);\r\n\t\t\t\tforme = species.name;\r\n\t\t\t}\r\n\r\n\t\t\t// Make sure that a base forme does not hold any forme-modifier items.\r\n\t\t\tlet itemData = this.dex.items.get(item);\r\n\t\t\tif (itemData.forcedForme && forme === this.dex.species.get(itemData.forcedForme).baseSpecies) {\r\n\t\t\t\tdo {\r\n\t\t\t\t\titemData = this.sample(items);\r\n\t\t\t\t\titem = itemData.name;\r\n\t\t\t\t} while (\r\n\t\t\t\t\titemData.gen > this.gen ||\r\n\t\t\t\t\titemData.isNonstandard ||\r\n\t\t\t\t\t(itemData.forcedForme && forme === this.dex.species.get(itemData.forcedForme).baseSpecies)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\t// Random legal ability\r\n\t\t\tconst abilities = Object.values(species.abilities).filter(a => this.dex.abilities.get(a).gen <= this.gen);\r\n\t\t\tconst ability: string = this.gen <= 2 ? 'No Ability' : this.sample(abilities);\r\n\r\n\t\t\t// Four random unique moves from the movepool\r\n\t\t\tlet pool = ['struggle'];\r\n\t\t\tif (forme === 'Smeargle') {\r\n\t\t\t\tpool = this.dex.moves.all()\r\n\t\t\t\t\t.filter(move => !(move.isNonstandard || move.isZ || move.isMax || move.realMove))\r\n\t\t\t\t\t.map(m => m.id);\r\n\t\t\t} else {\r\n\t\t\t\tpool = [...this.dex.species.getMovePool(species.id)];\r\n\t\t\t}\r\n\r\n\t\t\tconst moves = this.multipleSamplesNoReplace(pool, this.maxMoveCount);\r\n\r\n\t\t\t// Random EVs\r\n\t\t\tconst evs: StatsTable = {hp: 0, atk: 0, def: 0, spa: 0, spd: 0, spe: 0};\r\n\t\t\tconst s: StatID[] = [\"hp\", \"atk\", \"def\", \"spa\", \"spd\", \"spe\"];\r\n\t\t\tlet evpool = 510;\r\n\t\t\tdo {\r\n\t\t\t\tconst x = this.sample(s);\r\n\t\t\t\tconst y = this.random(Math.min(256 - evs[x], evpool + 1));\r\n\t\t\t\tevs[x] += y;\r\n\t\t\t\tevpool -= y;\r\n\t\t\t} while (evpool > 0);\r\n\r\n\t\t\t// Random IVs\r\n\t\t\tconst ivs = {\r\n\t\t\t\thp: this.random(32),\r\n\t\t\t\tatk: this.random(32),\r\n\t\t\t\tdef: this.random(32),\r\n\t\t\t\tspa: this.random(32),\r\n\t\t\t\tspd: this.random(32),\r\n\t\t\t\tspe: this.random(32),\r\n\t\t\t};\r\n\r\n\t\t\t// Random nature\r\n\t\t\tconst nature = this.sample(natures).name;\r\n\r\n\t\t\t// Level balance--calculate directly from stats rather than using some silly lookup table\r\n\t\t\tconst mbstmin = 1307; // Sunkern has the lowest modified base stat total, and that total is 807\r\n\r\n\t\t\tlet stats = species.baseStats;\r\n\t\t\t// If Wishiwashi, use the school-forme's much higher stats\r\n\t\t\tif (species.baseSpecies === 'Wishiwashi') stats = Dex.species.get('wishiwashischool').baseStats;\r\n\t\t\t// If Terapagos, use Terastal-forme's stats\r\n\t\t\tif (species.baseSpecies === 'Terapagos') stats = Dex.species.get('terapagosterastal').baseStats;\r\n\r\n\t\t\t// Modified base stat total assumes 31 IVs, 85 EVs in every stat\r\n\t\t\tlet mbst = (stats[\"hp\"] * 2 + 31 + 21 + 100) + 10;\r\n\t\t\tmbst += (stats[\"atk\"] * 2 + 31 + 21 + 100) + 5;\r\n\t\t\tmbst += (stats[\"def\"] * 2 + 31 + 21 + 100) + 5;\r\n\t\t\tmbst += (stats[\"spa\"] * 2 + 31 + 21 + 100) + 5;\r\n\t\t\tmbst += (stats[\"spd\"] * 2 + 31 + 21 + 100) + 5;\r\n\t\t\tmbst += (stats[\"spe\"] * 2 + 31 + 21 + 100) + 5;\r\n\r\n\t\t\tlet level;\r\n\t\t\tif (this.adjustLevel) {\r\n\t\t\t\tlevel = this.adjustLevel;\r\n\t\t\t} else {\r\n\t\t\t\tlevel = Math.floor(100 * mbstmin / mbst); // Initial level guess will underestimate\r\n\r\n\t\t\t\twhile (level < 100) {\r\n\t\t\t\t\tmbst = Math.floor((stats[\"hp\"] * 2 + 31 + 21 + 100) * level / 100 + 10);\r\n\t\t\t\t\t// Since damage is roughly proportional to level\r\n\t\t\t\t\tmbst += Math.floor(((stats[\"atk\"] * 2 + 31 + 21 + 100) * level / 100 + 5) * level / 100);\r\n\t\t\t\t\tmbst += Math.floor((stats[\"def\"] * 2 + 31 + 21 + 100) * level / 100 + 5);\r\n\t\t\t\t\tmbst += Math.floor(((stats[\"spa\"] * 2 + 31 + 21 + 100) * level / 100 + 5) * level / 100);\r\n\t\t\t\t\tmbst += Math.floor((stats[\"spd\"] * 2 + 31 + 21 + 100) * level / 100 + 5);\r\n\t\t\t\t\tmbst += Math.floor((stats[\"spe\"] * 2 + 31 + 21 + 100) * level / 100 + 5);\r\n\r\n\t\t\t\t\tif (mbst >= mbstmin) break;\r\n\t\t\t\t\tlevel++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Random happiness\r\n\t\t\tconst happiness = this.random(256);\r\n\r\n\t\t\t// Random shininess\r\n\t\t\tconst shiny = this.randomChance(1, 1024);\r\n\r\n\t\t\tconst set: RandomTeamsTypes.RandomSet = {\r\n\t\t\t\tname: species.baseSpecies,\r\n\t\t\t\tspecies: species.name,\r\n\t\t\t\tgender: species.gender,\r\n\t\t\t\titem,\r\n\t\t\t\tability,\r\n\t\t\t\tmoves,\r\n\t\t\t\tevs,\r\n\t\t\t\tivs,\r\n\t\t\t\tnature,\r\n\t\t\t\tlevel,\r\n\t\t\t\thappiness,\r\n\t\t\t\tshiny,\r\n\t\t\t};\r\n\t\t\tif (this.gen === 9) {\r\n\t\t\t\t// Tera type\r\n\t\t\t\tif (this.forceTeraType) {\r\n\t\t\t\t\tset.teraType = this.forceTeraType;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tset.teraType = this.sample(this.dex.types.all()).name;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tteam.push(set);\r\n\t\t}\r\n\r\n\t\treturn team;\r\n\t}\r\n\r\n\trandomNPokemon(n: number, requiredType?: string, minSourceGen?: number, ruleTable?: RuleTable, requireMoves = false) {\r\n\t\t// Picks `n` random pokemon--no repeats, even among formes\r\n\t\t// Also need to either normalize for formes or select formes at random\r\n\t\t// Unreleased are okay but no CAP\r\n\t\tif (requiredType && !this.dex.types.get(requiredType).exists) {\r\n\t\t\tthrow new Error(`\"${requiredType}\" is not a valid type.`);\r\n\t\t}\r\n\r\n\t\tconst isNotCustom = !ruleTable;\r\n\r\n\t\tconst pool: number[] = [];\r\n\t\tlet speciesPool: Species[] = [];\r\n\t\tif (isNotCustom) {\r\n\t\t\tspeciesPool = [...this.dex.species.all()];\r\n\t\t\tfor (const species of speciesPool) {\r\n\t\t\t\tif (species.isNonstandard && species.isNonstandard !== 'Unobtainable') continue;\r\n\t\t\t\tif (requireMoves) {\r\n\t\t\t\t\tconst hasMovesInCurrentGen = this.dex.species.getMovePool(species.id).size;\r\n\t\t\t\t\tif (!hasMovesInCurrentGen) continue;\r\n\t\t\t\t}\r\n\t\t\t\tif (requiredType && !species.types.includes(requiredType)) continue;\r\n\t\t\t\tif (minSourceGen && species.gen < minSourceGen) continue;\r\n\t\t\t\tconst num = species.num;\r\n\t\t\t\tif (num <= 0 || pool.includes(num)) continue;\r\n\t\t\t\tpool.push(num);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tconst EXISTENCE_TAG = ['past', 'future', 'lgpe', 'unobtainable', 'cap', 'custom', 'nonexistent'];\r\n\t\t\tconst nonexistentBanReason = ruleTable.check('nonexistent');\r\n\t\t\t// Assume tierSpecies does not differ from species here (mega formes can be used without their stone, etc)\r\n\t\t\tfor (const species of this.dex.species.all()) {\r\n\t\t\t\tif (requiredType && !species.types.includes(requiredType)) continue;\r\n\r\n\t\t\t\tlet banReason = ruleTable.check('pokemon:' + species.id);\r\n\t\t\t\tif (banReason) continue;\r\n\t\t\t\tif (banReason !== '') {\r\n\t\t\t\t\tif (species.isMega && ruleTable.check('pokemontag:mega')) continue;\r\n\r\n\t\t\t\t\tbanReason = ruleTable.check('basepokemon:' + toID(species.baseSpecies));\r\n\t\t\t\t\tif (banReason) continue;\r\n\t\t\t\t\tif (banReason !== '' || this.dex.species.get(species.baseSpecies).isNonstandard !== species.isNonstandard) {\r\n\t\t\t\t\t\tconst nonexistentCheck = Tags.nonexistent.genericFilter!(species) && nonexistentBanReason;\r\n\t\t\t\t\t\tlet tagWhitelisted = false;\r\n\t\t\t\t\t\tlet tagBlacklisted = false;\r\n\t\t\t\t\t\tfor (const ruleid of ruleTable.tagRules) {\r\n\t\t\t\t\t\t\tif (ruleid.startsWith('*')) continue;\r\n\t\t\t\t\t\t\tconst tagid = ruleid.slice(12);\r\n\t\t\t\t\t\t\tconst tag = Tags[tagid];\r\n\t\t\t\t\t\t\tif ((tag.speciesFilter || tag.genericFilter)!(species)) {\r\n\t\t\t\t\t\t\t\tconst existenceTag = EXISTENCE_TAG.includes(tagid);\r\n\t\t\t\t\t\t\t\tif (ruleid.startsWith('+')) {\r\n\t\t\t\t\t\t\t\t\tif (!existenceTag && nonexistentCheck) continue;\r\n\t\t\t\t\t\t\t\t\ttagWhitelisted = true;\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\ttagBlacklisted = true;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (tagBlacklisted) continue;\r\n\t\t\t\t\t\tif (!tagWhitelisted) {\r\n\t\t\t\t\t\t\tif (ruleTable.check('pokemontag:allpokemon')) continue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tspeciesPool.push(species);\r\n\t\t\t\tconst num = species.num;\r\n\t\t\t\tif (pool.includes(num)) continue;\r\n\t\t\t\tpool.push(num);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst hasDexNumber: {[k: string]: number} = {};\r\n\t\tfor (let i = 0; i < n; i++) {\r\n\t\t\tconst num = this.sampleNoReplace(pool);\r\n\t\t\thasDexNumber[num] = i;\r\n\t\t}\r\n\r\n\t\tconst formes: string[][] = [];\r\n\t\tfor (const species of speciesPool) {\r\n\t\t\tif (!(species.num in hasDexNumber)) continue;\r\n\t\t\tif (isNotCustom && (species.gen > this.gen ||\r\n\t\t\t\t(species.isNonstandard && species.isNonstandard !== 'Unobtainable'))) continue;\r\n\t\t\tif (requiredType && !species.types.includes(requiredType)) continue;\r\n\t\t\tif (!formes[hasDexNumber[species.num]]) formes[hasDexNumber[species.num]] = [];\r\n\t\t\tformes[hasDexNumber[species.num]].push(species.name);\r\n\t\t}\r\n\r\n\t\tif (formes.length < n) {\r\n\t\t\tthrow new Error(`Legal Pokemon forme count insufficient to support Max Team Size: (${formes.length} / ${n}).`);\r\n\t\t}\r\n\r\n\t\tconst nPokemon = [];\r\n\t\tfor (let i = 0; i < n; i++) {\r\n\t\t\tif (!formes[i].length) {\r\n\t\t\t\tthrow new Error(`Invalid pokemon gen ${this.gen}: ${JSON.stringify(formes)} numbers ${JSON.stringify(hasDexNumber)}`);\r\n\t\t\t}\r\n\t\t\tnPokemon.push(this.sample(formes[i]));\r\n\t\t}\r\n\t\treturn nPokemon;\r\n\t}\r\n\r\n\trandomHCTeam(): PokemonSet[] {\r\n\t\tconst hasCustomBans = this.hasDirectCustomBanlistChanges();\r\n\t\tconst ruleTable = this.dex.formats.getRuleTable(this.format);\r\n\t\tconst hasNonexistentBan = hasCustomBans && ruleTable.check('nonexistent');\r\n\t\tconst hasNonexistentWhitelist = hasCustomBans && (hasNonexistentBan === '');\r\n\r\n\t\tif (hasCustomBans) {\r\n\t\t\tthis.enforceNoDirectComplexBans();\r\n\t\t}\r\n\r\n\t\t// Item Pool\r\n\t\tconst doItemsExist = this.gen > 1;\r\n\t\tlet itemPool: Item[] = [];\r\n\t\tif (doItemsExist) {\r\n\t\t\tif (!hasCustomBans) {\r\n\t\t\t\titemPool = [...this.dex.items.all()].filter(item => (item.gen <= this.gen && !item.isNonstandard));\r\n\t\t\t} else {\r\n\t\t\t\tconst hasAllItemsBan = ruleTable.check('pokemontag:allitems');\r\n\t\t\t\tfor (const item of this.dex.items.all()) {\r\n\t\t\t\t\tlet banReason = ruleTable.check('item:' + item.id);\r\n\t\t\t\t\tif (banReason) continue;\r\n\t\t\t\t\tif (banReason !== '' && item.id) {\r\n\t\t\t\t\t\tif (hasAllItemsBan) continue;\r\n\t\t\t\t\t\tif (item.isNonstandard) {\r\n\t\t\t\t\t\t\tbanReason = ruleTable.check('pokemontag:' + toID(item.isNonstandard));\r\n\t\t\t\t\t\t\tif (banReason) continue;\r\n\t\t\t\t\t\t\tif (banReason !== '' && item.isNonstandard !== 'Unobtainable') {\r\n\t\t\t\t\t\t\t\tif (hasNonexistentBan) continue;\r\n\t\t\t\t\t\t\t\tif (!hasNonexistentWhitelist) continue;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\titemPool.push(item);\r\n\t\t\t\t}\r\n\t\t\t\tif (ruleTable.check('item:noitem')) {\r\n\t\t\t\t\tthis.enforceCustomPoolSizeNoComplexBans('item', itemPool, this.maxTeamSize, 'Max Team Size');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Ability Pool\r\n\t\tconst doAbilitiesExist = (this.gen > 2) && (this.dex.currentMod !== 'gen7letsgo');\r\n\t\tlet abilityPool: Ability[] = [];\r\n\t\tif (doAbilitiesExist) {\r\n\t\t\tif (!hasCustomBans) {\r\n\t\t\t\tabilityPool = [...this.dex.abilities.all()].filter(ability => (ability.gen <= this.gen && !ability.isNonstandard));\r\n\t\t\t} else {\r\n\t\t\t\tconst hasAllAbilitiesBan = ruleTable.check('pokemontag:allabilities');\r\n\t\t\t\tfor (const ability of this.dex.abilities.all()) {\r\n\t\t\t\t\tlet banReason = ruleTable.check('ability:' + ability.id);\r\n\t\t\t\t\tif (banReason) continue;\r\n\t\t\t\t\tif (banReason !== '') {\r\n\t\t\t\t\t\tif (hasAllAbilitiesBan) continue;\r\n\t\t\t\t\t\tif (ability.isNonstandard) {\r\n\t\t\t\t\t\t\tbanReason = ruleTable.check('pokemontag:' + toID(ability.isNonstandard));\r\n\t\t\t\t\t\t\tif (banReason) continue;\r\n\t\t\t\t\t\t\tif (banReason !== '') {\r\n\t\t\t\t\t\t\t\tif (hasNonexistentBan) continue;\r\n\t\t\t\t\t\t\t\tif (!hasNonexistentWhitelist) continue;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tabilityPool.push(ability);\r\n\t\t\t\t}\r\n\t\t\t\tif (ruleTable.check('ability:noability')) {\r\n\t\t\t\t\tthis.enforceCustomPoolSizeNoComplexBans('ability', abilityPool, this.maxTeamSize, 'Max Team Size');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Move Pool\r\n\t\tconst setMoveCount = ruleTable.maxMoveCount;\r\n\t\tlet movePool: Move[] = [];\r\n\t\tif (!hasCustomBans) {\r\n\t\t\tmovePool = [...this.dex.moves.all()].filter(move =>\r\n\t\t\t\t(move.gen <= this.gen && !move.isNonstandard));\r\n\t\t} else {\r\n\t\t\tconst hasAllMovesBan = ruleTable.check('pokemontag:allmoves');\r\n\t\t\tfor (const move of this.dex.moves.all()) {\r\n\t\t\t\tlet banReason = ruleTable.check('move:' + move.id);\r\n\t\t\t\tif (banReason) continue;\r\n\t\t\t\tif (banReason !== '') {\r\n\t\t\t\t\tif (hasAllMovesBan) continue;\r\n\t\t\t\t\tif (move.isNonstandard) {\r\n\t\t\t\t\t\tbanReason = ruleTable.check('pokemontag:' + toID(move.isNonstandard));\r\n\t\t\t\t\t\tif (banReason) continue;\r\n\t\t\t\t\t\tif (banReason !== '' && move.isNonstandard !== 'Unobtainable') {\r\n\t\t\t\t\t\t\tif (hasNonexistentBan) continue;\r\n\t\t\t\t\t\t\tif (!hasNonexistentWhitelist) continue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tmovePool.push(move);\r\n\t\t\t}\r\n\t\t\tthis.enforceCustomPoolSizeNoComplexBans('move', movePool, this.maxTeamSize * setMoveCount, 'Max Team Size * Max Move Count');\r\n\t\t}\r\n\r\n\t\t// Nature Pool\r\n\t\tconst doNaturesExist = this.gen > 2;\r\n\t\tlet naturePool: Nature[] = [];\r\n\t\tif (doNaturesExist) {\r\n\t\t\tif (!hasCustomBans) {\r\n\t\t\t\tnaturePool = [...this.dex.natures.all()];\r\n\t\t\t} else {\r\n\t\t\t\tconst hasAllNaturesBan = ruleTable.check('pokemontag:allnatures');\r\n\t\t\t\tfor (const nature of this.dex.natures.all()) {\r\n\t\t\t\t\tlet banReason = ruleTable.check('nature:' + nature.id);\r\n\t\t\t\t\tif (banReason) continue;\r\n\t\t\t\t\tif (banReason !== '' && nature.id) {\r\n\t\t\t\t\t\tif (hasAllNaturesBan) continue;\r\n\t\t\t\t\t\tif (nature.isNonstandard) {\r\n\t\t\t\t\t\t\tbanReason = ruleTable.check('pokemontag:' + toID(nature.isNonstandard));\r\n\t\t\t\t\t\t\tif (banReason) continue;\r\n\t\t\t\t\t\t\tif (banReason !== '' && nature.isNonstandard !== 'Unobtainable') {\r\n\t\t\t\t\t\t\t\tif (hasNonexistentBan) continue;\r\n\t\t\t\t\t\t\t\tif (!hasNonexistentWhitelist) continue;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tnaturePool.push(nature);\r\n\t\t\t\t}\r\n\t\t\t\t// There is no 'nature:nonature' rule so do not constrain pool size\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst randomN = this.randomNPokemon(this.maxTeamSize, this.forceMonotype, undefined,\r\n\t\t\thasCustomBans ? ruleTable : undefined);\r\n\r\n\t\tconst team = [];\r\n\t\tfor (const forme of randomN) {\r\n\t\t\t// Choose forme\r\n\t\t\tconst species = this.dex.species.get(forme);\r\n\r\n\t\t\t// Random unique item\r\n\t\t\tlet item = '';\r\n\t\t\tlet itemData;\r\n\t\t\tlet isBadItem;\r\n\t\t\tif (doItemsExist) {\r\n\t\t\t\t// We discard TRs and Balls with 95% probability because of their otherwise overwhelming presence\r\n\t\t\t\tdo {\r\n\t\t\t\t\titemData = this.sampleNoReplace(itemPool);\r\n\t\t\t\t\titem = itemData?.name;\r\n\t\t\t\t\tisBadItem = item.startsWith(\"TR\") || itemData.isPokeball;\r\n\t\t\t\t} while (isBadItem && this.randomChance(19, 20) && itemPool.length > this.maxTeamSize);\r\n\t\t\t}\r\n\r\n\t\t\t// Random unique ability\r\n\t\t\tlet ability = 'No Ability';\r\n\t\t\tlet abilityData;\r\n\t\t\tif (doAbilitiesExist) {\r\n\t\t\t\tabilityData = this.sampleNoReplace(abilityPool);\r\n\t\t\t\tability = abilityData?.name;\r\n\t\t\t}\r\n\r\n\t\t\t// Random unique moves\r\n\t\t\tconst m = [];\r\n\t\t\tdo {\r\n\t\t\t\tconst move = this.sampleNoReplace(movePool);\r\n\t\t\t\tm.push(move.id);\r\n\t\t\t} while (m.length < setMoveCount);\r\n\r\n\t\t\t// Random EVs\r\n\t\t\tconst evs = {hp: 0, atk: 0, def: 0, spa: 0, spd: 0, spe: 0};\r\n\t\t\tif (this.gen === 6) {\r\n\t\t\t\tlet evpool = 510;\r\n\t\t\t\tdo {\r\n\t\t\t\t\tconst x = this.sample(Dex.stats.ids());\r\n\t\t\t\t\tconst y = this.random(Math.min(256 - evs[x], evpool + 1));\r\n\t\t\t\t\tevs[x] += y;\r\n\t\t\t\t\tevpool -= y;\r\n\t\t\t\t} while (evpool > 0);\r\n\t\t\t} else {\r\n\t\t\t\tfor (const x of Dex.stats.ids()) {\r\n\t\t\t\t\tevs[x] = this.random(256);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Random IVs\r\n\t\t\tconst ivs: StatsTable = {\r\n\t\t\t\thp: this.random(32),\r\n\t\t\t\tatk: this.random(32),\r\n\t\t\t\tdef: this.random(32),\r\n\t\t\t\tspa: this.random(32),\r\n\t\t\t\tspd: this.random(32),\r\n\t\t\t\tspe: this.random(32),\r\n\t\t\t};\r\n\r\n\t\t\t// Random nature\r\n\t\t\tlet nature = '';\r\n\t\t\tif (doNaturesExist && (naturePool.length > 0)) {\r\n\t\t\t\tnature = this.sample(naturePool).name;\r\n\t\t\t}\r\n\r\n\t\t\t// Level balance\r\n\t\t\tconst mbstmin = 1307;\r\n\t\t\tconst stats = species.baseStats;\r\n\t\t\tlet mbst = (stats['hp'] * 2 + 31 + 21 + 100) + 10;\r\n\t\t\tmbst += (stats['atk'] * 2 + 31 + 21 + 100) + 5;\r\n\t\t\tmbst += (stats['def'] * 2 + 31 + 21 + 100) + 5;\r\n\t\t\tmbst += (stats['spa'] * 2 + 31 + 21 + 100) + 5;\r\n\t\t\tmbst += (stats['spd'] * 2 + 31 + 21 + 100) + 5;\r\n\t\t\tmbst += (stats['spe'] * 2 + 31 + 21 + 100) + 5;\r\n\r\n\t\t\tlet level;\r\n\t\t\tif (this.adjustLevel) {\r\n\t\t\t\tlevel = this.adjustLevel;\r\n\t\t\t} else {\r\n\t\t\t\tlevel = Math.floor(100 * mbstmin / mbst);\r\n\t\t\t\twhile (level < 100) {\r\n\t\t\t\t\tmbst = Math.floor((stats['hp'] * 2 + 31 + 21 + 100) * level / 100 + 10);\r\n\t\t\t\t\tmbst += Math.floor(((stats['atk'] * 2 + 31 + 21 + 100) * level / 100 + 5) * level / 100);\r\n\t\t\t\t\tmbst += Math.floor((stats['def'] * 2 + 31 + 21 + 100) * level / 100 + 5);\r\n\t\t\t\t\tmbst += Math.floor(((stats['spa'] * 2 + 31 + 21 + 100) * level / 100 + 5) * level / 100);\r\n\t\t\t\t\tmbst += Math.floor((stats['spd'] * 2 + 31 + 21 + 100) * level / 100 + 5);\r\n\t\t\t\t\tmbst += Math.floor((stats['spe'] * 2 + 31 + 21 + 100) * level / 100 + 5);\r\n\t\t\t\t\tif (mbst >= mbstmin) break;\r\n\t\t\t\t\tlevel++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Random happiness\r\n\t\t\tconst happiness = this.random(256);\r\n\r\n\t\t\t// Random shininess\r\n\t\t\tconst shiny = this.randomChance(1, 1024);\r\n\r\n\t\t\tconst set: PokemonSet = {\r\n\t\t\t\tname: species.baseSpecies,\r\n\t\t\t\tspecies: species.name,\r\n\t\t\t\tgender: species.gender,\r\n\t\t\t\titem,\r\n\t\t\t\tability,\r\n\t\t\t\tmoves: m,\r\n\t\t\t\tevs,\r\n\t\t\t\tivs,\r\n\t\t\t\tnature,\r\n\t\t\t\tlevel,\r\n\t\t\t\thappiness,\r\n\t\t\t\tshiny,\r\n\t\t\t};\r\n\t\t\tif (this.gen === 9) {\r\n\t\t\t\t// Random Tera type\r\n\t\t\t\tif (this.forceTeraType) {\r\n\t\t\t\t\tset.teraType = this.forceTeraType;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tset.teraType = this.sample(this.dex.types.all()).name;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tteam.push(set);\r\n\t\t}\r\n\r\n\t\treturn team;\r\n\t}\r\n}\r\n\r\nexport default RandomTeams;\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAwB;AACxB,iBAAoB;AACpB,kBAA6B;AAE7B,kBAAmB;AA6BZ,MAAM,oBAAoB,iBAAM,SAAiB;AAAA,EAIvD,cAAc;AACb,UAAM;AACN,SAAK,gBAAgB,oBAAI,IAAI;AAC7B,SAAK,WAAW;AAAA,EACjB;AAAA,EAEA,IAAI,KAAqB;AACxB,WAAO,MAAM,IAAI,GAAG,KAAK;AAAA,EAC1B;AACD;AASA,MAAM,iBAAiB;AAAA,EACtB;AAAA,EAAa;AAAA,EAAa;AAAA,EAAa;AAAA,EAAc;AAAA,EAAW;AAAA,EAAS;AAAA,EAAW;AAAA,EAAY;AAAA,EAAc;AAAA,EAAe;AAC9H;AAEA,MAAM,iBAAiB;AAAA,EACtB;AAAA,EAAe;AAAA,EAAe;AAAA,EAAa;AAAA,EAAc;AAAA,EAAY;AAAA,EAAW;AAAA,EAAc;AAC/F;AAEA,MAAM,iBAAiB;AAAA,EACtB;AAAA,EAAa;AAAA,EAAU;AAAA,EAAQ;AAAA,EAAS;AAAA,EAAe;AAAA,EAAa;AAAA,EAAQ;AAAA,EAAY;AAAA,EAAgB;AAAA,EAAe;AAAA,EAAU;AAClI;AAEA,MAAM,gBAAgB;AAAA,EACrB;AAAA,EAAY;AAAA,EAAc;AAAA,EAAY;AAAA,EAAa;AAAA,EAAe;AAAA,EAAY;AAC/E;AAEA,MAAM,cAAc;AAAA,EACnB;AAAA,EAAkB;AAAA,EAAU;AAAA,EAAa;AAAA,EAAa;AAAA,EAAa;AAAA,EAAc;AAClF;AAEA,MAAM,cAAc;AAAA,EACnB;AAAA,EAAW;AAAA,EAAc;AAAA,EAAe;AAAA,EAAc;AACvD;AAEA,MAAM,QAAQ;AAAA,EACb;AAAA,EAAa;AAAA,EAAW;AAAA,EAAc;AAAA,EAAa;AAAA,EAAU;AAAA,EAAY;AAAA,EAAkB;AAAA,EAAQ;AAAA,EAAe;AAAA,EAClH;AAAA,EAAe;AAAA,EAAe;AAAA,EAAU;AAAA,EAAa;AAAA,EAAQ;AAAA,EAAe;AAAA,EAAY;AAAA,EAAa;AAAA,EAAa;AAAA,EAClH;AAAA,EAAe;AAAA,EAAc;AAAA,EAAc;AAAA,EAAa;AAAA,EAAe;AAAA,EAAY;AAAA,EAAU;AAAA,EAAc;AAAA,EAAU;AACtH;AACA,MAAM,gBAAgB;AAAA,EACrB;AAAA,EAAc;AAAA,EAAS;AAAA,EAAW;AAAA,EAAY;AAAA,EAAS;AAAA,EAAY;AAAA,EAAc;AAAA,EAAY;AAAA,EAAe;AAC7G;AAEA,MAAM,UAAU;AAAA,EACf;AAAA,EAAc;AAAA,EAAW;AAAA,EAAU;AAAA,EAAiB;AAAA,EAAe;AAAA,EAAW;AAAA,EAAe;AAAA,EAAa;AAAA,EAC1G;AAAA,EAAc;AAAA,EAAc;AAAA,EAAc;AAAA,EAAY;AAAA,EAAa;AAAA,EAAW;AAAA,EAAS;AAAA,EAAe;AAAA,EAAY;AAAA,EAClH;AAAA,EAAe;AAAA,EAAY;AAAA,EAAW;AAAA,EAAc;AAAA,EAAe;AAAA,EAAa;AAAA,EAAc;AAAA,EAAc;AAAA,EAAU;AAAA,EAAS;AAAA,EAC/H;AAAA,EAAe;AAAA,EAAa;AAAA,EAAY;AAAA,EAAgB;AAAA,EAAe;AAAA,EAAW;AAAA,EAAS;AAAA,EAAe;AAAA,EAAe;AAAA,EACzH;AAAA,EAAc;AAAA,EAAc;AAAA,EAAiB;AAC9C;AAEA,MAAM,UAAU;AAAA,EACf;AAAA,EAAU;AAAA,EAAe;AAAA,EAAa;AACvC;AAEA,MAAM,gBAAgB;AAAA,EACrB;AAAA,EAAiB;AAAA,EAAkB;AAAA,EAAW;AAAA,EAAY;AAC3D;AAEA,MAAM,cAAc;AAAA,EACnB;AAAA,EAAmB;AAAA,EAAY;AAAA,EAAe;AAAA,EAAY;AAAA,EAAY;AAAA,EAAS;AAChF;AAGA,MAAM,aAAa;AAAA,EAClB,CAAC,eAAe,SAAS;AAAA,EACzB,CAAC,aAAa,MAAM;AAAA,EACpB,CAAC,WAAW,MAAM;AAAA,EAClB,CAAC,aAAa,SAAS;AAAA,EACvB,CAAC,aAAa,YAAY;AAC3B;AAGA,MAAM,mBAAmB;AAAA,EACxB;AAAA,EAAW;AAAA,EAAe;AAAA,EAAa;AAAA,EAAW;AACnD;AAGA,MAAM,kBAAkB;AAAA,EACvB;AAAA,EAAgB;AAAA,EAAgB;AAAA,EAAU;AAC3C;AACA,MAAM,0BAA0B;AAAA,EAC/B;AAAA,EAAe;AAAA,EAAc;AAAA,EAAgB;AAAA,EAAU;AACxD;AAEA,MAAM,6BAA6B;AAAA,EAClC;AAAA,EAAY;AAAA,EAAa;AAAA,EAAU;AACpC;AAEA,SAAS,oBAAoB,MAAY;AACxC,SAAO,KAAK,WAAW,UAAU,KAAK,UAAU,SAAS,MAAM,KAAK,UAAU,SAAS;AACxF;AAEO,MAAM,YAAY;AAAA,EAoBxB,YAAY,QAAyB,MAA8B;AAujDnE,sBAAsE,QAAQ,oBAAoB;AAClG,6BAA6E,QAAQ,4BAA4B;AAvjDhH,aAAS,eAAI,QAAQ,IAAI,MAAM;AAC/B,SAAK,MAAM,eAAI,UAAU,MAAM;AAC/B,SAAK,MAAM,KAAK,IAAI;AACpB,SAAK,SAAS;AAEd,UAAM,YAAY,eAAI,QAAQ,aAAa,MAAM;AACjD,SAAK,cAAc,UAAU;AAC7B,SAAK,cAAc,UAAU;AAC7B,SAAK,eAAe,UAAU;AAC9B,UAAM,gBAAgB,UAAU,WAAW,IAAI,eAAe;AAC9D,SAAK,gBAAgB,iBAAiB,KAAK,IAAI,MAAM,IAAI,aAAa,EAAE,SACvE,KAAK,IAAI,MAAM,IAAI,aAAa,EAAE,OAAO;AAC1C,UAAM,gBAAgB,UAAU,WAAW,IAAI,eAAe;AAC9D,SAAK,gBAAgB,iBAAiB,KAAK,IAAI,MAAM,IAAI,aAAa,EAAE,SACvE,KAAK,IAAI,MAAM,IAAI,aAAa,EAAE,OAAO;AAE1C,SAAK,cAAc;AACnB,SAAK,SAAS;AACd,SAAK,OAAO,QAAQ,CAAC,MAAM,QAAQ,IAAI,IAAI,OAAO,IAAI,iBAAK,IAAI;AAE/D,SAAK,0BAA0B;AAAA,MAC9B,KAAK,CAAC,UAAU,OAAO,WAAW,OAAO,YACxC,SAAS,SAAS,UAAU,KAAK,SAAS,SAAS,UAAU,KAC5D,CAAC,QAAQ,IAAI,KAAK,KAAK,MAAM,SAAS,UAAU;AAAA,MAElD,MAAM,CAAC,UAAU,OAAO,WAAW,OAAO,YAAY,CAAC,QAAQ,IAAI,MAAM;AAAA,MACzE,QAAQ,CAAC,UAAU,OAAO,WAAW,OAAO,YAAY,CAAC,QAAQ,IAAI,QAAQ;AAAA,MAC7E,UAAU,CAAC,UAAU,OAAO,WAAW,OAAO,YAAY,CAAC,QAAQ,IAAI,UAAU;AAAA,MACjF,OAAO,CAAC,UAAU,OAAO,WAAW,OAAO,YAAY,CAAC,QAAQ,IAAI,OAAO;AAAA,MAC3E,UAAU,CAAC,UAAU,OAAO,WAAW,OAAO,YAAY,CAAC,QAAQ,IAAI,UAAU;AAAA,MACjF,MAAM,CAAC,UAAU,OAAO,WAAW,OAAO,SAAS,YAAY,CAAC,QAAQ,IAAI,MAAM;AAAA,MAClF,QAAQ,CAAC,UAAU,OAAO,WAAW,OAAO,YAAY,CAAC,QAAQ,IAAI,QAAQ;AAAA,MAC7E,OAAO,CAAC,UAAU,OAAO,WAAW,OAAO,YAAY,CAAC,QAAQ,IAAI,OAAO;AAAA,MAC3E,OAAO,CAAC,UAAU,OAAO,WAAW,OAAO,SAAS,YACnD,CAAC,QAAQ,IAAI,OAAO,MACnB,SAAS,SAAS,WAAW,KAAK,QAAQ,UAAU,OAAO,OAC3D,MAAM,SAAS,UAAU,KAAK,UAAU,IAAI,YAAY;AAAA,MAG1D,QAAQ,CAAC,UAAU,OAAO,WAAW,OAAO,YAAY,CAAC,QAAQ,IAAI,QAAQ;AAAA,MAC7E,KAAK,CAAC,UAAU,OAAO,WAAW,OAAO,YACxC,SAAS,SAAS,WAAW,KAAK,SAAS,SAAS,UAAU,KAAK,CAAC,QAAQ,IAAI,KAAK;AAAA,MAEtF,QAAQ,CAAC,UAAU,OAAO,OAAO,YAAa,SAAS,SAAS,WAAW,KAAK,SAAS,SAAS,YAAY;AAAA,MAC9G,QAAQ,CAAC,UAAU,OAAO,WAAW,OAAO,YAAY;AACvD,YAAI,MAAM,SAAS,QAAQ;AAAG,iBAAO;AACrC,eAAO,CAAC,QAAQ,IAAI,QAAQ;AAAA,MAC7B;AAAA,MACA,SAAS,CAAC,UAAU,OAAO,WAAW,OAAO,SAAS,SAAS,aAAa,QAAQ,cAAc;AACjG,YAAI,QAAQ,IAAI,SAAS;AAAG,iBAAO;AACnC,YAAI,SAAS,SAAS,UAAU,KAAK,UAAU,IAAI,YAAY;AAAG,iBAAO;AACzE,YAAI,aAAa,SAAS,SAAS,cAAc;AAAG,iBAAO;AAC3D,eAAO,UAAU,IAAI,eAAe,KAAK,CAAC,YAAY,YAAY,QAAQ,SAAS,QAAQ,EAAE,KAAK,OAAK,MAAM,SAAS,CAAC,CAAC;AAAA,MACzH;AAAA,MACA,MAAM,CAAC,UAAU,OAAO,WAAW,OAAO,SAAS,YAAY,CAAC,QAAQ,IAAI,MAAM,KAAK,QAAQ,UAAU,OAAO;AAAA,MAChH,OAAO,CAAC,UAAU,OAAO,WAAW,OAAO,SAAS,SAAS,aAAa,QAAQ,cACjF,CAAC,QAAQ,IAAI,OAAO,MACnB,aAAa,QAAQ,UAAU,OAAO,MAAM,SAAS,SAAS,eAAe,KAAK,SAAS,SAAS,YAAY;AAAA,MAElH,OAAO,CAAC,UAAU,OAAO,WAAW,OAAO,YAAa,CAAC,QAAQ,IAAI,OAAO,KAAK,CAAC,MAAM,SAAS,QAAQ;AAAA,IAC1G;AAAA,EACD;AAAA,EAEA,QAAQ,MAAwB;AAC/B,SAAK,OAAO,QAAQ,CAAC,MAAM,QAAQ,IAAI,IAAI,OAAO,IAAI,iBAAK,IAAI;AAAA,EAChE;AAAA,EAEA,QAAQ,SAA8C;AACrD,UAAM,gBACL,OAAO,KAAK,OAAO,SAAS,YAAY,KAAK,OAAO,KAAK,WAAW,QAAQ,IACxE,KAAK,OAAO,OAAO,SAAS;AAEjC,WAAO,KAAK,iBAAiB,YAAY,EAAE,OAAO;AAAA,EACnD;AAAA,EAEA,aAAa,WAAmB,aAAqB;AACpD,WAAO,KAAK,KAAK,aAAa,WAAW,WAAW;AAAA,EACrD;AAAA,EAEA,OAAU,OAAwB;AACjC,WAAO,KAAK,KAAK,OAAO,KAAK;AAAA,EAC9B;AAAA,EAEA,cAAiB,MAAkB;AAClC,QAAI,MAAM,QAAQ,IAAI,GAAG;AACxB,aAAO,KAAK,OAAO,IAAI;AAAA,IACxB;AACA,WAAO;AAAA,EACR;AAAA,EAEA,OAAO,GAAY,GAAY;AAC9B,WAAO,KAAK,KAAK,KAAK,GAAG,CAAC;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,QAAQ,MAAa,OAAe;AAInC,UAAM,SAAS,KAAK;AACpB,QAAI,QAAQ,KAAK,SAAS,KAAK,QAAQ;AAEtC,YAAM,IAAI,MAAM,SAAS,qCAAqC;AAAA,IAC/D;AAEA,UAAM,UAAU,KAAK,KAAK;AAC1B,SAAK,KAAK,IAAI,KAAK,SAAS,CAAC;AAC7B,SAAK,IAAI;AACT,WAAO;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,gBAAgB,MAAa;AAC5B,UAAM,SAAS,KAAK;AACpB,QAAI,WAAW;AAAG,aAAO;AACzB,UAAM,QAAQ,KAAK,OAAO,MAAM;AAChC,WAAO,KAAK,QAAQ,MAAM,KAAK;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,yBAA4B,MAAW,GAAgB;AACtD,UAAM,UAAU,CAAC;AACjB,WAAO,QAAQ,SAAS,KAAK,KAAK,QAAQ;AACzC,cAAQ,KAAK,KAAK,gBAAgB,IAAI,CAAC;AAAA,IACxC;AAEA,WAAO;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA,EAMQ,gCAAgC;AACvC,QAAI,KAAK,OAAO,QAAQ,UAAU,KAAK,OAAO,WAAW,UAAU,KAAK,OAAO,UAAU;AAAQ,aAAO;AACxG,QAAI,CAAC,KAAK,OAAO;AAAa,aAAO;AACrC,eAAW,QAAQ,KAAK,OAAO,aAAa;AAC3C,iBAAW,mBAAmB,CAAC,KAAK,KAAK,GAAG,GAAG;AAC9C,YAAI,KAAK,WAAW,eAAe;AAAG,iBAAO;AAAA,MAC9C;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA;AAAA;AAAA;AAAA,EAKU,sCAAsC;AAC/C,QAAI,KAAK,8BAA8B,GAAG;AACzC,YAAM,IAAI,MAAM,8CAA8C,KAAK,OAAO,OAAO;AAAA,IAClF;AAAA,EACD;AAAA;AAAA;AAAA;AAAA,EAKU,6BAA6B;AACtC,QAAI,CAAC,KAAK,OAAO;AAAa,aAAO;AACrC,eAAW,QAAQ,KAAK,OAAO,aAAa;AAC3C,UAAI,KAAK,SAAS,GAAG,KAAK,CAAC,KAAK,WAAW,GAAG,GAAG;AAChD,cAAM,IAAI,MAAM,+CAA+C,KAAK,OAAO,OAAO;AAAA,MACnF;AAAA,IACD;AAAA,EACD;AAAA;AAAA;AAAA;AAAA,EAKQ,mCACP,gBACA,iBACA,eACA,0BACC;AACD,QAAI,gBAAgB,UAAU;AAAe;AAC7C,UAAM,IAAI,MAAM,SAAS,mDAAmD,6BAA6B,gBAAgB,YAAY,iBAAiB;AAAA,EACvJ;AAAA,EAEA,WACC,OACA,SACA,UACA,YAAyB,oBAAI,IAAI,GACnB;AAEd,UAAM,UAAU,IAAI,YAAY;AAChC,UAAM,QAAQ,QAAQ;AACtB,QAAI,CAAC,OAAO;AAAM,aAAO;AAEzB,UAAM,aAAa,EAAC,UAAU,GAAG,SAAS,GAAG,QAAQ,EAAC;AAGtD,eAAW,UAAU,OAAO;AAC3B,YAAM,OAAO,KAAK,IAAI,MAAM,IAAI,MAAM;AAEtC,YAAM,WAAW,KAAK,YAAY,MAAM,SAAS,WAAW,QAAQ;AACpE,UAAI,KAAK,UAAU,KAAK,gBAAgB;AAEvC,gBAAQ,IAAI,QAAQ;AACpB,gBAAQ,cAAc,IAAI,IAAI;AAAA,MAC/B,OAAO;AAEN,mBAAW,KAAK,QAAQ;AAAA,MACzB;AAEA,UAAI,WAAW,aAAc,KAAK,aAAa,KAAK,aAAa,MAAM,WAAW,aAAc;AAC/F,gBAAQ,IAAI,YAAY;AAAA,MACzB;AAEA,UAAI,KAAK,YAAY,MAAM,QAAQ,KAAK,QAAQ,KAAK,KAAK,SAAS,CAAC,MAAM;AAAG,gBAAQ,IAAI,WAAW;AACpG,UAAI,KAAK,UAAU,KAAK;AAAgB,gBAAQ,IAAI,QAAQ;AAC5D,UAAI,KAAK;AAAO,gBAAQ,IAAI,OAAO;AAEnC,UAAI,KAAK,aAAa,KAAK,mBAAmB;AAC7C,YAAI,CAAC,KAAK,OAAO,SAAS,MAAM,KAAK,iBAAiB,SAAS,QAAQ,EAAE,KAAK,KAAK,WAAW,GAAG;AAChG,kBAAQ,IAAI,QAAQ;AACpB,cAAI,MAAM,SAAS,QAAQ;AAAG,oBAAQ,IAAI,MAAM;AAChD,cAAI,aAAa;AAAU,oBAAQ,IAAI,UAAU;AACjD,kBAAQ,cAAc,IAAI,IAAI;AAAA,QAC/B;AACA,YAAI,KAAK,MAAM,MAAM;AAAG,kBAAQ,IAAI,WAAW;AAC/C,YAAI,KAAK,MAAM,OAAO;AAAG,kBAAQ;AACjC,YAAI,KAAK,MAAM,OAAO;AAAG,kBAAQ,IAAI,OAAO;AAC5C,YAAI,KAAK,WAAW,KAAM,WAAW,iBAAiB,UAAU,IAAI,cAAc,GAAI;AACrF,kBAAQ,IAAI,UAAU;AAAA,QACvB;AAAA,MACD;AAEA,UAAI,KAAK,aAAa,KAAK,eAAe;AACzC,gBAAQ,IAAI,YAAY;AACxB,YAAI,oBAAoB,IAAI,GAAG;AAC9B,kBAAQ,IAAI,aAAa;AAAA,QAC1B;AAAA,MACD;AAEA,UAAI,KAAK,YAAY,KAAK,aAAa,QAAQ,KAAK,WAAW;AAAI,gBAAQ,IAAI,YAAY;AAG3F,UAAI,eAAe,SAAS,MAAM;AAAG,gBAAQ,IAAI,UAAU;AAC3D,UAAI,eAAe,SAAS,MAAM;AAAG,gBAAQ,IAAI,UAAU;AAC3D,UAAI,eAAe,SAAS,MAAM;AAAG,gBAAQ,IAAI,eAAe;AAChE,UAAI,cAAc,SAAS,MAAM;AAAG,gBAAQ,IAAI,cAAc;AAC9D,UAAI,YAAY,SAAS,MAAM;AAAG,gBAAQ,IAAI,YAAY;AAC1D,UAAI,YAAY,SAAS,MAAM;AAAG,gBAAQ,IAAI,YAAY;AAC1D,UAAI,MAAM,SAAS,MAAM;AAAG,gBAAQ,IAAI,OAAO;AAC/C,UAAI,QAAQ,SAAS,MAAM;AAAG,gBAAQ,IAAI,SAAS;AAAA,IACpD;AAEA,YAAQ,IAAI,YAAY,KAAK,MAAM,WAAW,UAAU,CAAC,CAAC;AAC1D,YAAQ,IAAI,WAAW,KAAK,MAAM,WAAW,SAAS,CAAC,CAAC;AACxD,YAAQ,IAAI,UAAU,WAAW,QAAQ,CAAC;AAC1C,WAAO;AAAA,EACR;AAAA,EAEA,aACC,OACA,OACA,WACA,SACA,UACA,aACA,SACA,QACA,WACA,UACA,MACO;AACP,QAAI,MAAM,OAAO,SAAS,UAAU,KAAK;AAAc;AAEvD,QAAI,MAAM,SAAS,KAAK,eAAe,GAAG;AACzC,YAAM,gBAAgB,CAAC,GAAG,QAAQ;AAClC,iBAAW,QAAQ,YAAY;AAC9B,YAAI,SAAS,SAAS,KAAK,CAAC,CAAC,KAAK,SAAS,SAAS,KAAK,CAAC,CAAC,GAAG;AAC7D,eAAK,QAAQ,eAAe,cAAc,QAAQ,KAAK,CAAC,CAAC,CAAC;AAC1D,eAAK,QAAQ,eAAe,cAAc,QAAQ,KAAK,CAAC,CAAC,CAAC;AAAA,QAC3D;AAAA,MACD;AACA,UAAI,cAAc,WAAW,GAAG;AAC/B,aAAK,QAAQ,UAAU,SAAS,QAAQ,cAAc,CAAC,CAAC,CAAC;AAAA,MAC1D;AAAA,IACD;AAGA,QAAI,MAAM,SAAS,KAAK,eAAe,GAAG;AACzC,iBAAW,QAAQ,YAAY;AAC9B,YAAI,SAAS,SAAS,KAAK,CAAC,CAAC,KAAK,SAAS,SAAS,KAAK,CAAC,CAAC,GAAG;AAC7D,eAAK,QAAQ,UAAU,SAAS,QAAQ,KAAK,CAAC,CAAC,CAAC;AAChD,eAAK,QAAQ,UAAU,SAAS,QAAQ,KAAK,CAAC,CAAC,CAAC;AAAA,QACjD;AAAA,MACD;AAAA,IACD;AAGA,UAAM,cAAc,KAAK,IAAI,MAAM,IAAI,EACrC,OAAO,UAAQ,KAAK,aAAa,QAAQ,EACzC,IAAI,UAAQ,KAAK,EAAE;AAGrB,QAAI,YAAY,WAAW,SAAS,UAAU,KAAK,eAAe,GAAG;AACpE,UAAI,SAAS,SAAS,SAAS;AAAG,aAAK,QAAQ,UAAU,SAAS,QAAQ,SAAS,CAAC;AACpF,UAAI,SAAS,SAAS,aAAa;AAAG,aAAK,QAAQ,UAAU,SAAS,QAAQ,aAAa,CAAC;AAC5F,UAAI,MAAM,OAAO,SAAS,UAAU,KAAK;AAAc;AAAA,IACxD;AACA,QAAI,YAAY,WAAW;AAC1B,UAAI,SAAS,SAAS,WAAW;AAAG,aAAK,QAAQ,UAAU,SAAS,QAAQ,WAAW,CAAC;AACxF,UAAI,MAAM,OAAO,SAAS,UAAU,KAAK;AAAc;AAAA,IACxD;AACA,QAAI,YAAY,aAAa;AAC5B,UAAI,SAAS,SAAS,aAAa;AAAG,aAAK,QAAQ,UAAU,SAAS,QAAQ,aAAa,CAAC;AAC5F,UAAI,MAAM,OAAO,SAAS,UAAU,KAAK;AAAc;AAAA,IACxD;AACA,QAAI,YAAY,SAAS,YAAY,WAAW;AAC/C,UAAI,SAAS,SAAS,OAAO;AAAG,aAAK,QAAQ,UAAU,SAAS,QAAQ,OAAO,CAAC;AAChF,UAAI,SAAS,SAAS,WAAW;AAAG,aAAK,QAAQ,UAAU,SAAS,QAAQ,WAAW,CAAC;AACxF,UAAI,MAAM,OAAO,SAAS,UAAU,KAAK;AAAc;AAAA,IACxD;AACA,QAAI,YAAY,aAAa;AAC5B,UAAI,SAAS,SAAS,aAAa;AAAG,aAAK,QAAQ,UAAU,SAAS,QAAQ,aAAa,CAAC;AAC5F,UAAI,MAAM,OAAO,SAAS,UAAU,KAAK;AAAc;AAAA,IACxD;AACA,QAAI,YAAY,UAAU,YAAY,UAAU,GAAG;AAClD,UAAI,SAAS,SAAS,QAAQ;AAAG,aAAK,QAAQ,UAAU,SAAS,QAAQ,QAAQ,CAAC;AAClF,UAAI,MAAM,OAAO,SAAS,UAAU,KAAK;AAAc;AAAA,IACxD;AAEA,QAAI,WAAW;AACd,YAAM,2BAA2B;AAAA;AAAA,QAEhC,CAAC,eAAe,aAAa;AAAA,QAC7B,CAAC,SAAS,OAAO;AAAA,QACjB,CAAC,aAAa,WAAW;AAAA,QACzB,CAAC,OAAO,CAAC,WAAW,aAAa,CAAC;AAAA,QAClC,CAAC,eAAe,WAAW;AAAA,QAC3B,CAAC,CAAC,cAAc,WAAW,GAAG,UAAU;AAAA,QACxC,CAAC,iBAAiB,CAAC,eAAe,WAAW,CAAC;AAAA,QAC9C,CAAC,aAAa,CAAC,eAAe,WAAW,CAAC;AAAA,QAC1C,CAAC,gBAAgB,WAAW;AAAA,QAC5B,CAAC,WAAW,WAAW;AAAA,QACvB,CAAC,QAAQ,SAAS;AAAA,QAClB,CAAC,CAAC,aAAa,YAAY,GAAG,CAAC,cAAc,OAAO,CAAC;AAAA,QACrD,CAAC,WAAW,QAAQ;AAAA,QACpB,CAAC,aAAa,SAAS;AAAA,QACvB,CAAC,cAAc,WAAW;AAAA,QAC1B,CAAC,cAAc,aAAa;AAAA,QAC5B,CAAC,cAAc,eAAe;AAAA,QAC9B,CAAC,YAAY,CAAC,eAAe,MAAM,CAAC;AAAA,MACrC;AAEA,iBAAW,QAAQ;AAA0B,aAAK,kBAAkB,OAAO,UAAU,KAAK,CAAC,GAAG,KAAK,CAAC,CAAC;AAErG,UAAI,SAAS;AAAqB,aAAK,kBAAkB,OAAO,UAAU,eAAe,CAAC,YAAY,OAAO,CAAC;AAAA,IAC/G;AAGA,UAAM,oBAAoB;AAAA;AAAA,MAEzB,CAAC,aAAa,CAAC,eAAe,cAAc,OAAO,CAAC;AAAA,MACpD,CAAC,OAAO,WAAW;AAAA,MACnB,CAAC,OAAO,OAAO;AAAA,MACf,CAAC,OAAO,CAAC,SAAS,UAAU,SAAS,cAAc,QAAQ,MAAM,CAAC;AAAA,MAClE,CAAC,gBAAgB,cAAc;AAAA,MAC/B,CAAC,eAAe,aAAa;AAAA,MAC7B,CAAC,cAAc,WAAW;AAAA,MAC1B,CAAC,aAAa,CAAC,WAAW,QAAQ,WAAW,CAAC;AAAA,MAC9C,CAAC,SAAS,CAAC,eAAe,WAAW,CAAC;AAAA,MACtC,CAAC,eAAe,aAAa;AAAA;AAAA,MAG7B,CAAC,CAAC,WAAW,cAAc,GAAG,CAAC,YAAY,cAAc,CAAC;AAAA,MAC1D,CAAC,QAAQ,WAAW;AAAA,MACpB,CAAC,eAAe,WAAW;AAAA,MAC3B,CAAC,WAAW,UAAU;AAAA,MACtB,CAAC,aAAa,WAAW;AAAA,MACzB,CAAC,aAAa,WAAW;AAAA,MACzB,CAAC,CAAC,YAAY,aAAa,WAAW,GAAG,CAAC,YAAY,aAAa,WAAW,CAAC;AAAA,MAC/E,CAAC,YAAY,UAAU;AAAA,MACvB,CAAC,cAAc,CAAC,UAAU,SAAS,CAAC;AAAA,MACpC,CAAC,cAAc,CAAC,YAAY,UAAU,CAAC;AAAA,MACvC,CAAC,aAAa,CAAC,cAAc,cAAc,CAAC;AAAA,MAC5C,CAAC,aAAa,YAAY;AAAA,MAC1B,CAAC,gBAAgB,YAAY;AAAA,MAC7B,CAAC,YAAY,CAAC,YAAY,aAAa,YAAY,CAAC;AAAA,MACpD,CAAC,cAAc,YAAY;AAAA,MAC3B,CAAC,eAAe,YAAY;AAAA,MAC5B,CAAC,WAAW,QAAQ;AAAA,MACpB,CAAC,CAAC,eAAe,aAAa,GAAG,aAAa;AAAA,MAC9C,CAAC,iBAAiB,eAAe;AAAA;AAAA,MAGjC,CAAC,SAAS,SAAS;AAAA,MACnB,CAAC,SAAS,CAAC,aAAa,aAAa,CAAC;AAAA,MACtC,CAAC,CAAC,eAAe,SAAS,WAAW,GAAG,aAAa;AAAA;AAAA;AAAA,MAIrD,CAAC,aAAa,CAAC,aAAa,UAAU,CAAC;AAAA;AAAA,MAEvC,CAAC,cAAc,SAAS;AAAA;AAAA,MAExB,CAAC,aAAa,aAAa;AAAA;AAAA,MAE3B,CAAC,aAAa,YAAY;AAAA;AAAA,MAE1B,CAAC,SAAS,WAAW;AAAA;AAAA,MAErB,CAAC,YAAY,aAAa;AAAA;AAAA,MAE1B,CAAC,SAAS,OAAO;AAAA;AAAA,MAEjB,CAAC,cAAc,WAAW;AAAA,IAC3B;AAEA,eAAW,QAAQ;AAAmB,WAAK,kBAAkB,OAAO,UAAU,KAAK,CAAC,GAAG,KAAK,CAAC,CAAC;AAE9F,QAAI,CAAC,MAAM,SAAS,KAAK;AAAG,WAAK,kBAAkB,OAAO,UAAU,WAAW,SAAS;AAExF,QAAI,CAAC;AAAW,WAAK,kBAAkB,OAAO,UAAU,CAAC,SAAS,aAAa,GAAG,QAAQ;AAE1F,QAAI,CAAC,MAAM,SAAS,MAAM,KAAK,aAAa;AAAQ,WAAK,kBAAkB,OAAO,UAAU,YAAY,aAAa;AAErH,QAAI,CAAC,UAAU,IAAI,WAAW;AAAG,WAAK,kBAAkB,OAAO,UAAU,eAAe,MAAM;AAG9F,QAAI,QAAQ,OAAO;AAAY,WAAK,kBAAkB,OAAO,UAAU,SAAS,UAAU;AAC1F,QAAI,QAAQ,OAAO;AAAW,WAAK,kBAAkB,OAAO,UAAU,eAAe,OAAO;AAC5F,QAAI,QAAQ,OAAO;AAAY,WAAK,kBAAkB,OAAO,UAAU,QAAQ,WAAW;AAAA,EAC3F;AAAA;AAAA,EAGA,kBACC,OACA,UACA,QACA,QACO;AACP,UAAM,aAAc,MAAM,QAAQ,MAAM,IAAK,SAAS,CAAC,MAAM;AAC7D,UAAM,aAAc,MAAM,QAAQ,MAAM,IAAK,SAAS,CAAC,MAAM;AAC7D,QAAI,MAAM,OAAO,SAAS,UAAU,KAAK;AAAc;AACvD,eAAW,WAAW,OAAO;AAC5B,UAAI,WAAW,SAAS,OAAO,GAAG;AACjC,mBAAW,WAAW,YAAY;AACjC,cAAI,YAAY,WAAW,SAAS,SAAS,OAAO,GAAG;AACtD,iBAAK,QAAQ,UAAU,SAAS,QAAQ,OAAO,CAAC;AAChD,gBAAI,MAAM,OAAO,SAAS,UAAU,KAAK;AAAc;AAAA,UACxD;AAAA,QACD;AAAA,MACD;AACA,UAAI,WAAW,SAAS,OAAO,GAAG;AACjC,mBAAW,WAAW,YAAY;AACjC,cAAI,YAAY,WAAW,SAAS,SAAS,OAAO,GAAG;AACtD,iBAAK,QAAQ,UAAU,SAAS,QAAQ,OAAO,CAAC;AAChD,gBAAI,MAAM,OAAO,SAAS,UAAU,KAAK;AAAc;AAAA,UACxD;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA;AAAA,EAGA,QACC,MACA,OACA,OACA,WACA,aACA,SACA,QACA,WACA,UACA,UACA,MACc;AACd,UAAM,IAAI,IAAI;AACd,SAAK,QAAQ,UAAU,SAAS,QAAQ,IAAI,CAAC;AAC7C,UAAM,UAAU,KAAK,WAAW,OAAO,SAAS,UAAU,SAAS;AACnE,SAAK,aAAa,OAAO,OAAO,WAAW,SAAS,UAAU,aAAa,SAAS,QAAQ,WAAW,UAAU,IAAI;AACrH,WAAO;AAAA,EACR;AAAA;AAAA,EAGA,YAAY,MAAY,SAAkB,WAAwB,UAA0B;AAC3F,QAAI,KAAK,OAAO;AAAa,aAAO;AACpC,QAAI,CAAC,YAAY,iBAAiB,EAAE,SAAS,KAAK,EAAE;AAAG,aAAO,QAAQ,MAAM,CAAC;AAE7E,QAAI,KAAK,SAAS,iBAAiB,QAAQ,KAAK,WAAW,eAAe,GAAG;AAC5E,UAAI,QAAQ,KAAK,SAAS,QAAQ;AAAG,eAAO;AAC5C,UAAI,QAAQ,KAAK,SAAS,OAAO;AAAG,eAAO;AAC3C,UAAI,QAAQ,KAAK,SAAS,MAAM;AAAG,eAAO;AAAA,IAC3C;AAEA,QAAI,KAAK,SAAS,gBAAgB,QAAQ,KAAK,WAAW,SAAS,GAAG;AACrE,UAAI,QAAQ,KAAK,SAAS,YAAY;AAAG,eAAO;AAChD,UAAI,QAAQ,KAAK,SAAS,aAAa;AAAG,eAAO;AACjD,UAAI,QAAQ,KAAK,SAAS,aAAa;AAAG,eAAO;AAAA,IAClD;AAEA,UAAM,WAAW,KAAK;AACtB,QAAI,aAAa,UAAU;AAC1B,UAAI,UAAU,IAAI,UAAU;AAAG,eAAO;AACtC,UAAI,UAAU,IAAI,WAAW;AAAG,eAAO;AACvC,UAAI,UAAU,IAAI,UAAU;AAAG,eAAO;AACtC,UAAI,UAAU,IAAI,aAAa;AAAG,eAAO;AAAA,IAC1C;AACA,WAAO;AAAA,EACR;AAAA;AAAA,EAGA,cACC,OACA,WACA,aACA,SACA,QACA,WACA,UACA,UACA,MACc;AACd,UAAM,QAAQ,oBAAI,IAAY;AAC9B,QAAI,UAAU,KAAK,WAAW,OAAO,SAAS,UAAU,SAAS;AACjE,SAAK,aAAa,OAAO,OAAO,WAAW,SAAS,UAAU,aAAa,SAAS,QAAQ,WAAW,UAAU,IAAI;AAGrH,QAAI,SAAS,UAAU,KAAK,cAAc;AACzC,iBAAW,UAAU,UAAU;AAC9B,cAAM,IAAI,MAAM;AAAA,MACjB;AACA,aAAO;AAAA,IACR;AAEA,UAAM,wBAAwB,CAAC,gBAAwB;AACtD,UAAI,CAAC,KAAK,wBAAwB,WAAW;AAAG,eAAO;AACvD,aAAO,KAAK,wBAAwB,WAAW;AAAA,QAC9C;AAAA,QAAU;AAAA,QAAO;AAAA,QAAW;AAAA,QAAO;AAAA,QAAS;AAAA,QAAS;AAAA,QAAa;AAAA,QAAQ;AAAA,QAAW;AAAA,QAAU;AAAA,MAChG;AAAA,IACD;AAEA,QAAI,SAAS,mBAAmB;AAC/B,gBAAU,KAAK;AAAA,QAAQ;AAAA,QAAa;AAAA,QAAO;AAAA,QAAO;AAAA,QAAW;AAAA,QAAa;AAAA,QAAS;AAAA,QAAQ;AAAA,QAC1F;AAAA,QAAU;AAAA,QAAU;AAAA,MAAI;AAAA,IAC1B;AAEA,QAAI,QAAQ,cAAc;AACzB,YAAM,OAAO,KAAK,IAAI,MAAM,IAAI,QAAQ,YAAY,EAAE;AACtD,gBAAU,KAAK;AAAA,QAAQ;AAAA,QAAM;AAAA,QAAO;AAAA,QAAO;AAAA,QAAW;AAAA,QAAa;AAAA,QAAS;AAAA,QAAQ;AAAA,QACnF;AAAA,QAAU;AAAA,QAAU;AAAA,MAAI;AAAA,IAC1B;AAKA,QAAI,SAAS,SAAS,QAAQ,KAAK,UAAU,IAAI,MAAM,GAAG;AACzD,gBAAU,KAAK;AAAA,QAAQ;AAAA,QAAU;AAAA,QAAO;AAAA,QAAO;AAAA,QAAW;AAAA,QAAa;AAAA,QAAS;AAAA,QAAQ;AAAA,QACvF;AAAA,QAAU;AAAA,QAAU;AAAA,MAAI;AAAA,IAC1B;AAGA,eAAW,UAAU,CAAC,cAAc,mBAAmB,mBAAmB,WAAW,GAAG;AACvF,UAAI,SAAS,SAAS,MAAM,GAAG;AAC9B,kBAAU,KAAK;AAAA,UAAQ;AAAA,UAAQ;AAAA,UAAO;AAAA,UAAO;AAAA,UAAW;AAAA,UAAa;AAAA,UAAS;AAAA,UAAQ;AAAA,UACrF;AAAA,UAAU;AAAA,UAAU;AAAA,QAAI;AAAA,MAC1B;AAAA,IACD;AAGA,QAAI,SAAS,SAAS,WAAW,KAAK,SAAS,uBAAuB;AACrE,gBAAU,KAAK;AAAA,QAAQ;AAAA,QAAa;AAAA,QAAO;AAAA,QAAO;AAAA,QAAW;AAAA,QAAa;AAAA,QAAS;AAAA,QAAQ;AAAA,QAC1F;AAAA,QAAU;AAAA,QAAU;AAAA,MAAI;AAAA,IAC1B;AAGA,QAAI,SAAS,mBAAmB,CAAC,YAAY,SAAS,CAAC,YAAY,WAAW;AAC7E,UAAI,SAAS,SAAS,WAAW,GAAG;AACnC,kBAAU,KAAK;AAAA,UAAQ;AAAA,UAAa;AAAA,UAAO;AAAA,UAAO;AAAA,UAAW;AAAA,UAAa;AAAA,UAAS;AAAA,UAAQ;AAAA,UAC1F;AAAA,UAAU;AAAA,UAAU;AAAA,QAAI;AAAA,MAC1B;AACA,UAAI,SAAS,SAAS,OAAO,GAAG;AAC/B,kBAAU,KAAK;AAAA,UAAQ;AAAA,UAAS;AAAA,UAAO;AAAA,UAAO;AAAA,UAAW;AAAA,UAAa;AAAA,UAAS;AAAA,UAAQ;AAAA,UACtF;AAAA,UAAU;AAAA,UAAU;AAAA,QAAI;AAAA,MAC1B;AAAA,IACD;AAGA,QAAI,CAAC,aAAa,MAAM,WAAW,MAAM,MAAM,SAAS,QAAQ,KAAK,MAAM,SAAS,UAAU,IAAI;AACjG,UAAI,SAAS,SAAS,UAAU,GAAG;AAClC,kBAAU,KAAK;AAAA,UAAQ;AAAA,UAAY;AAAA,UAAO;AAAA,UAAO;AAAA,UAAW;AAAA,UAAa;AAAA,UAAS;AAAA,UAAQ;AAAA,UACzF;AAAA,UAAU;AAAA,UAAU;AAAA,QAAI;AAAA,MAC1B;AAAA,IACD;AAGA,QAAI,MAAM,WAAW,KAAK,MAAM,SAAS,OAAO,KAAK,SAAS,eAAe;AAC5E,UAAI,SAAS,SAAS,UAAU,GAAG;AAClC,kBAAU,KAAK;AAAA,UAAQ;AAAA,UAAY;AAAA,UAAO;AAAA,UAAO;AAAA,UAAW;AAAA,UAAa;AAAA,UAAS;AAAA,UAAQ;AAAA,UACzF;AAAA,UAAU;AAAA,UAAU;AAAA,QAAI;AAAA,MAC1B;AAAA,IACD;AAGA,QAAI,QAAQ,OAAO,YAAY;AAC9B,UAAI,SAAS,SAAS,OAAO,GAAG;AAC/B,kBAAU,KAAK;AAAA,UAAQ;AAAA,UAAS;AAAA,UAAO;AAAA,UAAO;AAAA,UAAW;AAAA,UAAa;AAAA,UAAS;AAAA,UAAQ;AAAA,UACtF;AAAA,UAAU;AAAA,UAAU;AAAA,QAAI;AAAA,MAC1B;AAAA,IACD;AAGA,QAAI,WAAW;AACd,YAAM,uBAAuB,CAAC,cAAc,cAAc,OAAO;AACjE,iBAAW,UAAU,sBAAsB;AAC1C,YAAI,SAAS,SAAS,MAAM,GAAG;AAC9B,oBAAU,KAAK;AAAA,YAAQ;AAAA,YAAQ;AAAA,YAAO;AAAA,YAAO;AAAA,YAAW;AAAA,YAAa;AAAA,YAAS;AAAA,YAAQ;AAAA,YACrF;AAAA,YAAU;AAAA,YAAU;AAAA,UAAI;AAAA,QAC1B;AAAA,MACD;AAEA,UAAI,SAAS,SAAS,SAAS,KAAK,QAAQ,UAAU,OAAO,IAAI;AAChE,kBAAU,KAAK;AAAA,UAAQ;AAAA,UAAW;AAAA,UAAO;AAAA,UAAO;AAAA,UAAW;AAAA,UAAa;AAAA,UAAS;AAAA,UAAQ;AAAA,UACxF;AAAA,UAAU;AAAA,UAAU;AAAA,QAAI;AAAA,MAC1B;AAEA,UAAI,SAAS,SAAS,UAAU,MAAM,UAAU,IAAI,WAAW,KAAK,UAAU,IAAI,YAAY,IAAI;AACjG,kBAAU,KAAK;AAAA,UAAQ;AAAA,UAAY;AAAA,UAAO;AAAA,UAAO;AAAA,UAAW;AAAA,UAAa;AAAA,UAAS;AAAA,UAAQ;AAAA,UACzF;AAAA,UAAU;AAAA,UAAU;AAAA,QAAI;AAAA,MAC1B;AAEA,UAAI,SAAS,SAAS,aAAa,KAAK,UAAU,IAAI,WAAW,GAAG;AACnE,kBAAU,KAAK;AAAA,UAAQ;AAAA,UAAe;AAAA,UAAO;AAAA,UAAO;AAAA,UAAW;AAAA,UAAa;AAAA,UAAS;AAAA,UAAQ;AAAA,UAC5F;AAAA,UAAU;AAAA,UAAU;AAAA,QAAI;AAAA,MAC1B;AAAA,IACD;AAGA,QACC,CAAC,kBAAkB,eAAe,eAAe,qBAAqB,EAAE,SAAS,IAAI,KACrF,iBAAiB,SAAS,QAAQ,EAAE,GACnC;AACD,YAAM,gBAAgB,CAAC;AACvB,iBAAW,UAAU,UAAU;AAC9B,cAAM,OAAO,KAAK,IAAI,MAAM,IAAI,MAAM;AACtC,cAAM,WAAW,KAAK,YAAY,MAAM,SAAS,WAAW,QAAQ;AACpE,YACC,MAAM,SAAS,QAAQ,MAAM,KAAK,WAAW,KAAM,WAAW,iBAAiB,UAAU,IAAI,cAAc,OAC1G,KAAK,aAAa,KAAK,oBACvB;AACD,wBAAc,KAAK,MAAM;AAAA,QAC1B;AAAA,MACD;AACA,UAAI,cAAc,QAAQ;AACzB,cAAM,SAAS,KAAK,OAAO,aAAa;AACxC,kBAAU,KAAK;AAAA,UAAQ;AAAA,UAAQ;AAAA,UAAO;AAAA,UAAO;AAAA,UAAW;AAAA,UAAa;AAAA,UAAS;AAAA,UAAQ;AAAA,UACrF;AAAA,UAAU;AAAA,UAAU;AAAA,QAAI;AAAA,MAC1B;AAAA,IACD;AAGA,eAAW,QAAQ,OAAO;AAEzB,YAAM,YAAY,CAAC;AACnB,iBAAW,UAAU,UAAU;AAC9B,cAAM,OAAO,KAAK,IAAI,MAAM,IAAI,MAAM;AACtC,cAAM,WAAW,KAAK,YAAY,MAAM,SAAS,WAAW,QAAQ;AACpE,YAAI,CAAC,KAAK,OAAO,SAAS,MAAM,MAAM,KAAK,aAAa,KAAK,sBAAsB,SAAS,UAAU;AACrG,oBAAU,KAAK,MAAM;AAAA,QACtB;AAAA,MACD;AACA,aAAO,sBAAsB,IAAI,GAAG;AACnC,YAAI,CAAC,UAAU;AAAQ;AACvB,cAAM,SAAS,KAAK,gBAAgB,SAAS;AAC7C,kBAAU,KAAK;AAAA,UAAQ;AAAA,UAAQ;AAAA,UAAO;AAAA,UAAO;AAAA,UAAW;AAAA,UAAa;AAAA,UAAS;AAAA,UAAQ;AAAA,UACrF;AAAA,UAAU;AAAA,UAAU;AAAA,QAAI;AAAA,MAC1B;AAAA,IACD;AAGA,QAAI,CAAC,QAAQ,IAAI,UAAU,KAAK,CAAC,CAAC,iBAAiB,iBAAiB,EAAE,SAAS,IAAI,GAAG;AACrF,YAAM,YAAY,CAAC;AACnB,iBAAW,UAAU,UAAU;AAC9B,cAAM,OAAO,KAAK,IAAI,MAAM,IAAI,MAAM;AACtC,cAAM,WAAW,KAAK,YAAY,MAAM,SAAS,WAAW,QAAQ;AACpE,YAAI,CAAC,KAAK,OAAO,SAAS,MAAM,MAAM,KAAK,aAAa,KAAK,sBAAsB,aAAa,UAAU;AACzG,oBAAU,KAAK,MAAM;AAAA,QACtB;AAAA,MACD;AACA,UAAI,UAAU,QAAQ;AACrB,cAAM,SAAS,KAAK,OAAO,SAAS;AACpC,kBAAU,KAAK;AAAA,UAAQ;AAAA,UAAQ;AAAA,UAAO;AAAA,UAAO;AAAA,UAAW;AAAA,UAAa;AAAA,UAAS;AAAA,UAAQ;AAAA,UACrF;AAAA,UAAU;AAAA,UAAU;AAAA,QAAI;AAAA,MAC1B;AAAA,IACD;AAGA,QAAI,CAAC,QAAQ,IAAI,MAAM,GAAG;AACzB,YAAM,YAAY,CAAC;AACnB,iBAAW,UAAU,UAAU;AAC9B,cAAM,OAAO,KAAK,IAAI,MAAM,IAAI,MAAM;AACtC,cAAM,WAAW,KAAK,YAAY,MAAM,SAAS,WAAW,QAAQ;AACpE,YAAI,CAAC,KAAK,OAAO,SAAS,MAAM,MAAM,KAAK,aAAa,KAAK,sBAAsB,MAAM,SAAS,QAAQ,GAAG;AAC5G,oBAAU,KAAK,MAAM;AAAA,QACtB;AAAA,MACD;AACA,UAAI,UAAU,QAAQ;AACrB,cAAM,SAAS,KAAK,OAAO,SAAS;AACpC,kBAAU,KAAK;AAAA,UAAQ;AAAA,UAAQ;AAAA,UAAO;AAAA,UAAO;AAAA,UAAW;AAAA,UAAa;AAAA,UAAS;AAAA,UAAQ;AAAA,UACrF;AAAA,UAAU;AAAA,UAAU;AAAA,QAAI;AAAA,MAC1B;AAAA,IACD;AAGA,QAAI,CAAC,iBAAiB,kBAAkB,aAAa,EAAE,SAAS,IAAI,GAAG;AACtE,YAAM,gBAAgB,SAAS,OAAO,YAAU,eAAe,SAAS,MAAM,CAAC;AAC/E,UAAI,cAAc,QAAQ;AACzB,cAAM,SAAS,KAAK,OAAO,aAAa;AACxC,kBAAU,KAAK;AAAA,UAAQ;AAAA,UAAQ;AAAA,UAAO;AAAA,UAAO;AAAA,UAAW;AAAA,UAAa;AAAA,UAAS;AAAA,UAAQ;AAAA,UACrF;AAAA,UAAU;AAAA,UAAU;AAAA,QAAI;AAAA,MAC1B;AAAA,IACD;AAGA,QAAI,KAAK,SAAS,OAAO,KAAK,SAAS,mBAAmB;AAEzD,YAAM,qBAAqB,SAAS,OAAO,YAAU,MAAM,SAAS,MAAM,KAAK,CAAC,YAAY,SAAS,MAAM,CAAC;AAC5G,UAAI,mBAAmB,QAAQ;AAC9B,cAAM,SAAS,KAAK,OAAO,kBAAkB;AAC7C,kBAAU,KAAK;AAAA,UAAQ;AAAA,UAAQ;AAAA,UAAO;AAAA,UAAO;AAAA,UAAW;AAAA,UAAa;AAAA,UAAS;AAAA,UAAQ;AAAA,UACrF;AAAA,UAAU;AAAA,UAAU;AAAA,QAAI;AAAA,MAC1B,OAAO;AAEN,cAAM,aAAa,SAAS,OAAO,YAAU,MAAM,SAAS,MAAM,CAAC;AACnE,YAAI,WAAW,QAAQ;AACtB,gBAAM,SAAS,KAAK,OAAO,UAAU;AACrC,oBAAU,KAAK;AAAA,YAAQ;AAAA,YAAQ;AAAA,YAAO;AAAA,YAAO;AAAA,YAAW;AAAA,YAAa;AAAA,YAAS;AAAA,YAAQ;AAAA,YACrF;AAAA,YAAU;AAAA,YAAU;AAAA,UAAI;AAAA,QAC1B;AAAA,MACD;AAAA,IACD;AAGA,QAAI,SAAS,mBAAmB;AAC/B,iBAAW,UAAU,CAAC,WAAW,YAAY,YAAY,GAAG;AAC3D,YAAI,SAAS,SAAS,MAAM,GAAG;AAC9B,oBAAU,KAAK;AAAA,YAAQ;AAAA,YAAQ;AAAA,YAAO;AAAA,YAAO;AAAA,YAAW;AAAA,YAAa;AAAA,YAAS;AAAA,YAAQ;AAAA,YACrF;AAAA,YAAU;AAAA,YAAU;AAAA,UAAI;AAAA,QAC1B;AAAA,MACD;AAAA,IACD;AAGA,QAAI,KAAK,SAAS,SAAS,GAAG;AAC7B,YAAM,eAAe,SAAS,OAAO,YAAU,cAAc,SAAS,MAAM,CAAC;AAC7E,UAAI,aAAa,QAAQ;AACxB,cAAM,SAAS,KAAK,OAAO,YAAY;AACvC,kBAAU,KAAK;AAAA,UAAQ;AAAA,UAAQ;AAAA,UAAO;AAAA,UAAO;AAAA,UAAW;AAAA,UAAa;AAAA,UAAS;AAAA,UAAQ;AAAA,UACrF;AAAA,UAAU;AAAA,UAAU;AAAA,QAAI;AAAA,MAC1B;AAAA,IACD;AAGA,QAAI,CAAC,QAAQ,cAAc,MAAM;AAEhC,YAAM,iBAAiB,CAAC;AACxB,iBAAW,UAAU,UAAU;AAC9B,cAAM,OAAO,KAAK,IAAI,MAAM,IAAI,MAAM;AACtC,YAAI,CAAC,KAAK,OAAO,SAAS,MAAM,KAAM,KAAK,aAAa;AAAW,yBAAe,KAAK,MAAM;AAAA,MAC9F;AACA,UAAI,eAAe,QAAQ;AAC1B,cAAM,SAAS,KAAK,OAAO,cAAc;AACzC,kBAAU,KAAK;AAAA,UAAQ;AAAA,UAAQ;AAAA,UAAO;AAAA,UAAO;AAAA,UAAW;AAAA,UAAa;AAAA,UAAS;AAAA,UAAQ;AAAA,UACrF;AAAA,UAAU;AAAA,UAAU;AAAA,QAAI;AAAA,MAC1B;AAAA,IACD;AAGA,QAAI,CAAC,CAAC,YAAY,gBAAgB,iBAAiB,iBAAiB,iBAAiB,EAAE,SAAS,IAAI,GAAG;AACtG,UAAI,QAAQ,cAAc,SAAS,GAAG;AAErC,cAAM,oBAAoB,QAAQ,cAAc,OAAO,EAAE,KAAK,EAAE,MAAM;AAEtE,cAAM,gBAAgB,CAAC;AACvB,mBAAW,UAAU,UAAU;AAC9B,gBAAM,OAAO,KAAK,IAAI,MAAM,IAAI,MAAM;AACtC,gBAAM,WAAW,KAAK,YAAY,MAAM,SAAS,WAAW,QAAQ;AACpE,cAAI,CAAC,KAAK,OAAO,SAAS,MAAM,MAAM,KAAK,aAAa,KAAK,oBAAoB;AAChF,gBAAI,sBAAsB;AAAU,4BAAc,KAAK,MAAM;AAAA,UAC9D;AAAA,QACD;AACA,YAAI,cAAc,QAAQ;AACzB,gBAAM,SAAS,KAAK,OAAO,aAAa;AACxC,oBAAU,KAAK;AAAA,YAAQ;AAAA,YAAQ;AAAA,YAAO;AAAA,YAAO;AAAA,YAAW;AAAA,YAAa;AAAA,YAAS;AAAA,YAAQ;AAAA,YACrF;AAAA,YAAU;AAAA,YAAU;AAAA,UAAI;AAAA,QAC1B;AAAA,MACD;AAAA,IACD;AAMA,WAAO,MAAM,OAAO,KAAK,gBAAgB,SAAS,QAAQ;AACzD,UAAI,MAAM,OAAO,SAAS,UAAU,KAAK,cAAc;AACtD,mBAAWA,WAAU,UAAU;AAC9B,gBAAM,IAAIA,OAAM;AAAA,QACjB;AACA;AAAA,MACD;AACA,YAAM,SAAS,KAAK,OAAO,QAAQ;AACnC,gBAAU,KAAK;AAAA,QAAQ;AAAA,QAAQ;AAAA,QAAO;AAAA,QAAO;AAAA,QAAW;AAAA,QAAa;AAAA,QAAS;AAAA,QAAQ;AAAA,QACrF;AAAA,QAAU;AAAA,QAAU;AAAA,MAAI;AACzB,iBAAW,QAAQ,YAAY;AAC9B,YAAI,WAAW,KAAK,CAAC,KAAK,SAAS,SAAS,KAAK,CAAC,CAAC,GAAG;AACrD,oBAAU,KAAK;AAAA,YAAQ,KAAK,CAAC;AAAA,YAAG;AAAA,YAAO;AAAA,YAAO;AAAA,YAAW;AAAA,YAAa;AAAA,YAAS;AAAA,YAAQ;AAAA,YACtF;AAAA,YAAU;AAAA,YAAU;AAAA,UAAI;AAAA,QAC1B;AACA,YAAI,WAAW,KAAK,CAAC,KAAK,SAAS,SAAS,KAAK,CAAC,CAAC,GAAG;AACrD,oBAAU,KAAK;AAAA,YAAQ,KAAK,CAAC;AAAA,YAAG;AAAA,YAAO;AAAA,YAAO;AAAA,YAAW;AAAA,YAAa;AAAA,YAAS;AAAA,YAAQ;AAAA,YACtF;AAAA,YAAU;AAAA,YAAU;AAAA,UAAI;AAAA,QAC1B;AAAA,MACD;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EAEA,kBACC,SACA,OACA,OACA,WACA,SACA,aACA,SACA,QACA,WACA,UACA,MACU;AACV,QAAI;AAAA,MACH;AAAA,MAAc;AAAA,MAAe;AAAA,MAAc;AAAA,MAAe;AAAA,MAAa;AAAA,MAAY;AAAA,MAAW;AAAA,MAAa;AAAA,MAAY;AAAA,MACvH;AAAA,MAAgB;AAAA,MAAgB;AAAA,MAAe;AAAA,MAAS;AAAA,MAAY;AAAA,MAAc;AAAA,MAAa;AAAA,MAAa;AAAA,MAC5G;AAAA,MAAU;AAAA,MAAc;AAAA,MAAa;AAAA,MAAgB;AAAA,IACtD,EAAE,SAAS,OAAO;AAAG,aAAO;AAE5B,YAAQ,SAAS;AAAA,MAEjB,KAAK;AAAA,MAAY,KAAK;AAAA,MAAgB,KAAK;AAAA,MAAc,KAAK;AAC7D,eAAO,CAAC,QAAQ,QAAI,iBAAK,OAAO,CAAC;AAAA,MAClC,KAAK;AACJ,eAAQ,CAAC,MAAM,IAAI,UAAU,KAAK,CAAC,YAAY,OAAO,QAAQ,OAAO;AAAA,MACtE,KAAK;AACJ,eAAQ,QAAQ,OAAO;AAAA,MACxB,KAAK;AACJ,eAAQ,QAAQ,OAAO,iBAAiB,CAAC;AAAA,MAC1C,KAAK;AAAA,MAAiB,KAAK;AAC1B,eAAO,CAAC,QAAQ,IAAI,YAAY;AAAA,MACjC,KAAK;AACJ,eAAO,UAAU,IAAI,aAAa;AAAA,MACnC,KAAK;AACJ,eAAQ,CAAC,QAAQ,IAAI,UAAU,KAAM,UAAU,IAAI,WAAW,MAAM,MAAM,IAAI,aAAa,KAAK,MAAM,IAAI,OAAO;AAAA,MAClH,KAAK;AACJ,eAAQ,QAAQ,OAAO,cAAc,MAAM,IAAI,YAAY;AAAA,MAC5D,KAAK;AACJ,eACC,CAAC,WAAW,cAAc,cAAc,aAAa,YAAY,EAAE,KAAK,OAAK,UAAU,IAAI,CAAC,CAAC,KAC7F,KAAK,IAAI,iBAAiB,QAAQ,OAAO,IAAI;AAAA,MAE/C,KAAK;AACJ,eAAQ,CAAC,MAAM,IAAI,QAAQ,KAAK,CAAC,MAAM,IAAI,WAAW;AAAA,MACvD,KAAK;AAEJ,eAAQ,CAAC,QAAQ,IAAI,UAAU,KAAK,MAAM,IAAI,SAAS,KAAK,MAAM,IAAI,WAAW;AAAA,MAClF,KAAK;AACJ,eAAQ,aAAa,UAAU,IAAI,YAAY;AAAA,MAChD,KAAK;AACJ,eAAQ,SAAS;AAAA,MAClB,KAAK;AACJ,YAAI,UAAU,IAAI,QAAQ;AAAG,iBAAO;AACpC,YAAI,UAAU,IAAI,aAAa,KAAK,CAAC,CAAC,QAAQ,IAAI,YAAY;AAAG,iBAAO;AACxE,YAAI,QAAQ,OAAO,eAAe,MAAM,IAAI,YAAY;AAAG,iBAAO;AAClE,eAAQ,UAAU,IAAI,UAAU;AAAA,MACjC,KAAK;AACJ,eAAO,CAAC,QAAQ,YAAY,MAAM,IAAI,cAAc;AAAA,MACrD,KAAK;AACJ,eAAO,CAAC,QAAQ,IAAI,UAAU;AAAA,MAC/B,KAAK;AAAA,MAAU,KAAK;AACnB,eAAO,SAAS,uBAAwB,QAAQ,OAAO,iBAAiB,SAAS;AAAA,MAClF,KAAK;AACJ,eAAO,QAAQ,OAAO;AAAA,MACvB,KAAK;AACJ,eAAQ,CAAC,aAAa,eAAe,UAAU,EAAE,KAAK,OAAK,UAAU,IAAI,CAAC,CAAC;AAAA,MAC5E,KAAK;AACJ,eAAQ,CAAC,QAAQ,IAAI,UAAU,KAAK,MAAM,IAAI,aAAa;AAAA,MAC5D,KAAK;AACJ,eAAO,QAAQ,OAAO;AAAA,MACvB,KAAK;AACJ,eAAO,CAAC;AAAA,MACT,KAAK;AACJ,eAAO,MAAM,SAAS,OAAO;AAAA,MAC9B,KAAK;AACJ,eAAO,CAAC,QAAQ,IAAI,OAAO;AAAA,MAC5B,KAAK;AACJ,eAAQ,CAAC,aAAc,QAAQ,IAAI,SAAS,IAAK;AAAA,MAClD,KAAK;AACJ,eAAQ,CAAC,QAAQ,IAAI,QAAQ,KAAM,QAAQ,OAAO,cAAc,SAAS;AAAA,MAC1E,KAAK;AACJ,eAAO,CAAC,QAAQ,IAAI,QAAQ;AAAA,MAC7B,KAAK;AACJ,eAAQ,QAAQ,OAAO,cAAc,SAAS;AAAA,MAC/C,KAAK;AACJ,eAAO,CAAC,QAAQ,IAAI,QAAQ;AAAA,MAC7B,KAAK;AAAA,MAAc,KAAK;AACvB,eAAO,CAAC,YAAY;AAAA,MACrB,KAAK;AACJ,eAAO,QAAQ,OAAO;AAAA,MACvB,KAAK;AACJ,eAAO,SAAS;AAAA,MACjB,KAAK;AACJ,cAAM,eAAgB,QAAQ,OAAO,oBAAoB,SAAS,iBAAiB,SAAS;AAC5F,cAAM,gBAAiB,UAAU,IAAI,MAAM,KAAK,UAAU,IAAI,WAAW;AACzE,cAAM,YAAa,MAAM,IAAI,WAAW,KAAK,MAAM,IAAI,aAAa;AACpE,eAAQ,CAAC,QAAQ,IAAI,YAAY,KAAK,gBAAgB,iBAAiB;AAAA,MACxE,KAAK;AACJ,eAAO,CAAC,YAAY;AAAA,MACrB,KAAK;AACJ,eAAQ,CAAC,YAAY,OAAO,CAAC,QAAQ,IAAI,SAAS;AAAA,MACnD,KAAK;AACJ,eAAQ,QAAQ,OAAO,aAAa,CAAC,MAAM,IAAI,SAAS;AAAA,MACzD,KAAK;AACJ,eAAQ,QAAQ,OAAO;AAAA,MACxB,KAAK;AACJ,eAAQ,CAAC,CAAC,QAAQ,IAAI,QAAQ,KAAK,QAAQ,OAAO;AAAA,MACnD,KAAK;AACJ,eAAQ,CAAC,QAAQ,IAAI,KAAK,KAAK,CAAC,CAAC,QAAQ,IAAI,UAAU;AAAA,MACxD,KAAK;AACJ,eAAQ,UAAU,IAAI,YAAY,KAAM,CAAC,MAAM,IAAI,WAAW,KAAK,CAAC,YAAY;AAAA,MACjF,KAAK;AACJ,eAAQ,QAAQ,OAAO,aAAa,QAAQ,OAAO;AAAA,MACpD,KAAK;AACJ,eAAQ,CAAC,QAAQ,IAAI,YAAY,KAAK,UAAU,IAAI,WAAW,KAAK,UAAU,IAAI,UAAU;AAAA,MAC7F,KAAK;AACJ,cAAM,gBAAiB,QAAQ,OAAO,oBAAoB,SAAS,mBAAmB,SAAS;AAC/F,cAAM,cAAe,QAAQ,OAAO,aAAa,MAAM,IAAI,SAAS;AACpE,eAAQ,eAAe,iBAAiB,QAAQ,OAAO;AAAA,MACxD,KAAK;AACJ,eAAQ,QAAQ,OAAO,cAAc,SAAS;AAAA,MAC/C,KAAK;AACJ,eAAQ,UAAU,IAAI,WAAW,KAAK,CAAC,QAAQ,IAAI,OAAO,KAAK,QAAQ,OAAO;AAAA,MAC/E,KAAK;AAEJ,eAAQ,QAAQ,OAAO;AAAA,MACxB,KAAK;AACJ,YAAI,UAAU,IAAI,WAAW,KAAK,QAAQ,YAAY;AAAG,iBAAO;AAChE,eAAQ,KAAK,IAAI,iBAAiB,YAAY,OAAO,IAAI;AAAA,MAC1D,KAAK;AACJ,eAAQ,CAAC,WAAW,YAAY,UAAU,EAAE,SAAS,QAAQ,EAAE,KAAK,MAAM,IAAI,WAAW;AAAA,MAC1F,KAAK;AACJ,eAAQ,MAAM,IAAI,YAAY,KAAK,QAAQ,OAAO;AAAA,IACnD;AAEA,WAAO;AAAA,EACR;AAAA,EAGA,WACC,OACA,OACA,WACA,SACA,aACA,SACA,QACA,WACA,UACA,MACS;AACT,UAAM,cAAc,MAAM,KAAK,SAAS,EAAE,IAAI,OAAK,KAAK,IAAI,UAAU,IAAI,CAAC,CAAC;AAC5E,qBAAM,OAAO,aAAa,UAAQ,CAAC,KAAK,MAAM;AAE9C,QAAI,YAAY,UAAU;AAAG,aAAO,YAAY,CAAC,EAAE;AAGnD,QAAI,QAAQ,OAAO;AAAW,aAAO;AACrC,QAAI,QAAQ,OAAO,gBAAgB,CAAC,QAAQ,IAAI,MAAM;AAAG,aAAO;AAChE,QAAI,QAAQ,OAAO;AAAc,aAAO;AACxC,QAAI,QAAQ,OAAO;AAAY,aAAO;AACtC,QAAI,QAAQ,OAAO,cAAc,CAAC,QAAQ,IAAI,OAAO,KAAK,CAAC,MAAM,IAAI,UAAU;AAAG,aAAO;AACzF,QAAI,QAAQ,OAAO;AAAU,aAAO;AACpC,QAAI,QAAQ,OAAO;AAAc,aAAO;AACxC,QAAI,QAAQ,OAAO,gBAAgB,MAAM,IAAI,YAAY;AAAG,aAAO;AACnE,QAAI,UAAU,IAAI,MAAM,MAAM,MAAM,IAAI,QAAQ,KAAK,MAAM,IAAI,WAAW,KAAK,QAAQ,OAAO;AAAY,aAAO;AACjH,QAAI,QAAQ,OAAO,gBAAgB,MAAM,IAAI,WAAW;AAAG,aAAO;AAClE,QAAI,QAAQ,OAAO;AAAY,aAAO;AACtC,QAAI,QAAQ,OAAO,eAAe,CAAC,QAAQ,IAAI,WAAW;AAAG,aAAO;AACpE,QAAI,QAAQ,OAAO;AAAa,aAAO;AACvC,QAAI,QAAQ,OAAO,cAAc,CAAC,QAAQ,IAAI,YAAY;AAAG,aAAO;AACpE,QAAI,QAAQ,OAAO;AAAa,aAAQ,MAAM,IAAI,YAAY,IAAK,eAAe;AAClF,QAAI,QAAQ,OAAO,gBAAiB,QAAQ,OAAO,aAAa,MAAM,IAAI,MAAM;AAAI,aAAO;AAC3F,QAAI,QAAQ,OAAO,cAAc,SAAS,iBAAiB;AAAY,aAAO;AAC9E,QAAI,QAAQ,OAAO;AAAW,aAAO;AACrC,QAAI,QAAQ,OAAO,aAAa,QAAQ,OAAO;AAAY,aAAO;AAClE,QAAI,QAAQ,OAAO,aAAa,MAAM,IAAI,UAAU;AAAG,aAAO;AAG9D,QAAI,CAAC,WAAW;AACf,UAAI,QAAQ,OAAO;AAAS,eAAO;AACnC,UAAI,QAAQ,OAAO;AAAa,eAAO;AACvC,UAAI,QAAQ,OAAO;AAAiB,eAAO;AAC3C,UAAI,CAAC,UAAU,WAAW,WAAW,EAAE,SAAS,QAAQ,EAAE;AAAG,eAAO;AACpE,UAAI,QAAQ,OAAO,cAAc,MAAM,IAAI,UAAU;AAAG,eAAO;AAC/D,UAAI,QAAQ,OAAO,WAAW,SAAS;AAAiB,eAAO;AAC/D,UAAI,UAAU,IAAI,UAAU,KAAK,MAAM,IAAI,YAAY;AAAG,eAAO;AACjE,UAAI,UAAU,IAAI,SAAS,MAAM,MAAM,IAAI,SAAS,KAAK,MAAM,IAAI,YAAY;AAAI,eAAO;AAC1F,UAAI,UAAU,IAAI,cAAc,KAAK,MAAM,IAAI,UAAU;AAAG,eAAO;AACnE,UAAI,UAAU,IAAI,WAAW,KAAK,MAAM,IAAI,YAAY;AAAG,eAAO;AAClE,UAAI,UAAU,IAAI,YAAY,KAAK,MAAM,IAAI,WAAW;AAAG,eAAO;AAClE,UAAI,UAAU,IAAI,YAAY,MAAM,MAAM,IAAI,YAAY,KAAK,QAAQ,IAAI,OAAO;AAAI,eAAO;AAAA,IAC9F;AAGA,QAAI,WAAW;AACd,UAAI,QAAQ,OAAO,cAAc,QAAQ,OAAO;AAAY,eAAO;AACnE,UAAI,QAAQ,OAAO;AAAa,eAAO;AACvC,UAAI,QAAQ,OAAO;AAAa,eAAO;AACvC,UAAI,QAAQ,OAAO;AAAW,eAAO;AACrC,UAAI,QAAQ,OAAO;AAAa,eAAO;AACvC,UAAI,QAAQ,OAAO,eAAe,CAAC,MAAM,IAAI,YAAY;AAAG,eAAO;AACnE,UAAI,QAAQ,OAAO;AAAc,eAAO;AACxC,UACC,CAAC,cAAc,eAAe,WAAW,QAAQ,EAAE,SAAS,QAAQ,EAAE,KAAK,SAAS;AACnF,eAAO;AACT,UAAI,QAAQ,OAAO,gBAAgB,SAAS;AAAuB,eAAO;AAC1E,UAAI,QAAQ,OAAO,cAAc,UAAU,IAAI,SAAS;AAAG,eAAO;AAClE,UAAI,QAAQ,OAAO,eAAe,QAAQ,OAAO;AAAW,eAAO;AACnE,UAAI,QAAQ,OAAO;AAAW,eAAO;AACrC,UAAI,QAAQ,OAAO;AAAa,eAAO;AACvC,UAAI,QAAQ,OAAO;AAAU,eAAO;AACpC,UACE,QAAQ,OAAO,aAAa,SAAS,4BACrC,QAAQ,OAAO,cAAc,KAAK,aAAa,GAAG,CAAC;AACnD,eAAO;AACT,UAAI,QAAQ,OAAO;AAAa,eAAO;AACvC,UAAI,QAAQ,OAAO,cAAc,SAAS;AAAmB,eAAO;AACpE,UAAI,CAAC,YAAY,aAAa,UAAU,EAAE,SAAS,QAAQ,EAAE,KAAK,CAAC,MAAM,IAAI,UAAU;AAAG,eAAO;AACjG,UAAI,UAAU,IAAI,YAAY;AAAG,eAAO;AAExC,UAAI,KAAK,aAAa,GAAG,CAAC,KAAK,QAAQ,OAAO;AAAa,eAAO;AAGlE,UAAI,KAAK,OAAO,aAAa,cAAc;AAC1C,YACC,QAAQ,OAAO,cACd,QAAQ,gBAAgB,cAAc,SAAS;AAC/C,iBAAO;AACT,YAAI,QAAQ,OAAO;AAAW,iBAAO;AACrC,YAAI,QAAQ,OAAO;AAAa,iBAAO;AACvC,YAAI,QAAQ,OAAO;AAAa,iBAAO;AACvC,YAAI,QAAQ,OAAO;AAAe,iBAAO;AACzC,YAAI,QAAQ,OAAO,cAAc,UAAU,IAAI,UAAU,KAAK,UAAU,IAAI,WAAW;AAAG,iBAAO;AAEjG,YAAI,KAAK,aAAa,GAAG,CAAC,KAAK,QAAQ,OAAO;AAAY,iBAAO;AAAA,MAClE;AAAA,IACD;AAEA,QAAI,iBAA4B,CAAC;AAEjC,eAAW,WAAW,aAAa;AAClC,UAAI,QAAQ,UAAU,KAAK,CAAC,KAAK;AAAA,QAChC,QAAQ;AAAA,QAAM;AAAA,QAAO;AAAA,QAAO;AAAA,QAAW;AAAA,QAAS;AAAA,QAAa;AAAA,QAAS;AAAA,QAAQ;AAAA,QAAW;AAAA,QAAU;AAAA,MACpG,GAAG;AACF,uBAAe,KAAK,OAAO;AAAA,MAC5B;AAAA,IACD;AAGA,QAAI,CAAC,eAAe,QAAQ;AAC3B,iBAAW,WAAW,aAAa;AAClC,YAAI,QAAQ,SAAS;AAAG,yBAAe,KAAK,OAAO;AAAA,MACpD;AACA,UAAI,CAAC,eAAe;AAAQ,yBAAiB;AAAA,IAC9C;AAEA,QAAI,eAAe,WAAW;AAAG,aAAO,eAAe,CAAC,EAAE;AAG1D,QAAI,eAAe,CAAC,KAAK,eAAe,CAAC,EAAE,SAAS,OAAO,eAAe,CAAC,EAAE,QAAQ;AACpF,UAAI,eAAe,CAAC,EAAE,UAAU,eAAe,CAAC,EAAE,QAAQ;AACzD,YAAI,KAAK,aAAa,GAAG,CAAC;AAAG,WAAC,eAAe,CAAC,GAAG,eAAe,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,eAAe,CAAC,CAAC;AAAA,MAC5G,OAAO;AACN,YAAI,KAAK,aAAa,GAAG,CAAC;AAAG,WAAC,eAAe,CAAC,GAAG,eAAe,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,eAAe,CAAC,CAAC;AAAA,MAC5G;AACA,UAAI,eAAe,CAAC,EAAE,UAAU,eAAe,CAAC,EAAE,QAAQ;AACzD,YAAI,KAAK,aAAa,GAAG,CAAC;AAAG,WAAC,eAAe,CAAC,GAAG,eAAe,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,eAAe,CAAC,CAAC;AAAA,MAC5G,OAAO;AACN,YAAI,KAAK,aAAa,GAAG,CAAC;AAAG,WAAC,eAAe,CAAC,GAAG,eAAe,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,eAAe,CAAC,CAAC;AAAA,MAC5G;AAAA,IACD,OAAO;AAEN,UAAI,eAAe,CAAC,EAAE,UAAU,eAAe,CAAC,EAAE,QAAQ;AACzD,YAAI,KAAK,aAAa,GAAG,CAAC;AAAG,WAAC,eAAe,CAAC,GAAG,eAAe,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,eAAe,CAAC,CAAC;AAAA,MAC5G,WAAW,eAAe,CAAC,EAAE,SAAS,OAAO,eAAe,CAAC,EAAE,QAAQ;AACtE,YAAI,KAAK,aAAa,GAAG,CAAC;AAAG,WAAC,eAAe,CAAC,GAAG,eAAe,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,eAAe,CAAC,CAAC;AAAA,MAC5G;AAAA,IACD;AAGA,WAAO,eAAe,CAAC,EAAE;AAAA,EAC1B;AAAA,EAEA,gBACC,SACA,OACA,OACA,SACA,aACA,SACA,QACA,WACA,UACA,MACC;AACD,QAAI,CAAC,WAAW;AACf,UACC,CAAC,UAAU,SAAS,kBACnB,YAAY,iBAAiB,YAAY,mBACzC;AACD,eAAO;AAAA,MACR;AACA,UAAI,QAAQ,OAAO,SAAS;AAC3B,eAAQ,SAAS,kBAAmB,kBAAkB;AAAA,MACvD;AAAA,IACD;AACA,QAAI,QAAQ,eAAe;AAE1B,UAAI,QAAQ,gBAAgB,UAAU;AACrC,eAAO,QAAQ,cAAc,CAAC;AAAA,MAC/B;AACA,aAAO,KAAK,OAAO,QAAQ,aAAa;AAAA,IACzC;AACA,QAAI,SAAS;AAAY,aAAO;AAChC,QAAI,QAAQ,OAAO;AAAW,aAAO;AACrC,QAAI,QAAQ,OAAO;AAAa,aAAO;AACvC,QAAI,QAAQ,OAAO;AAAY,aAAO;AACtC,QAAI,QAAQ,OAAO,cAAc,MAAM,IAAI,gBAAgB;AAAG,aAAO;AACrE,QAAI,MAAM,IAAI,gBAAgB,KAAM,QAAQ,OAAO,gBAAgB,MAAM,IAAI,WAAW;AAAI,aAAO;AACnG,QACE,QAAQ,gBAAgB,cAAc,SAAS,qBAChD,QAAQ,OAAO,sBAAuB,QAAQ,OAAO,gBAAgB;AACpE,aAAO;AACT,QAAI,MAAM,IAAI,cAAc,KAAK,MAAM,IAAI,cAAc;AAAG,aAAO;AACnE,QACC,YAAY,cACX,QAAQ,OAAO,eAAe,MAAM,IAAI,WAAW,KAAK,CAAC;AACzD,aAAO;AACT,QAAI,QAAQ,OAAO,gBAAgB,SAAS,mBAAmB;AAAY,aAAO;AAClF,QAAI,QAAQ,OAAO,aAAa,MAAM,IAAI,aAAa;AAAG,aAAO;AACjE,QAAI,MAAM,IAAI,WAAW,KAAK,MAAM,IAAI,YAAY;AAAG,aAAO;AAC9D,QACC,CAAC,eAAe,YAAY,WAAW,OAAO,EAAE,KAAK,OAAK,YAAY,CAAC,KACvE,MAAM,IAAI,WAAW,KAAK,MAAM,IAAI,YAAY,GAC/C;AACD,aAAO;AAAA,IACR;AACA,QAAI,CAAC,eAAe,cAAc,OAAO,EAAE,KAAK,OAAK,MAAM,IAAI,CAAC,CAAC,GAAG;AACnE,UACC,QAAQ,UAAU,OAAO,MAAM,QAAQ,UAAU,OAAO,OACxD,SAAS,iBAAiB,SAAS,yBAAyB,CAAC,QAAQ,IAAI,UAAU,GAClF;AACD,eAAO;AAAA,MACR,OAAO;AACN,eAAQ,QAAQ,IAAI,UAAU,IAAI,QAAQ,IAAI,SAAS,IAAK,gBAAgB;AAAA,MAC7E;AAAA,IACD;AACA,QAAI,QAAQ,IAAI,QAAQ,MAAM,QAAQ,SAAS,YAAY,QAAQ,SAAS;AAAW,aAAO;AAC9F,QAAI,QAAQ,OAAO,aAAa,CAAC;AAAW,aAAQ,UAAU,CAAC,MAAM,IAAI,OAAO,IAAK,aAAa;AAClG,QAAI,QAAQ;AAAK,aAAO;AACxB,QAAI,YAAY;AAAe,aAAO;AACtC,SAAK,YAAY,UAAU,MAAM,IAAI,QAAQ,MAAM,CAAC,MAAM,IAAI,WAAW,GAAG;AAC3E,aAAQ,MAAM,SAAS,MAAM,KAAK,YAAY,gBAAiB,cAAc;AAAA,IAC9E;AACA,QAAI,QAAQ,OAAO,eAAgB,YAAY,iBAAiB,QAAQ,IAAI,YAAY;AAAI,aAAO;AACnG,QAAI,YAAY;AAAe,aAAO,KAAK,OAAO,CAAC,eAAe,gBAAgB,cAAc,cAAc,CAAC;AAC/G,QAAI,MAAM,IAAI,aAAa,KAAK;AAAW,aAAO;AAClD,QAAI,QAAQ,IAAI,WAAW,KAAK,YAAY,gBAAgB,QAAQ,OAAO;AAAW,aAAO;AAC7F,QAAI,YAAY,YAAY;AAC3B,aAAQ,MAAM,IAAI,aAAa,KAAK,MAAM,IAAI,WAAW,IAAK,eAAe;AAAA,IAC9E;AACA,QAAI,MAAM,IAAI,YAAY,KAAK,YAAY;AAAc,aAAO;AAChE,QAAI,MAAM,IAAI,YAAY,KAAM,MAAM,IAAI,aAAa,KAAK,CAAC,YAAY;AAAO,aAAO;AACvF,QAAI,MAAM,IAAI,YAAY,KAAK,YAAY;AAAkB,aAAO;AACpE,QAAI,MAAM,IAAI,YAAY,KAAK,MAAM,IAAI,aAAa,KAAK,MAAM,IAAI,SAAS;AAAG,aAAO;AACxF,QAAI,YAAY;AAAY,aAAO,GAAG,KAAK,OAAO,CAAC,SAAS,QAAQ,UAAU,QAAQ,MAAM,CAAC;AAC7F,QACC,MAAM,IAAI,MAAM,KAAK,CAAC,MAAM,IAAI,WAAW,KAC3C,YAAY,kBAAkB,YAAY,aACzC;AACD,aAAO;AAAA,IACR;AACA,QACC,QAAQ,OAAO,aACf,KAAK,IAAI,iBAAiB,QAAQ,OAAO,KAAK,MAAM,CAAC,MAAM,SAAS,QAAQ,KAAK,CAAC;AACjF,aAAO;AAAA,EACV;AAAA;AAAA,EAGA,eACC,SACA,OACA,OACA,SACA,aACA,SACA,QACA,UACA,MACS;AACT,UAAM,YACL,CAAC,QAAQ,IAAI,UAAU,KAAK,YAAY,iBAAiB,SAAS,yBAClE,QAAQ,UAAU,OAAO,MAAM,QAAQ,UAAU,OAAO,OACxD,KAAK,aAAa,GAAG,CAAC;AAEvB,UAAM,gBACL,CAAC,yBAAyB,uBAAuB,yBAAyB,mBAAmB,EAAE,KAAK,OAAK,SAAS,CAAC;AAGpH,QAAI,QAAQ,OAAO,uBAAwB,MAAM,IAAI,YAAY,KAAK,MAAM,IAAI,SAAS;AAAI,aAAO;AACpG,QACC,MAAM,IAAI,UAAU,KAAK,MAAM,IAAI,SAAS,MAAM,MAAM,IAAI,SAAS,KAAM,MAAM,IAAI,UAAU;AAC9F,aAAO;AACT,QAAI,MAAM,IAAI,YAAY;AAAG,aAAO;AACpC,QAAI,QAAQ,IAAI,YAAY,KAAK,SAAS;AAAuB,aAAO;AACxE,QAAI,QAAQ,OAAO;AAAW,aAAO;AACrC,QAAI,MAAM,IAAI,UAAU,KAAK,YAAY,kBAAkB,CAAC,YAAY;AAAM,aAAO;AAErF,QAAI,SAAS,oBAAoB;AAChC,UAAI,aAAc,QAAQ,IAAI,UAAU,IAAI,KAAK,QAAQ,IAAI,SAAS,IAAI,KAAK,CAAC,MAAM,IAAI,SAAS,GAAI;AACtG,eAAO;AAAA,MACR;AACA,aAAQ,QAAQ,IAAI,UAAU,KAAK,IAAK,gBAAgB;AAAA,IACzD;AACA,QAAI,QAAQ,IAAI,UAAU,KAAK,KAC9B,CAAC,WAAW,SAAS,mBAAmB,aAAa,aAAa,EAAE,MAAM,OAAK,CAAC,MAAM,IAAI,CAAC,CAAC,MAC3F,MAAM,IAAI,UAAU,KAAK,MAAM,IAAI,OAAO,KAAK,SAAS,wBACxD;AACD,aAAQ,YAAa,iBAAiB;AAAA,IACvC;AACA,SACG,QAAQ,IAAI,SAAS,KAAK,MAAM,MAAM,IAAI,YAAY,KAAK,SAAS,0BACrE,QAAQ,IAAI,SAAS,KAAK,MAAM,MAAM,IAAI,OAAO,KAAK,MAAM,IAAI,UAAU,OACrE,CAAC,MAAM,IAAI,YAAY,GAC5B;AACD,aAAQ,YAAa,iBAAiB;AAAA,IACvC;AACA,QACE,SAAS,mBAAmB,QAAQ,IAAI,OAAO,KAAM,MAAM,IAAI,YAAY,KAC5E,QAAQ,OAAO;AACd,aAAO;AACT,QAAI,QAAQ,OAAO;AAAW,aAAO;AACrC,SACE,iBAAkB,SAAS,sBAAsB,QAAQ,UAAU,OAAO,MAAM,MAAM,IAAI,WAAW,QACrG,CAAC,MAAM,IAAI,SAAS,KAAK,QAAQ,OAAO,cAAc,CAAC,MAAM,IAAI,YAAY,MAC7E,CAAC,MAAM,IAAI,OAAO,KAAK,MAAM,SAAS,KAAK,KAAK,QAAQ,UAAU,OAAO,OAAO,YAAY,cAC3F,CAAC,MAAM,IAAI,SAAS,KAAK,CAAC,MAAM,IAAI,YAAY,KAAM,QAAQ,OAAO,eACtE;AACD,cACE,YAAY,iBAAiB,YAAY,qBAC1C,CAAC,mBAAmB,SAAS,YAAY,EAAE,MAAM,OAAK,CAAC,MAAM,IAAI,CAAC,CAAC,KAAK,QAAQ,OAAO,gBACpF,mBAAmB;AAAA,IACxB;AACA,QAAI,WAAW,QAAQ,OAAO,cAC5B,CAAC,yBAAyB,uBAAuB,mBAAmB,EAAE,SAAS,IAAI,KACpF,QAAQ,UAAU,KAAK,QAAQ,UAAU,MAAM,QAAQ,UAAU,OAAO;AACvE,aAAO;AACT,QACC,CAAC,yBAAyB,uBAAuB,mBAAmB,EAAE,SAAS,IAAI,KACnF,MAAM,IAAI,SAAS,KAAK,MAAM,IAAI,YAAY,GAC7C;AACD,aAAQ,KAAK,IAAI,iBAAiB,QAAQ,OAAO,KAAK,IAAK,qBAAqB;AAAA,IACjF;AACA,QAAI,CAAC,QAAQ,IAAI,QAAQ;AAAG,aAAO;AACnC,WAAO;AAAA,EACR;AAAA,EAEA,QACC,SACA,OACA,OACA,SACA,aACA,SACA,QACA,UACA,MACS;AACT,QAAI,MAAM,SAAS,QAAQ,KAAK,MAAM,IAAI,SAAS;AAAG,aAAO;AAC7D,QACC,QAAQ,OAAO,aAAc,QAAQ,IAAI,UAAU,KAAK,KACxD,CAAC,cAAc,WAAW,mBAAmB,eAAe,WAAW,EAAE,MAAM,OAAK,CAAC,MAAM,IAAI,CAAC,CAAC,GAChG;AACD,YAAM,YACL,SAAS,kBACR,QAAQ,UAAU,OAAO,OAAO,YAAY,gBAAgB,YAAY,iBACzE,QAAQ,UAAU,OAAO,MAAM,QAAQ,UAAU,OAAO,OACxD,YAAY,iBAAiB,CAAC,QAAQ,IAAI,UAAU,KAAK,CAAC,MAAM,IAAI,UAAU;AAE/E,aAAQ,aAAa,KAAK,aAAa,GAAG,CAAC,IAAK,iBAAiB;AAAA,IAClE;AACA,QACE,QAAQ,IAAI,SAAS,KAAK,KAC1B,QAAQ,IAAI,SAAS,KAAK,KAAK,CAAC,YAAY,eAAe,OAAO,EAAE,KAAK,OAAK,MAAM,IAAI,CAAC,CAAC,GAC1F;AACD,YAAM,YACL,SAAS,iBACT,QAAQ,UAAU,OAAO,OACzB,QAAQ,UAAU,OAAO,MAAM,QAAQ,UAAU,OAAO,OACxD,YAAY,iBAAiB,YAAY,iBAAiB,CAAC,QAAQ,IAAI,UAAU;AAElF,aAAQ,aAAa,KAAK,aAAa,GAAG,CAAC,IAAK,iBAAiB;AAAA,IAClE;AACA,QAAI,QAAQ,IAAI,YAAY,KAAK,SAAS;AAAe,aAAO;AAChE,QACC,CAAC,QAAQ,IAAI,QAAQ,KACrB,CAAC,CAAC,iBAAiB,eAAe,iBAAiB,EAAE,SAAS,IAAI,GACjE;AACD,aAAO;AAAA,IACR;AACA,QAAI,QAAQ,OAAO;AAAS,aAAQ,QAAQ,IAAI,YAAY,IAAK,oBAAoB;AACrF,QAAI,QAAQ,OAAO;AAAU,aAAO;AACpC,QAAI,MAAM,IAAI,YAAY;AAAG,aAAO;AACpC,QAAI,MAAM,IAAI,WAAW,KAAK,QAAQ,OAAO,eAAe;AAAQ,aAAO;AAC3E,QAAI,KAAK,IAAI,iBAAiB,QAAQ,OAAO,KAAK;AAAG,aAAO;AAC5D,QACE,MAAM,IAAI,iBAAiB,KAC3B,SAAS,kBACT,CAAC,GAAG,aAAa,SAAS,cAAc,WAAW,EAAE,KAAK,OAAK,MAAM,IAAI,CAAC,CAAC,KAC3E,CAAC,MAAM,SAAS,QAAQ,KAAK,YAAY;AAEzC,aAAO;AAGT,QACE,QAAQ,OAAO,cAAc,SAAS,kBACtC,YAAY,kBAAkB,SAAS,mBAAmB,SAAS,qBAClE,QAAQ,UAAU,KAAK,QAAQ,UAAU,OAAQ,OAAO,KAAK,aAAa,GAAG,CAAC;AAE/E,aAAO;AACT,QAAI,MAAM,IAAI,SAAS;AAAG,aAAO;AACjC,QAAI,MAAM,IAAI,SAAS,KAAK,YAAY;AAAe,aAAO;AAC9D,QACC,SAAS,kBAAkB,UAC3B,CAAC,QAAQ,IAAI,UAAU,KAAK,CAAC,QAAQ,IAAI,QAAQ,KAChD,QAAQ,UAAU,KAAK,QAAQ,UAAU,MAAM,QAAQ,UAAU,MAAO;AACxE,aAAO;AACT,QACC,CAAC,QAAQ,IAAI,OAAO,KAAK,YAAY,cAAc,KAAK,IAAI,iBAAiB,UAAU,OAAO,KAAK;AAClG,aAAO;AACT,QAAI,CAAC,kBAAkB,iBAAiB,aAAa,EAAE,KAAK,OAAK,SAAU,CAAE;AAAG,aAAO;AACvF,QAAI,QAAQ,OAAO,YAAY,MAAM,IAAI,QAAQ;AAAG,aAAO;AAC3D,QACC,CAAC,oBAAoB,iBAAiB,iBAAiB,aAAa,EAAE,KAAK,OAAK,SAAS,CAAC,KAC1F,MAAM,SAAS,MAAM,KAAK,MAAM,IAAI,aAAa,KAAK,CAAC,iBAAiB,SAAS,QAAQ,EAAE,KAC3F,QAAQ,IAAI,eAAe,KAAK,QAAQ,IAAI,MAAM;AACjD,aAAO;AACT,QAAI,SAAS,kBAAkB,SAAS,oBAAoB;AAC3D,aAAQ,QAAQ,IAAI,UAAU,IAAI,QAAQ,IAAI,SAAS,KAAK,KAAK,CAAC,MAAM,IAAI,QAAQ,IAAK,aAAa;AAAA,IACvG;AACA,QAAI,SAAS,qBAAqB,2BAA2B,SAAS,QAAQ,EAAE;AAAG,aAAO;AAC1F,QACC,CAAC,eAAe,aAAa,YAAY,EAAE,MAAM,OAAK,CAAC,MAAM,IAAI,CAAC,CAAC,KACnE,CAAC,iBAAiB,iBAAiB,mBAAmB,aAAa,EAAE,KAAK,OAAK,SAAU,CAAE;AAC1F,aAAO;AACT,WAAO;AAAA,EACR;AAAA,EAEA,SACC,SACA,WACS;AACT,QAAI,KAAK;AAAa,aAAO,KAAK;AAElC,QAAI,aAAa,KAAK,kBAAkB,QAAQ,EAAE,EAAE,OAAO;AAAG,aAAO,KAAK,kBAAkB,QAAQ,EAAE,EAAE,OAAO;AAC/G,QAAI,CAAC,aAAa,KAAK,WAAW,QAAQ,EAAE,EAAE,OAAO;AAAG,aAAO,KAAK,WAAW,QAAQ,EAAE,EAAE,OAAO;AAElG,UAAM,OAAO,QAAQ;AACrB,UAAM,YAAsD;AAAA,MAC3D,MAAM;AAAA,MACN,IAAI;AAAA,MACJ,MAAM;AAAA,MACN,IAAI;AAAA,MACJ,MAAM;AAAA,MACN,IAAI;AAAA,MACJ,MAAM;AAAA,MACN,IAAI;AAAA,MACJ,MAAM;AAAA,MACN,IAAI;AAAA,MAAI,QAAQ;AAAA,MAAI,KAAK;AAAA,IAC1B;AACA,WAAO,UAAU,IAAI,KAAK;AAAA,EAC3B;AAAA,EAEA,SAAS,SAA0B;AAClC,QAAI,OAAO,QAAQ,eAAe,UAAU;AAE3C,aAAO,QAAQ;AAAA,IAChB;AACA,QAAI,QAAQ;AAAgB,aAAO,KAAK,OAAO,CAAC,QAAQ,IAAI,EAAE,OAAO,QAAQ,cAAc,CAAC;AAG5F,QAAI,CAAC,eAAe,YAAY,YAAY,eAAe,aAAa,QAAQ,EAAE,SAAS,QAAQ,WAAW,GAAG;AAChH,aAAO,KAAK,OAAO,CAAC,QAAQ,IAAI,EAAE,OAAO,QAAQ,WAAY,CAAC;AAAA,IAC/D;AACA,QAAI,QAAQ,gBAAgB;AAAY,aAAO,aAAa,KAAK,OAAO,CAAC,IAAI,eAAe,CAAC;AAC7F,QAAI,QAAQ,gBAAgB,WAAW;AACtC,aAAO,YAAY,KAAK;AAAA,QACvB,CAAC,IAAI,aAAa,UAAU,WAAW,UAAU,UAAU,UAAU,YAAY,QAAQ;AAAA,MAC1F;AAAA,IACD;AACA,WAAO,QAAQ;AAAA,EAChB;AAAA,EAEA,UACC,GACA,cAA4C,CAAC,GAC7C,SAAS,OACT,YAAY,OACiB;AAC7B,UAAM,UAAU,KAAK,IAAI,QAAQ,IAAI,CAAC;AACtC,UAAM,QAAQ,KAAK,SAAS,OAAO;AACnC,UAAM,OAAQ,KAAa,SAAS,YAAY,YAAY,QAAQ,EAAE,QAAQ,EAAE,EAAE,MAAM;AACxF,UAAM,eAAe,CAAC;AAEtB,UAAM,YAAY,KAAK,IAAI,QAAQ,aAAa,KAAK,MAAM;AAE3D,eAAWC,QAAO,MAAM;AAEvB,WAAK,YAAY,aAAa,UAAU,IAAI,gBAAgB,MAAMA,KAAI,SAAS,mBAAmB;AACjG;AAAA,MACD;AACA,mBAAa,KAAKA,IAAG;AAAA,IACtB;AACA,UAAM,MAAM,KAAK,cAAc,YAAY;AAC3C,UAAM,OAAO,IAAI;AACjB,UAAM,WAAqB,CAAC;AAC5B,eAAW,YAAY,IAAI,UAAU;AACpC,eAAS,KAAK,KAAK,IAAI,MAAM,IAAI,QAAQ,EAAE,EAAE;AAAA,IAC9C;AACA,UAAM,YAAY,IAAI;AACtB,QAAI,WAAW,KAAK,cAAc,SAAS;AAE3C,QAAI,UAAU;AACd,QAAI,OAAO;AAEX,UAAM,MAAM,EAAC,IAAI,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAE;AAChE,UAAM,MAAM,EAAC,IAAI,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAE;AAEhE,UAAM,QAAQ,QAAQ;AACtB,UAAM,YAAY,IAAI,IAAI,OAAO,OAAO,QAAQ,SAAS,CAAC;AAC1D,QAAI,QAAQ;AAAkB,gBAAU,OAAO,QAAQ,UAAU,CAAC;AAGlE,UAAM,QAAQ,KAAK,cAAc,OAAO,WAAW,aAAa,SAAS,QAAQ,WAAW,UAAU,UAAU,IAAI;AACpH,UAAM,UAAU,KAAK,WAAW,OAAO,SAAS,UAAU,SAAS;AAGnE,cAAU,KAAK,WAAW,OAAO,OAAO,WAAW,SAAS,aAAa,SAAS,QAAQ,WAAW,UAAU,IAAI;AAInH,WAAO,KAAK,gBAAgB,SAAS,OAAO,OAAO,SAAS,aAAa,SAAS,QAAQ,WAAW,UAAU,IAAI;AACnH,QAAI,SAAS,QAAW;AACvB,UAAI,WAAW;AACd,eAAO,KAAK,eAAe,SAAS,OAAO,OAAO,SAAS,aAAa,SAAS,QAAQ,UAAU,IAAI;AAAA,MACxG,OAAO;AACN,eAAO,KAAK,QAAQ,SAAS,OAAO,OAAO,SAAS,aAAa,SAAS,QAAQ,UAAU,IAAI;AAAA,MACjG;AAAA,IACD;AAGA,UAAM,QAAQ,KAAK,SAAS,SAAS,SAAS;AAG9C,UAAM,aAAa,YAAY,iBAAiB,SAAS;AACzD,QAAI,aAAa,aAAa,IAAI,KAAK,IAAI,iBAAiB,QAAQ,OAAO;AAE3E,QAAI,CAAC,WAAW,gBAAgB,UAAU,EAAE,KAAK,OAAK,MAAM,IAAI,CAAC,CAAC;AAAG,mBAAa;AAClF,WAAO,IAAI,KAAK,GAAG;AAClB,YAAM,KAAK,KAAK,MAAM,KAAK,MAAM,IAAI,QAAQ,UAAU,KAAK,IAAI,KAAK,KAAK,MAAM,IAAI,KAAK,CAAC,IAAI,GAAG,IAAI,QAAQ,MAAM,EAAE;AACrH,UAAK,MAAM,IAAI,YAAY,KAAK,CAAC,gBAAgB,aAAa,EAAE,SAAS,IAAI,GAAI;AAEhF,YAAI,KAAK,MAAM;AAAG;AAAA,MACnB,YAAY,MAAM,IAAI,WAAW,KAAK,MAAM,IAAI,YAAY,OAAO,SAAS,kBAAkB,YAAY,aAAa;AAEtH,YAAI,KAAK,MAAM;AAAG;AAAA,MACnB,WAAW,MAAM,IAAI,YAAY,KAAK,MAAM,IAAI,UAAU,GAAG;AAE5D,YAAI,KAAK,IAAI;AAAG;AAAA,MACjB,OAAO;AAEN,YAAI,cAAc,KAAK,YAAY,iBAAiB,CAAC,aAAa,UAAU,EAAE,SAAS,IAAI;AAAG;AAC9F,YAAI,SAAS,kBAAkB,MAAM,IAAI,cAAc;AAAG;AAE1D,YAAI,SAAS,kBAAkB,MAAM,IAAI,gBAAgB;AAAG;AAAA,MAC7D;AACA,UAAI,MAAM;AAAA,IACX;AAGA,UAAM,oBAAoB,CAAC,GAAG,KAAK,EAAE,MAAM,OAAK;AAC/C,YAAM,OAAO,KAAK,IAAI,MAAM,IAAI,CAAC;AACjC,UAAI,KAAK,kBAAkB,KAAK;AAAQ,eAAO;AAC/C,UAAI,KAAK,OAAO;AAAgB,eAAO;AAEvC,UAAI,KAAK,OAAO,gBACf,QAAQ,OAAO,cAAc,MAAM,IAAI,WAAW,KAAK,QAAQ,UAAU,MAAM,QAAQ,UAAU;AAChG,eAAO;AACT,aAAO,KAAK,aAAa,cAAc,KAAK,OAAO,eAAe,KAAK,OAAO;AAAA,IAC/E,CAAC;AACD,QAAI,qBAAqB,CAAC,MAAM,IAAI,WAAW,KAAK,KAAK,OAAO,QAAQ,mBAAmB;AAC1F,UAAI,MAAM;AACV,UAAI,MAAM;AAAA,IACX;AAEA,QAAI,MAAM,IAAI,UAAU,KAAK,MAAM,IAAI,WAAW,GAAG;AACpD,UAAI,MAAM;AACV,UAAI,MAAM;AAAA,IACX;AAGA,QAAI,KAAK;AAAe,iBAAW,KAAK;AAGxC,UAAM,gBAAgB,MAAM,KAAK,KAAK;AACtC,SAAK,KAAK,QAAQ,aAAa;AAC/B,WAAO;AAAA,MACN,MAAM,QAAQ;AAAA,MACd,SAAS;AAAA,MACT,QAAQ,QAAQ,gBAAgB,aAAa,MAAM,QAAQ;AAAA,MAC3D,OAAO,KAAK,aAAa,GAAG,IAAI;AAAA,MAChC;AAAA,MACA,OAAO;AAAA,MACP;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAAA,EAEA,eACC,MACA,mBAAiD,CAAC,GAClD,aAAa,OACb,aACsC;AACtC,UAAM,UAAU,iBAAiB,IAAI,WAAK,iBAAK,EAAE,OAAO,CAAC;AACzD,UAAM,cAAuC,CAAC;AAC9C,UAAM,kBAAkB,CAAC;AACzB,eAAW,WAAW,aAAa;AAClC,UAAI,UAAU,KAAK,IAAI,QAAQ,IAAI,OAAO;AAC1C,UAAI,QAAQ,SAAS,QAAQ,EAAE;AAAG;AAClC,UAAI,YAAY;AACf,YAAI,CAAC,QAAQ,MAAM,SAAS,IAAI;AAAG;AACnC,YAAI,OAAO,QAAQ,eAAe,UAAU;AAC3C,oBAAU,KAAK,IAAI,QAAQ,IAAI,QAAQ,UAAU;AACjD,cAAI,CAAC,QAAQ,MAAM,SAAS,IAAI;AAAG;AAAA,QACpC;AAAA,MACD;AAEA,UAAI,QAAQ,eAAe,aAAa;AACvC,oBAAY,QAAQ,WAAW,EAAE,KAAK,OAAO;AAAA,MAC9C,OAAO;AACN,oBAAY,QAAQ,WAAW,IAAI,CAAC,OAAO;AAAA,MAC5C;AAAA,IACD;AAEA,eAAW,eAAe,OAAO,KAAK,WAAW,GAAG;AAEnD,YAAM,SAAU,gBAAgB,iBAAkB,IAAI,KAAK,IAAI,KAAK,KAAK,YAAY,WAAW,EAAE,SAAS,CAAC,GAAG,CAAC;AAChH,eAAS,IAAI,GAAG,IAAI,QAAQ;AAAK,wBAAgB,KAAK,WAAW;AAAA,IAClE;AACA,WAAO,CAAC,aAAa,eAAe;AAAA,EACrC;AAAA,EAKA,aAAa;AACZ,SAAK,oCAAoC;AAEzC,UAAM,OAAO,KAAK,KAAK;AACvB,UAAM,YAAY,KAAK,IAAI,QAAQ,aAAa,KAAK,MAAM;AAC3D,UAAM,UAAwC,CAAC;AAG/C,UAAM,aAAa,CAAC,CAAC,KAAK,iBAAiB,UAAU,IAAI,gBAAgB;AACzE,UAAM,YAAY,KAAK,OAAO,aAAa;AAC3C,UAAM,WAAW,KAAK,IAAI,MAAM,MAAM,EAAE,OAAO,UAAQ,SAAS,SAAS;AACzE,UAAM,OAAO,KAAK,iBAAiB,KAAK,OAAO,QAAQ;AAGvD,UAAM,UAAU,OAAO,UAAU,OAAO,QAAQ,UAAU,IAAI,MAAM;AACpE,UAAM,OAAO,UAAU,KAAK,IAAI,QAAQ,IAAI,OAAO,IAAI,IAAI;AAE3D,UAAM,aAAoC,CAAC;AAE3C,UAAM,YAAmC,CAAC;AAC1C,UAAM,iBAAwC,CAAC;AAC/C,UAAM,iBAAwC,CAAC;AAC/C,UAAM,cAA4C,CAAC;AACnD,QAAI,qBAAqB;AAEzB,UAAM,cAAc,YAAY,OAAO,KAAK,KAAK,iBAAiB,IAAI,OAAO,KAAK,KAAK,UAAU;AACjG,UAAM,CAAC,aAAa,eAAe,IAAI,KAAK,eAAe,MAAM,SAAS,YAAY,WAAW;AAEjG,QAAI,iBAAiB,KAAK,OAAO,aAAa,YAAY,IAAI;AAC9D,WAAO,gBAAgB,UAAU,QAAQ,SAAS,KAAK,aAAa;AACnE,YAAM,cAAc,KAAK,gBAAgB,eAAe;AACxD,UAAI,UAAU,KAAK,IAAI,QAAQ,IAAI,KAAK,OAAO,YAAY,WAAW,CAAC,CAAC;AACxE,UAAI,CAAC,QAAQ;AAAQ;AAGrB,UAAI,WAAW,QAAQ,WAAW;AAAG;AAGrC,WAAK,QAAQ,gBAAgB,aAAa,QAAQ,gBAAgB,gBAAgB,YAAY;AAAW;AAGzG,UAAI,QAAQ,gBAAgB,aAAa,QAAQ,UAAW,KAAK,cAAc;AAAI;AAEnF,YAAM,QAAQ,QAAQ;AACtB,YAAM,YAAY,MAAM,MAAM,EAAE,KAAK,EAAE,KAAK;AAC5C,YAAM,kBACL,KAAK,IAAI,iBAAiB,OAAO,OAAO,IAAI,KAC3C,KAAK,IAAI,iBAAiB,OAAO,OAAO,IAAI,MAAM,MAAM,SAAS,OAAO;AAG1E,YAAM,cAAc,KAAK,MAAM,KAAK,cAAc,CAAC,KAAK;AAExD,UAAI,CAAC,cAAc,CAAC,KAAK,eAAe;AACvC,YAAI,OAAO;AAGX,mBAAW,YAAY,OAAO;AAC7B,cAAI,UAAU,QAAQ,KAAK,IAAI,aAAa;AAC3C,mBAAO;AACP;AAAA,UACD;AAAA,QACD;AACA,YAAI;AAAM;AAGV,mBAAW,YAAY,KAAK,IAAI,MAAM,MAAM,GAAG;AAE9C,cAAI,KAAK,IAAI,iBAAiB,UAAU,OAAO,IAAI,GAAG;AACrD,gBAAI,CAAC,eAAe,QAAQ;AAAG,6BAAe,QAAQ,IAAI;AAC1D,gBAAI,eAAe,QAAQ,KAAK,IAAI,aAAa;AAChD,qBAAO;AACP;AAAA,YACD;AAAA,UACD;AAAA,QACD;AACA,YAAI;AAAM;AAGV,YAAI,iBAAiB;AACpB,cAAI,CAAC,eAAe,YAAY;AAAG,2BAAe,YAAY,IAAI;AAClE,cAAI,eAAe,YAAY,KAAK,IAAI;AAAa;AAAA,QACtD;AAGA,YAAI,CAAC,KAAK,eAAgB,KAAK,SAAS,SAAS,SAAS,MAAM,OAAQ,sBAAsB,aAAa;AAC1G;AAAA,QACD;AAAA,MACD;AAGA,UAAI,CAAC,KAAK,iBAAiB,cAAe,eAAe,SAAS,KAAK,IAAI;AAAc;AAGzF,UAAI,MAAM,WAAW,QAAQ,WAAW,KAAK,KAAK,gBAAgB;AAAI,kBAAU;AAEhF,UAAI;AAEJ,UAAI,gBAAgB;AACnB,YACC,aAAa,wBAAwB,SAAS,QAAQ,WAAW,KACjE,CAAC,aAAa,gBAAgB,SAAS,QAAQ,WAAW,GACzD;AACD,cAAI,QAAQ,SAAS,mBAAmB,KAAK;AAAa;AAC1D,gBAAM,KAAK,UAAU,SAAS,aAAa,OAAO,SAAS;AAC3D,kBAAQ,KAAK,GAAG;AAAA,QACjB,OAAO;AACN,gBAAM,KAAK,UAAU,SAAS,aAAa,MAAM,SAAS;AAC1D,kBAAQ,QAAQ,GAAG;AACnB;AAAA,QACD;AAAA,MACD,OAAO;AACN,cAAM,KAAK,UAAU,SAAS,aAAa,OAAO,SAAS;AAC3D,gBAAQ,KAAK,GAAG;AAAA,MACjB;AAGA,UAAI,QAAQ,WAAW,KAAK;AAAa;AAGzC,iBAAW,QAAQ,WAAW,IAAI;AAGlC,iBAAW,YAAY,OAAO;AAC7B,YAAI,YAAY,WAAW;AAC1B,oBAAU,QAAQ;AAAA,QACnB,OAAO;AACN,oBAAU,QAAQ,IAAI;AAAA,QACvB;AAAA,MACD;AACA,UAAI,aAAa,gBAAgB;AAChC,uBAAe,SAAS;AAAA,MACzB,OAAO;AACN,uBAAe,SAAS,IAAI;AAAA,MAC7B;AAGA,iBAAW,YAAY,KAAK,IAAI,MAAM,MAAM,GAAG;AAE9C,YAAI,KAAK,IAAI,iBAAiB,UAAU,OAAO,IAAI,GAAG;AACrD,yBAAe,QAAQ;AAAA,QACxB;AAAA,MACD;AACA,UAAI;AAAiB,uBAAe,YAAY;AAGhD,UAAI,IAAI,UAAU;AAAK;AAGvB,UAAI,IAAI,YAAY,aAAa,IAAI,MAAM,SAAS,WAAW;AAAG,oBAAY,OAAO;AACrF,UAAI,IAAI,YAAY,aAAa,IAAI,YAAY,sBAAsB,IAAI,MAAM,SAAS,UAAU,GAAG;AACtG,oBAAY,MAAM;AAAA,MACnB;AACA,UAAI,IAAI,YAAY;AAAe,oBAAY,OAAO;AACtD,UAAI,IAAI,YAAY,kBAAkB,IAAI,MAAM,SAAS,WAAW,KAAK,IAAI,MAAM,SAAS,iBAAiB,GAAG;AAC/G,oBAAY,OAAO;AAAA,MACpB;AACA,UAAI,IAAI,MAAM,SAAS,QAAQ,KAAK,IAAI,MAAM,SAAS,eAAe,GAAG;AACxE,oBAAY,UAAU,YAAY,UAAU,KAAK;AAAA,MAClD;AACA,UAAI,IAAI,MAAM,SAAS,aAAa,KAAK,IAAI,YAAY;AAAgB,oBAAY,cAAc;AACnG,UAAI,IAAI,MAAM,SAAS,aAAa,KAAK,IAAI,MAAM,SAAS,UAAU;AAAG,oBAAY,cAAc;AACnG,UAAI,IAAI,MAAM,SAAS,WAAW;AAAG,oBAAY,YAAY;AAC7D,UAAI,IAAI,MAAM,SAAS,OAAO;AAAG,oBAAY,QAAQ;AACrD,UAAI,IAAI,MAAM,SAAS,WAAW,KAAK,IAAI,MAAM,SAAS,YAAY;AAAG,oBAAY,YAAY;AACjG,UAAI,IAAI,MAAM,SAAS,YAAY,KAAM,IAAI,MAAM,SAAS,SAAS,KAAK,IAAI,MAAM,SAAS,aAAa,GAAI;AAC7G,oBAAY,UAAU;AAAA,MACvB;AACA,UAAI,IAAI,SAAS,qBAAqB,QAAQ,gBAAgB,aAAa,QAAQ,gBAAgB,aAAa;AAC/G,oBAAY,YAAY;AAAA,MACzB;AAAA,IACD;AACA,QAAI,QAAQ,SAAS,KAAK,eAAe,QAAQ,SAAS,IAAI;AAC7D,YAAM,IAAI,MAAM,qCAAqC,KAAK,gBAAgB,OAAO;AAAA,IAClF;AAEA,WAAO;AAAA,EACR;AAAA,EAEA,eAA6C;AAC5C,SAAK,oCAAoC;AAEzC,UAAM,MAAM,KAAK;AACjB,UAAM,OAAO,CAAC;AAEd,UAAM,UAAU,KAAK,IAAI,QAAQ,IAAI;AACrC,UAAM,QAAQ,KAAK,IAAI,MAAM,IAAI;AAEjC,UAAM,UAAU,KAAK,eAAe,KAAK,aAAa,KAAK,eAAe,QAAW,QAAW,IAAI;AAEpG,aAAS,SAAS,SAAS;AAC1B,UAAI,UAAU,IAAI,QAAQ,IAAI,KAAK;AACnC,UAAI,QAAQ;AAAe,kBAAU,IAAI,QAAQ,IAAI,QAAQ,WAAW;AAGxE,UAAI,OAAO;AACX,UAAI;AACJ,UAAI;AACJ,UAAI,KAAK,OAAO,GAAG;AAClB,WAAG;AACF,iBAAO,KAAK,OAAO,KAAK,EAAE;AAC1B,0BAAgB,KAAK,IAAI,MAAM,IAAI,IAAI,EAAE,MAAM,KAAK,OAAO,KAAK,IAAI,MAAM,IAAI,IAAI,EAAE;AACpF,sBAAY,KAAK,WAAW,IAAI,KAAK,KAAK,IAAI,MAAM,IAAI,IAAI,EAAE;AAAA,QAC/D,SAAS,iBAAkB,aAAa,KAAK,aAAa,IAAI,EAAE;AAAA,MACjE;AAGA,UAAI,QAAQ,YAAY;AACvB,YAAI,OAAO,QAAQ,eAAe,UAAU;AAC3C,oBAAU,IAAI,QAAQ,IAAI,QAAQ,UAAU;AAAA,QAC7C,OAAO;AACN,oBAAU,IAAI,QAAQ,IAAI,KAAK,OAAO,QAAQ,UAAU,CAAC;AAAA,QAC1D;AACA,gBAAQ,QAAQ;AAAA,MACjB,WAAW,QAAQ,iBAAiB,CAAC,QAAQ,cAAc,KAAK,aAAO,iBAAK,GAAG,MAAM,IAAI,GAAG;AAC3F,YAAI,CAAC,QAAQ;AAAa,gBAAM,IAAI,MAAM,GAAG,QAAQ,gCAAgC;AACrF,kBAAU,IAAI,QAAQ,IAAI,QAAQ,WAAW;AAC7C,gBAAQ,QAAQ;AAAA,MACjB;AAGA,UAAI,WAAW,KAAK,IAAI,MAAM,IAAI,IAAI;AACtC,UAAI,SAAS,eAAe,UAAU,KAAK,IAAI,QAAQ,IAAI,SAAS,WAAW,EAAE,aAAa;AAC7F,WAAG;AACF,qBAAW,KAAK,OAAO,KAAK;AAC5B,iBAAO,SAAS;AAAA,QACjB,SACC,SAAS,MAAM,KAAK,OACpB,SAAS,iBACR,SAAS,eAAe,UAAU,KAAK,IAAI,QAAQ,IAAI,SAAS,WAAW,EAAE;AAAA,MAEhF;AAGA,YAAM,YAAY,OAAO,OAAO,QAAQ,SAAS,EAAE,OAAO,OAAK,KAAK,IAAI,UAAU,IAAI,CAAC,EAAE,OAAO,KAAK,GAAG;AACxG,YAAM,UAAkB,KAAK,OAAO,IAAI,eAAe,KAAK,OAAO,SAAS;AAG5E,UAAI,OAAO,CAAC,UAAU;AACtB,UAAI,UAAU,YAAY;AACzB,eAAO,KAAK,IAAI,MAAM,IAAI,EACxB,OAAO,UAAQ,EAAE,KAAK,iBAAiB,KAAK,OAAO,KAAK,SAAS,KAAK,SAAS,EAC/E,IAAI,OAAK,EAAE,EAAE;AAAA,MAChB,OAAO;AACN,eAAO,CAAC,GAAG,KAAK,IAAI,QAAQ,YAAY,QAAQ,EAAE,CAAC;AAAA,MACpD;AAEA,YAAM,QAAQ,KAAK,yBAAyB,MAAM,KAAK,YAAY;AAGnE,YAAM,MAAkB,EAAC,IAAI,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,EAAC;AACtE,YAAM,IAAc,CAAC,MAAM,OAAO,OAAO,OAAO,OAAO,KAAK;AAC5D,UAAI,SAAS;AACb,SAAG;AACF,cAAM,IAAI,KAAK,OAAO,CAAC;AACvB,cAAM,IAAI,KAAK,OAAO,KAAK,IAAI,MAAM,IAAI,CAAC,GAAG,SAAS,CAAC,CAAC;AACxD,YAAI,CAAC,KAAK;AACV,kBAAU;AAAA,MACX,SAAS,SAAS;AAGlB,YAAM,MAAM;AAAA,QACX,IAAI,KAAK,OAAO,EAAE;AAAA,QAClB,KAAK,KAAK,OAAO,EAAE;AAAA,QACnB,KAAK,KAAK,OAAO,EAAE;AAAA,QACnB,KAAK,KAAK,OAAO,EAAE;AAAA,QACnB,KAAK,KAAK,OAAO,EAAE;AAAA,QACnB,KAAK,KAAK,OAAO,EAAE;AAAA,MACpB;AAGA,YAAM,SAAS,KAAK,OAAO,OAAO,EAAE;AAGpC,YAAM,UAAU;AAEhB,UAAI,QAAQ,QAAQ;AAEpB,UAAI,QAAQ,gBAAgB;AAAc,gBAAQ,eAAI,QAAQ,IAAI,kBAAkB,EAAE;AAEtF,UAAI,QAAQ,gBAAgB;AAAa,gBAAQ,eAAI,QAAQ,IAAI,mBAAmB,EAAE;AAGtF,UAAI,OAAQ,MAAM,IAAI,IAAI,IAAI,KAAK,KAAK,MAAO;AAC/C,cAAS,MAAM,KAAK,IAAI,IAAI,KAAK,KAAK,MAAO;AAC7C,cAAS,MAAM,KAAK,IAAI,IAAI,KAAK,KAAK,MAAO;AAC7C,cAAS,MAAM,KAAK,IAAI,IAAI,KAAK,KAAK,MAAO;AAC7C,cAAS,MAAM,KAAK,IAAI,IAAI,KAAK,KAAK,MAAO;AAC7C,cAAS,MAAM,KAAK,IAAI,IAAI,KAAK,KAAK,MAAO;AAE7C,UAAI;AACJ,UAAI,KAAK,aAAa;AACrB,gBAAQ,KAAK;AAAA,MACd,OAAO;AACN,gBAAQ,KAAK,MAAM,MAAM,UAAU,IAAI;AAEvC,eAAO,QAAQ,KAAK;AACnB,iBAAO,KAAK,OAAO,MAAM,IAAI,IAAI,IAAI,KAAK,KAAK,OAAO,QAAQ,MAAM,EAAE;AAEtE,kBAAQ,KAAK,QAAQ,MAAM,KAAK,IAAI,IAAI,KAAK,KAAK,OAAO,QAAQ,MAAM,KAAK,QAAQ,GAAG;AACvF,kBAAQ,KAAK,OAAO,MAAM,KAAK,IAAI,IAAI,KAAK,KAAK,OAAO,QAAQ,MAAM,CAAC;AACvE,kBAAQ,KAAK,QAAQ,MAAM,KAAK,IAAI,IAAI,KAAK,KAAK,OAAO,QAAQ,MAAM,KAAK,QAAQ,GAAG;AACvF,kBAAQ,KAAK,OAAO,MAAM,KAAK,IAAI,IAAI,KAAK,KAAK,OAAO,QAAQ,MAAM,CAAC;AACvE,kBAAQ,KAAK,OAAO,MAAM,KAAK,IAAI,IAAI,KAAK,KAAK,OAAO,QAAQ,MAAM,CAAC;AAEvE,cAAI,QAAQ;AAAS;AACrB;AAAA,QACD;AAAA,MACD;AAGA,YAAM,YAAY,KAAK,OAAO,GAAG;AAGjC,YAAM,QAAQ,KAAK,aAAa,GAAG,IAAI;AAEvC,YAAM,MAAkC;AAAA,QACvC,MAAM,QAAQ;AAAA,QACd,SAAS,QAAQ;AAAA,QACjB,QAAQ,QAAQ;AAAA,QAChB;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACD;AACA,UAAI,KAAK,QAAQ,GAAG;AAEnB,YAAI,KAAK,eAAe;AACvB,cAAI,WAAW,KAAK;AAAA,QACrB,OAAO;AACN,cAAI,WAAW,KAAK,OAAO,KAAK,IAAI,MAAM,IAAI,CAAC,EAAE;AAAA,QAClD;AAAA,MACD;AACA,WAAK,KAAK,GAAG;AAAA,IACd;AAEA,WAAO;AAAA,EACR;AAAA,EAEA,eAAe,GAAW,cAAuB,cAAuB,WAAuB,eAAe,OAAO;AAIpH,QAAI,gBAAgB,CAAC,KAAK,IAAI,MAAM,IAAI,YAAY,EAAE,QAAQ;AAC7D,YAAM,IAAI,MAAM,IAAI,oCAAoC;AAAA,IACzD;AAEA,UAAM,cAAc,CAAC;AAErB,UAAM,OAAiB,CAAC;AACxB,QAAI,cAAyB,CAAC;AAC9B,QAAI,aAAa;AAChB,oBAAc,CAAC,GAAG,KAAK,IAAI,QAAQ,IAAI,CAAC;AACxC,iBAAW,WAAW,aAAa;AAClC,YAAI,QAAQ,iBAAiB,QAAQ,kBAAkB;AAAgB;AACvE,YAAI,cAAc;AACjB,gBAAM,uBAAuB,KAAK,IAAI,QAAQ,YAAY,QAAQ,EAAE,EAAE;AACtE,cAAI,CAAC;AAAsB;AAAA,QAC5B;AACA,YAAI,gBAAgB,CAAC,QAAQ,MAAM,SAAS,YAAY;AAAG;AAC3D,YAAI,gBAAgB,QAAQ,MAAM;AAAc;AAChD,cAAM,MAAM,QAAQ;AACpB,YAAI,OAAO,KAAK,KAAK,SAAS,GAAG;AAAG;AACpC,aAAK,KAAK,GAAG;AAAA,MACd;AAAA,IACD,OAAO;AACN,YAAM,gBAAgB,CAAC,QAAQ,UAAU,QAAQ,gBAAgB,OAAO,UAAU,aAAa;AAC/F,YAAM,uBAAuB,UAAU,MAAM,aAAa;AAE1D,iBAAW,WAAW,KAAK,IAAI,QAAQ,IAAI,GAAG;AAC7C,YAAI,gBAAgB,CAAC,QAAQ,MAAM,SAAS,YAAY;AAAG;AAE3D,YAAI,YAAY,UAAU,MAAM,aAAa,QAAQ,EAAE;AACvD,YAAI;AAAW;AACf,YAAI,cAAc,IAAI;AACrB,cAAI,QAAQ,UAAU,UAAU,MAAM,iBAAiB;AAAG;AAE1D,sBAAY,UAAU,MAAM,qBAAiB,iBAAK,QAAQ,WAAW,CAAC;AACtE,cAAI;AAAW;AACf,cAAI,cAAc,MAAM,KAAK,IAAI,QAAQ,IAAI,QAAQ,WAAW,EAAE,kBAAkB,QAAQ,eAAe;AAC1G,kBAAM,mBAAmB,iBAAK,YAAY,cAAe,OAAO,KAAK;AACrE,gBAAI,iBAAiB;AACrB,gBAAI,iBAAiB;AACrB,uBAAW,UAAU,UAAU,UAAU;AACxC,kBAAI,OAAO,WAAW,GAAG;AAAG;AAC5B,oBAAM,QAAQ,OAAO,MAAM,EAAE;AAC7B,oBAAM,MAAM,iBAAK,KAAK;AACtB,mBAAK,IAAI,iBAAiB,IAAI,eAAgB,OAAO,GAAG;AACvD,sBAAM,eAAe,cAAc,SAAS,KAAK;AACjD,oBAAI,OAAO,WAAW,GAAG,GAAG;AAC3B,sBAAI,CAAC,gBAAgB;AAAkB;AACvC,mCAAiB;AACjB;AAAA,gBACD;AACA,iCAAiB;AACjB;AAAA,cACD;AAAA,YACD;AACA,gBAAI;AAAgB;AACpB,gBAAI,CAAC,gBAAgB;AACpB,kBAAI,UAAU,MAAM,uBAAuB;AAAG;AAAA,YAC/C;AAAA,UACD;AAAA,QACD;AACA,oBAAY,KAAK,OAAO;AACxB,cAAM,MAAM,QAAQ;AACpB,YAAI,KAAK,SAAS,GAAG;AAAG;AACxB,aAAK,KAAK,GAAG;AAAA,MACd;AAAA,IACD;AAEA,UAAM,eAAsC,CAAC;AAC7C,aAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AAC3B,YAAM,MAAM,KAAK,gBAAgB,IAAI;AACrC,mBAAa,GAAG,IAAI;AAAA,IACrB;AAEA,UAAM,SAAqB,CAAC;AAC5B,eAAW,WAAW,aAAa;AAClC,UAAI,EAAE,QAAQ,OAAO;AAAe;AACpC,UAAI,gBAAgB,QAAQ,MAAM,KAAK,OACrC,QAAQ,iBAAiB,QAAQ,kBAAkB;AAAkB;AACvE,UAAI,gBAAgB,CAAC,QAAQ,MAAM,SAAS,YAAY;AAAG;AAC3D,UAAI,CAAC,OAAO,aAAa,QAAQ,GAAG,CAAC;AAAG,eAAO,aAAa,QAAQ,GAAG,CAAC,IAAI,CAAC;AAC7E,aAAO,aAAa,QAAQ,GAAG,CAAC,EAAE,KAAK,QAAQ,IAAI;AAAA,IACpD;AAEA,QAAI,OAAO,SAAS,GAAG;AACtB,YAAM,IAAI,MAAM,qEAAqE,OAAO,YAAY,KAAK;AAAA,IAC9G;AAEA,UAAM,WAAW,CAAC;AAClB,aAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AAC3B,UAAI,CAAC,OAAO,CAAC,EAAE,QAAQ;AACtB,cAAM,IAAI,MAAM,uBAAuB,KAAK,QAAQ,KAAK,UAAU,MAAM,aAAa,KAAK,UAAU,YAAY,GAAG;AAAA,MACrH;AACA,eAAS,KAAK,KAAK,OAAO,OAAO,CAAC,CAAC,CAAC;AAAA,IACrC;AACA,WAAO;AAAA,EACR;AAAA,EAEA,eAA6B;AAC5B,UAAM,gBAAgB,KAAK,8BAA8B;AACzD,UAAM,YAAY,KAAK,IAAI,QAAQ,aAAa,KAAK,MAAM;AAC3D,UAAM,oBAAoB,iBAAiB,UAAU,MAAM,aAAa;AACxE,UAAM,0BAA0B,iBAAkB,sBAAsB;AAExE,QAAI,eAAe;AAClB,WAAK,2BAA2B;AAAA,IACjC;AAGA,UAAM,eAAe,KAAK,MAAM;AAChC,QAAI,WAAmB,CAAC;AACxB,QAAI,cAAc;AACjB,UAAI,CAAC,eAAe;AACnB,mBAAW,CAAC,GAAG,KAAK,IAAI,MAAM,IAAI,CAAC,EAAE,OAAO,UAAS,KAAK,OAAO,KAAK,OAAO,CAAC,KAAK,aAAc;AAAA,MAClG,OAAO;AACN,cAAM,iBAAiB,UAAU,MAAM,qBAAqB;AAC5D,mBAAW,QAAQ,KAAK,IAAI,MAAM,IAAI,GAAG;AACxC,cAAI,YAAY,UAAU,MAAM,UAAU,KAAK,EAAE;AACjD,cAAI;AAAW;AACf,cAAI,cAAc,MAAM,KAAK,IAAI;AAChC,gBAAI;AAAgB;AACpB,gBAAI,KAAK,eAAe;AACvB,0BAAY,UAAU,MAAM,oBAAgB,iBAAK,KAAK,aAAa,CAAC;AACpE,kBAAI;AAAW;AACf,kBAAI,cAAc,MAAM,KAAK,kBAAkB,gBAAgB;AAC9D,oBAAI;AAAmB;AACvB,oBAAI,CAAC;AAAyB;AAAA,cAC/B;AAAA,YACD;AAAA,UACD;AACA,mBAAS,KAAK,IAAI;AAAA,QACnB;AACA,YAAI,UAAU,MAAM,aAAa,GAAG;AACnC,eAAK,mCAAmC,QAAQ,UAAU,KAAK,aAAa,eAAe;AAAA,QAC5F;AAAA,MACD;AAAA,IACD;AAGA,UAAM,mBAAoB,KAAK,MAAM,KAAO,KAAK,IAAI,eAAe;AACpE,QAAI,cAAyB,CAAC;AAC9B,QAAI,kBAAkB;AACrB,UAAI,CAAC,eAAe;AACnB,sBAAc,CAAC,GAAG,KAAK,IAAI,UAAU,IAAI,CAAC,EAAE,OAAO,aAAY,QAAQ,OAAO,KAAK,OAAO,CAAC,QAAQ,aAAc;AAAA,MAClH,OAAO;AACN,cAAM,qBAAqB,UAAU,MAAM,yBAAyB;AACpE,mBAAW,WAAW,KAAK,IAAI,UAAU,IAAI,GAAG;AAC/C,cAAI,YAAY,UAAU,MAAM,aAAa,QAAQ,EAAE;AACvD,cAAI;AAAW;AACf,cAAI,cAAc,IAAI;AACrB,gBAAI;AAAoB;AACxB,gBAAI,QAAQ,eAAe;AAC1B,0BAAY,UAAU,MAAM,oBAAgB,iBAAK,QAAQ,aAAa,CAAC;AACvE,kBAAI;AAAW;AACf,kBAAI,cAAc,IAAI;AACrB,oBAAI;AAAmB;AACvB,oBAAI,CAAC;AAAyB;AAAA,cAC/B;AAAA,YACD;AAAA,UACD;AACA,sBAAY,KAAK,OAAO;AAAA,QACzB;AACA,YAAI,UAAU,MAAM,mBAAmB,GAAG;AACzC,eAAK,mCAAmC,WAAW,aAAa,KAAK,aAAa,eAAe;AAAA,QAClG;AAAA,MACD;AAAA,IACD;AAGA,UAAM,eAAe,UAAU;AAC/B,QAAI,WAAmB,CAAC;AACxB,QAAI,CAAC,eAAe;AACnB,iBAAW,CAAC,GAAG,KAAK,IAAI,MAAM,IAAI,CAAC,EAAE,OAAO,UAC1C,KAAK,OAAO,KAAK,OAAO,CAAC,KAAK,aAAc;AAAA,IAC/C,OAAO;AACN,YAAM,iBAAiB,UAAU,MAAM,qBAAqB;AAC5D,iBAAW,QAAQ,KAAK,IAAI,MAAM,IAAI,GAAG;AACxC,YAAI,YAAY,UAAU,MAAM,UAAU,KAAK,EAAE;AACjD,YAAI;AAAW;AACf,YAAI,cAAc,IAAI;AACrB,cAAI;AAAgB;AACpB,cAAI,KAAK,eAAe;AACvB,wBAAY,UAAU,MAAM,oBAAgB,iBAAK,KAAK,aAAa,CAAC;AACpE,gBAAI;AAAW;AACf,gBAAI,cAAc,MAAM,KAAK,kBAAkB,gBAAgB;AAC9D,kBAAI;AAAmB;AACvB,kBAAI,CAAC;AAAyB;AAAA,YAC/B;AAAA,UACD;AAAA,QACD;AACA,iBAAS,KAAK,IAAI;AAAA,MACnB;AACA,WAAK,mCAAmC,QAAQ,UAAU,KAAK,cAAc,cAAc,gCAAgC;AAAA,IAC5H;AAGA,UAAM,iBAAiB,KAAK,MAAM;AAClC,QAAI,aAAuB,CAAC;AAC5B,QAAI,gBAAgB;AACnB,UAAI,CAAC,eAAe;AACnB,qBAAa,CAAC,GAAG,KAAK,IAAI,QAAQ,IAAI,CAAC;AAAA,MACxC,OAAO;AACN,cAAM,mBAAmB,UAAU,MAAM,uBAAuB;AAChE,mBAAW,UAAU,KAAK,IAAI,QAAQ,IAAI,GAAG;AAC5C,cAAI,YAAY,UAAU,MAAM,YAAY,OAAO,EAAE;AACrD,cAAI;AAAW;AACf,cAAI,cAAc,MAAM,OAAO,IAAI;AAClC,gBAAI;AAAkB;AACtB,gBAAI,OAAO,eAAe;AACzB,0BAAY,UAAU,MAAM,oBAAgB,iBAAK,OAAO,aAAa,CAAC;AACtE,kBAAI;AAAW;AACf,kBAAI,cAAc,MAAM,OAAO,kBAAkB,gBAAgB;AAChE,oBAAI;AAAmB;AACvB,oBAAI,CAAC;AAAyB;AAAA,cAC/B;AAAA,YACD;AAAA,UACD;AACA,qBAAW,KAAK,MAAM;AAAA,QACvB;AAAA,MAED;AAAA,IACD;AAEA,UAAM,UAAU,KAAK;AAAA,MAAe,KAAK;AAAA,MAAa,KAAK;AAAA,MAAe;AAAA,MACzE,gBAAgB,YAAY;AAAA,IAAS;AAEtC,UAAM,OAAO,CAAC;AACd,eAAW,SAAS,SAAS;AAE5B,YAAM,UAAU,KAAK,IAAI,QAAQ,IAAI,KAAK;AAG1C,UAAI,OAAO;AACX,UAAI;AACJ,UAAI;AACJ,UAAI,cAAc;AAEjB,WAAG;AACF,qBAAW,KAAK,gBAAgB,QAAQ;AACxC,iBAAO,UAAU;AACjB,sBAAY,KAAK,WAAW,IAAI,KAAK,SAAS;AAAA,QAC/C,SAAS,aAAa,KAAK,aAAa,IAAI,EAAE,KAAK,SAAS,SAAS,KAAK;AAAA,MAC3E;AAGA,UAAI,UAAU;AACd,UAAI;AACJ,UAAI,kBAAkB;AACrB,sBAAc,KAAK,gBAAgB,WAAW;AAC9C,kBAAU,aAAa;AAAA,MACxB;AAGA,YAAM,IAAI,CAAC;AACX,SAAG;AACF,cAAM,OAAO,KAAK,gBAAgB,QAAQ;AAC1C,UAAE,KAAK,KAAK,EAAE;AAAA,MACf,SAAS,EAAE,SAAS;AAGpB,YAAM,MAAM,EAAC,IAAI,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,EAAC;AAC1D,UAAI,KAAK,QAAQ,GAAG;AACnB,YAAI,SAAS;AACb,WAAG;AACF,gBAAM,IAAI,KAAK,OAAO,eAAI,MAAM,IAAI,CAAC;AACrC,gBAAM,IAAI,KAAK,OAAO,KAAK,IAAI,MAAM,IAAI,CAAC,GAAG,SAAS,CAAC,CAAC;AACxD,cAAI,CAAC,KAAK;AACV,oBAAU;AAAA,QACX,SAAS,SAAS;AAAA,MACnB,OAAO;AACN,mBAAW,KAAK,eAAI,MAAM,IAAI,GAAG;AAChC,cAAI,CAAC,IAAI,KAAK,OAAO,GAAG;AAAA,QACzB;AAAA,MACD;AAGA,YAAM,MAAkB;AAAA,QACvB,IAAI,KAAK,OAAO,EAAE;AAAA,QAClB,KAAK,KAAK,OAAO,EAAE;AAAA,QACnB,KAAK,KAAK,OAAO,EAAE;AAAA,QACnB,KAAK,KAAK,OAAO,EAAE;AAAA,QACnB,KAAK,KAAK,OAAO,EAAE;AAAA,QACnB,KAAK,KAAK,OAAO,EAAE;AAAA,MACpB;AAGA,UAAI,SAAS;AACb,UAAI,kBAAmB,WAAW,SAAS,GAAI;AAC9C,iBAAS,KAAK,OAAO,UAAU,EAAE;AAAA,MAClC;AAGA,YAAM,UAAU;AAChB,YAAM,QAAQ,QAAQ;AACtB,UAAI,OAAQ,MAAM,IAAI,IAAI,IAAI,KAAK,KAAK,MAAO;AAC/C,cAAS,MAAM,KAAK,IAAI,IAAI,KAAK,KAAK,MAAO;AAC7C,cAAS,MAAM,KAAK,IAAI,IAAI,KAAK,KAAK,MAAO;AAC7C,cAAS,MAAM,KAAK,IAAI,IAAI,KAAK,KAAK,MAAO;AAC7C,cAAS,MAAM,KAAK,IAAI,IAAI,KAAK,KAAK,MAAO;AAC7C,cAAS,MAAM,KAAK,IAAI,IAAI,KAAK,KAAK,MAAO;AAE7C,UAAI;AACJ,UAAI,KAAK,aAAa;AACrB,gBAAQ,KAAK;AAAA,MACd,OAAO;AACN,gBAAQ,KAAK,MAAM,MAAM,UAAU,IAAI;AACvC,eAAO,QAAQ,KAAK;AACnB,iBAAO,KAAK,OAAO,MAAM,IAAI,IAAI,IAAI,KAAK,KAAK,OAAO,QAAQ,MAAM,EAAE;AACtE,kBAAQ,KAAK,QAAQ,MAAM,KAAK,IAAI,IAAI,KAAK,KAAK,OAAO,QAAQ,MAAM,KAAK,QAAQ,GAAG;AACvF,kBAAQ,KAAK,OAAO,MAAM,KAAK,IAAI,IAAI,KAAK,KAAK,OAAO,QAAQ,MAAM,CAAC;AACvE,kBAAQ,KAAK,QAAQ,MAAM,KAAK,IAAI,IAAI,KAAK,KAAK,OAAO,QAAQ,MAAM,KAAK,QAAQ,GAAG;AACvF,kBAAQ,KAAK,OAAO,MAAM,KAAK,IAAI,IAAI,KAAK,KAAK,OAAO,QAAQ,MAAM,CAAC;AACvE,kBAAQ,KAAK,OAAO,MAAM,KAAK,IAAI,IAAI,KAAK,KAAK,OAAO,QAAQ,MAAM,CAAC;AACvE,cAAI,QAAQ;AAAS;AACrB;AAAA,QACD;AAAA,MACD;AAGA,YAAM,YAAY,KAAK,OAAO,GAAG;AAGjC,YAAM,QAAQ,KAAK,aAAa,GAAG,IAAI;AAEvC,YAAM,MAAkB;AAAA,QACvB,MAAM,QAAQ;AAAA,QACd,SAAS,QAAQ;AAAA,QACjB,QAAQ,QAAQ;AAAA,QAChB;AAAA,QACA;AAAA,QACA,OAAO;AAAA,QACP;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACD;AACA,UAAI,KAAK,QAAQ,GAAG;AAEnB,YAAI,KAAK,eAAe;AACvB,cAAI,WAAW,KAAK;AAAA,QACrB,OAAO;AACN,cAAI,WAAW,KAAK,OAAO,KAAK,IAAI,MAAM,IAAI,CAAC,EAAE;AAAA,QAClD;AAAA,MACD;AACA,WAAK,KAAK,GAAG;AAAA,IACd;AAEA,WAAO;AAAA,EACR;AACD;AAEA,IAAO,uBAAQ;",
  "names": ["moveid", "set"]
}
