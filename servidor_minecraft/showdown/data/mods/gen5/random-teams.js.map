{
  "version": 3,
  "sources": ["../../../../../data/mods/gen5/random-teams.ts"],
  "sourcesContent": ["import RandomGen6Teams from '../gen6/random-teams';\r\nimport {Utils} from '../../../lib';\r\nimport {toID} from '../../../sim/dex';\r\nimport {PRNG} from '../../../sim';\r\nimport {MoveCounter} from '../gen8/random-teams';\r\n\r\n// Moves that restore HP:\r\nconst RECOVERY_MOVES = [\r\n\t'healorder', 'milkdrink', 'moonlight', 'morningsun', 'recover', 'roost', 'slackoff', 'softboiled', 'synthesis',\r\n];\r\n// Moves that boost Attack:\r\nconst PHYSICAL_SETUP = [\r\n\t'bellydrum', 'bulkup', 'coil', 'curse', 'dragondance', 'honeclaws', 'howl', 'meditate', 'screech', 'swordsdance',\r\n];\r\n// Some moves that only boost Speed:\r\nconst SPEED_SETUP = [\r\n\t'agility', 'autotomize', 'flamecharge', 'rockpolish',\r\n];\r\n// Conglomerate for ease of access\r\nconst SETUP = [\r\n\t'acidarmor', 'agility', 'autotomize', 'bellydrum', 'bulkup', 'calmmind', 'coil', 'curse', 'dragondance', 'flamecharge',\r\n\t'growth', 'honeclaws', 'howl', 'irondefense', 'meditate', 'nastyplot', 'quiverdance', 'raindance', 'rockpolish',\r\n\t'shellsmash', 'shiftgear', 'sunnyday', 'swordsdance', 'tailglow', 'workup',\r\n];\r\n// Moves that shouldn't be the only STAB moves:\r\nconst NO_STAB = [\r\n\t'aquajet', 'bulletpunch', 'chatter', 'clearsmog', 'dragontail', 'eruption', 'explosion', 'fakeout', 'flamecharge',\r\n\t'futuresight', 'iceshard', 'icywind', 'incinerate', 'knockoff', 'machpunch', 'pluck', 'pursuit', 'quickattack',\r\n\t'rapidspin', 'reversal', 'selfdestruct', 'shadowsneak', 'skyattack', 'skydrop', 'snarl', 'suckerpunch',\r\n\t'uturn', 'vacuumwave', 'voltswitch', 'waterspout',\r\n];\r\n// Hazard-setting moves\r\nconst HAZARDS = [\r\n\t'spikes', 'stealthrock', 'toxicspikes',\r\n];\r\n// Moves that switch the user out\r\nconst PIVOT_MOVES = [\r\n\t'uturn', 'voltswitch',\r\n];\r\n\r\n// Moves that should be paired together when possible\r\nconst MOVE_PAIRS = [\r\n\t['lightscreen', 'reflect'],\r\n\t['sleeptalk', 'rest'],\r\n\t['protect', 'wish'],\r\n\t['leechseed', 'substitute'],\r\n];\r\n\r\n/** Pokemon who always want priority STAB, and are fine with it as its only STAB move of that type */\r\nconst PRIORITY_POKEMON = [\r\n\t'bisharp', 'breloom', 'cacturne', 'dusknoir', 'honchkrow', 'scizor', 'shedinja', 'shiftry',\r\n];\r\n\r\nexport class RandomGen5Teams extends RandomGen6Teams {\r\n\trandomSets: {[species: string]: RandomTeamsTypes.RandomSpeciesData} = require('./random-sets.json');\r\n\r\n\tconstructor(format: string | Format, prng: PRNG | PRNGSeed | null) {\r\n\t\tsuper(format, prng);\r\n\t\tthis.noStab = NO_STAB;\r\n\t\tthis.priorityPokemon = PRIORITY_POKEMON;\r\n\r\n\t\tthis.moveEnforcementCheckers = {\r\n\t\t\tBug: (movePool, moves, abilities, types, counter) => (\r\n\t\t\t\t!counter.get('Bug') && (movePool.includes('megahorn') || abilities.has('Tinted Lens'))\r\n\t\t\t),\r\n\t\t\tDark: (movePool, moves, abilities, types, counter) => !counter.get('Dark'),\r\n\t\t\tDragon: (movePool, moves, abilities, types, counter) => !counter.get('Dragon'),\r\n\t\t\tElectric: (movePool, moves, abilities, types, counter) => !counter.get('Electric'),\r\n\t\t\tFighting: (movePool, moves, abilities, types, counter) => !counter.get('Fighting'),\r\n\t\t\tFire: (movePool, moves, abilities, types, counter) => !counter.get('Fire'),\r\n\t\t\tFlying: (movePool, moves, abilities, types, counter, species) => (\r\n\t\t\t\t!counter.get('Flying') && !['mantine', 'murkrow'].includes(species.id) &&\r\n\t\t\t\t!movePool.includes('hiddenpowerflying')\r\n\t\t\t),\r\n\t\t\tGhost: (movePool, moves, abilities, types, counter) => !counter.get('Ghost'),\r\n\t\t\tGrass: (movePool, moves, abilities, types, counter, species) => (\r\n\t\t\t\t!counter.get('Grass') && (species.baseStats.atk >= 100 || movePool.includes('leafstorm'))\r\n\t\t\t),\r\n\t\t\tGround: (movePool, moves, abilities, types, counter) => !counter.get('Ground'),\r\n\t\t\tIce: (movePool, moves, abilities, types, counter) => !counter.get('Ice'),\r\n\t\t\tPoison: (movePool, moves, abilities, types, counter) => (\r\n\t\t\t\t!counter.get('Poison') && (types.has('Grass') || types.has('Ground'))\r\n\t\t\t),\r\n\t\t\tPsychic: (movePool, moves, abilities, types, counter) => (\r\n\t\t\t\t!counter.get('Psychic') && (types.has('Fighting') || movePool.includes('calmmind'))\r\n\t\t\t),\r\n\t\t\tRock: (movePool, moves, abilities, types, counter, species) => (\r\n\t\t\t\t!counter.get('Rock') && (species.baseStats.atk >= 95 || abilities.has('Rock Head'))\r\n\t\t\t),\r\n\t\t\tSteel: (movePool, moves, abilities, types, counter, species) => (\r\n\t\t\t\t!counter.get('Steel') && ['aggron', 'metagross'].includes(species.id)\r\n\t\t\t),\r\n\t\t\tWater: (movePool, moves, abilities, types, counter) => !counter.get('Water'),\r\n\t\t};\r\n\t}\r\n\r\n\tcullMovePool(\r\n\t\ttypes: string[],\r\n\t\tmoves: Set<string>,\r\n\t\tabilities: Set<string>,\r\n\t\tcounter: MoveCounter,\r\n\t\tmovePool: string[],\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species,\r\n\t\tisLead: boolean,\r\n\t\tpreferredType: string,\r\n\t\trole: RandomTeamsTypes.Role,\r\n\t): void {\r\n\t\t// Pokemon cannot have multiple Hidden Powers in any circumstance\r\n\t\tlet hasHiddenPower = false;\r\n\t\tfor (const move of moves) {\r\n\t\t\tif (move.startsWith('hiddenpower')) hasHiddenPower = true;\r\n\t\t}\r\n\t\tif (hasHiddenPower) {\r\n\t\t\tlet movePoolHasHiddenPower = true;\r\n\t\t\twhile (movePoolHasHiddenPower) {\r\n\t\t\t\tmovePoolHasHiddenPower = false;\r\n\t\t\t\tfor (const moveid of movePool) {\r\n\t\t\t\t\tif (moveid.startsWith('hiddenpower')) {\r\n\t\t\t\t\t\tthis.fastPop(movePool, movePool.indexOf(moveid));\r\n\t\t\t\t\t\tmovePoolHasHiddenPower = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\r\n\t\t// If we have two unfilled moves and only one unpaired move, cull the unpaired move.\r\n\t\tif (moves.size === this.maxMoveCount - 2) {\r\n\t\t\tconst unpairedMoves = [...movePool];\r\n\t\t\tfor (const pair of MOVE_PAIRS) {\r\n\t\t\t\tif (movePool.includes(pair[0]) && movePool.includes(pair[1])) {\r\n\t\t\t\t\tthis.fastPop(unpairedMoves, unpairedMoves.indexOf(pair[0]));\r\n\t\t\t\t\tthis.fastPop(unpairedMoves, unpairedMoves.indexOf(pair[1]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (unpairedMoves.length === 1) {\r\n\t\t\t\tthis.fastPop(movePool, movePool.indexOf(unpairedMoves[0]));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// These moves are paired, and shouldn't appear if there is not room for them both.\r\n\t\tif (moves.size === this.maxMoveCount - 1) {\r\n\t\t\tfor (const pair of MOVE_PAIRS) {\r\n\t\t\t\tif (movePool.includes(pair[0]) && movePool.includes(pair[1])) {\r\n\t\t\t\t\tthis.fastPop(movePool, movePool.indexOf(pair[0]));\r\n\t\t\t\t\tthis.fastPop(movePool, movePool.indexOf(pair[1]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Team-based move culls\r\n\t\tif (teamDetails.screens && movePool.length >= this.maxMoveCount + 2) {\r\n\t\t\tif (movePool.includes('reflect')) this.fastPop(movePool, movePool.indexOf('reflect'));\r\n\t\t\tif (movePool.includes('lightscreen')) this.fastPop(movePool, movePool.indexOf('lightscreen'));\r\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\r\n\t\t}\r\n\t\tif (teamDetails.stealthRock) {\r\n\t\t\tif (movePool.includes('stealthrock')) this.fastPop(movePool, movePool.indexOf('stealthrock'));\r\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\r\n\t\t}\r\n\t\tif (teamDetails.rapidSpin) {\r\n\t\t\tif (movePool.includes('rapidspin')) this.fastPop(movePool, movePool.indexOf('rapidspin'));\r\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\r\n\t\t}\r\n\t\tif (teamDetails.toxicSpikes) {\r\n\t\t\tif (movePool.includes('toxicspikes')) this.fastPop(movePool, movePool.indexOf('toxicspikes'));\r\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\r\n\t\t}\r\n\t\tif (teamDetails.spikes && teamDetails.spikes >= 2) {\r\n\t\t\tif (movePool.includes('spikes')) this.fastPop(movePool, movePool.indexOf('spikes'));\r\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\r\n\t\t}\r\n\r\n\t\t// Develop additional move lists\r\n\t\tconst badWithSetup = ['healbell', 'pursuit', 'toxic'];\r\n\t\t// Nature Power is Earthquake this gen\r\n\t\tconst statusMoves = this.dex.moves.all()\r\n\t\t\t.filter(move => move.category === 'Status' && move.id !== 'naturepower')\r\n\t\t\t.map(move => move.id);\r\n\r\n\t\t// General incompatibilities\r\n\t\tconst incompatiblePairs = [\r\n\t\t\t// These moves don't mesh well with other aspects of the set\r\n\t\t\t[statusMoves, ['healingwish', 'switcheroo', 'trick']],\r\n\t\t\t[SETUP, PIVOT_MOVES],\r\n\t\t\t[SETUP, HAZARDS],\r\n\t\t\t[SETUP, badWithSetup],\r\n\t\t\t[PHYSICAL_SETUP, PHYSICAL_SETUP],\r\n\t\t\t[['fakeout', 'uturn'], ['switcheroo', 'trick']],\r\n\t\t\t['substitute', PIVOT_MOVES],\r\n\t\t\t['rest', 'substitute'],\r\n\r\n\t\t\t// These attacks are redundant with each other\r\n\t\t\t['psychic', 'psyshock'],\r\n\t\t\t[['scald', 'surf'], 'hydropump'],\r\n\t\t\t[['bodyslam', 'return'], ['bodyslam', 'doubleedge']],\r\n\t\t\t[['gigadrain', 'leafstorm'], ['leafstorm', 'petaldance', 'powerwhip']],\r\n\t\t\t[['drainpunch', 'focusblast'], ['closecombat', 'highjumpkick', 'superpower']],\r\n\t\t\t['payback', 'pursuit'],\r\n\r\n\t\t\t// Assorted hardcodes go here:\r\n\t\t\t// Zebstrika\r\n\t\t\t['wildcharge', 'thunderbolt'],\r\n\t\t\t// Manectric\r\n\t\t\t['flamethrower', 'overheat'],\r\n\t\t\t// Meganium\r\n\t\t\t['leechseed', 'dragontail'],\r\n\t\t\t// Volcarona and Heatran\r\n\t\t\t[['fierydance', 'lavaplume'], 'fireblast'],\r\n\t\t\t// Walrein\r\n\t\t\t['encore', 'roar'],\r\n\t\t\t// Lunatone\r\n\t\t\t['moonlight', 'rockpolish'],\r\n\t\t\t// Smeargle\r\n\t\t\t['memento', 'whirlwind'],\r\n\t\t\t// Seviper\r\n\t\t\t['switcheroo', 'suckerpunch'],\r\n\t\t\t// Jirachi\r\n\t\t\t['bodyslam', 'healingwish'],\r\n\t\t];\r\n\r\n\t\tfor (const pair of incompatiblePairs) this.incompatibleMoves(moves, movePool, pair[0], pair[1]);\r\n\r\n\t\tif (species.id === 'dugtrio') this.incompatibleMoves(moves, movePool, statusMoves, 'memento');\r\n\r\n\t\tconst statusInflictingMoves = ['stunspore', 'thunderwave', 'toxic', 'willowisp', 'yawn'];\r\n\t\tif (!abilities.has('Prankster') && role !== 'Staller') {\r\n\t\t\tthis.incompatibleMoves(moves, movePool, statusInflictingMoves, statusInflictingMoves);\r\n\t\t}\r\n\r\n\t\tif (abilities.has('Guts')) this.incompatibleMoves(moves, movePool, 'protect', 'swordsdance');\r\n\t}\r\n\r\n\t// Generate random moveset for a given species, role, preferred type.\r\n\trandomMoveset(\r\n\t\ttypes: string[],\r\n\t\tabilities: Set<string>,\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species,\r\n\t\tisLead: boolean,\r\n\t\tmovePool: string[],\r\n\t\tpreferredType: string,\r\n\t\trole: RandomTeamsTypes.Role,\r\n\t): Set<string> {\r\n\t\tconst moves = new Set<string>();\r\n\t\tlet counter = this.newQueryMoves(moves, species, preferredType, abilities);\r\n\t\tthis.cullMovePool(types, moves, abilities, counter, movePool, teamDetails, species, isLead,\r\n\t\t\tpreferredType, role);\r\n\r\n\t\t// If there are only four moves, add all moves and return early\r\n\t\tif (movePool.length <= this.maxMoveCount) {\r\n\t\t\t// Still need to ensure that multiple Hidden Powers are not added (if maxMoveCount is increased)\r\n\t\t\twhile (movePool.length) {\r\n\t\t\t\tconst moveid = this.sample(movePool);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t}\r\n\t\t\treturn moves;\r\n\t\t}\r\n\r\n\t\tconst runEnforcementChecker = (checkerName: string) => {\r\n\t\t\tif (!this.moveEnforcementCheckers[checkerName]) return false;\r\n\t\t\treturn this.moveEnforcementCheckers[checkerName](\r\n\t\t\t\tmovePool, moves, abilities, new Set(types), counter, species, teamDetails\r\n\t\t\t);\r\n\t\t};\r\n\r\n\t\t// Add required move (e.g. Relic Song for Meloetta-P)\r\n\t\tif (species.requiredMove) {\r\n\t\t\tconst move = this.dex.moves.get(species.requiredMove).id;\r\n\t\t\tcounter = this.addMove(move, moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\tmovePool, preferredType, role);\r\n\t\t}\r\n\r\n\t\t// Add other moves you really want to have, e.g. STAB, recovery, setup.\r\n\r\n\t\t// Enforce Facade if Guts is a possible ability\r\n\t\tif (movePool.includes('facade') && abilities.has('Guts')) {\r\n\t\t\tcounter = this.addMove('facade', moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\tmovePool, preferredType, role);\r\n\t\t}\r\n\r\n\t\t// Enforce Seismic Toss and Spore\r\n\t\tfor (const moveid of ['seismictoss', 'spore']) {\r\n\t\t\tif (movePool.includes(moveid)) {\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce Thunder Wave on Prankster users\r\n\t\tif (movePool.includes('thunderwave') && abilities.has('Prankster')) {\r\n\t\t\tcounter = this.addMove('thunderwave', moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\tmovePool, preferredType, role);\r\n\t\t}\r\n\r\n\t\t// Enforce hazard removal on Bulky Support and Spinner if the team doesn't already have it\r\n\t\tif (['Bulky Support', 'Spinner'].includes(role) && !teamDetails.rapidSpin) {\r\n\t\t\tif (movePool.includes('rapidspin')) {\r\n\t\t\t\tcounter = this.addMove('rapidspin', moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce STAB priority\r\n\t\tif (['Bulky Attacker', 'Bulky Setup'].includes(role) || this.priorityPokemon.includes(species.id)) {\r\n\t\t\tconst priorityMoves = [];\r\n\t\t\tfor (const moveid of movePool) {\r\n\t\t\t\tconst move = this.dex.moves.get(moveid);\r\n\t\t\t\tconst moveType = this.getMoveType(move, species, abilities, preferredType);\r\n\t\t\t\tif (types.includes(moveType) && move.priority > 0 && (move.basePower || move.basePowerCallback)) {\r\n\t\t\t\t\tpriorityMoves.push(moveid);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (priorityMoves.length) {\r\n\t\t\t\tconst moveid = this.sample(priorityMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce STAB\r\n\t\tfor (const type of types) {\r\n\t\t\t// Check if a STAB move of that type should be required\r\n\t\t\tconst stabMoves = [];\r\n\t\t\tfor (const moveid of movePool) {\r\n\t\t\t\tconst move = this.dex.moves.get(moveid);\r\n\t\t\t\tconst moveType = this.getMoveType(move, species, abilities, preferredType);\r\n\t\t\t\tif (!this.noStab.includes(moveid) && (move.basePower || move.basePowerCallback) && type === moveType) {\r\n\t\t\t\t\tstabMoves.push(moveid);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\twhile (runEnforcementChecker(type)) {\r\n\t\t\t\tif (!stabMoves.length) break;\r\n\t\t\t\tconst moveid = this.sampleNoReplace(stabMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce Preferred Type\r\n\t\tif (!counter.get('preferred')) {\r\n\t\t\tconst stabMoves = [];\r\n\t\t\tfor (const moveid of movePool) {\r\n\t\t\t\tconst move = this.dex.moves.get(moveid);\r\n\t\t\t\tconst moveType = this.getMoveType(move, species, abilities, preferredType);\r\n\t\t\t\tif (!this.noStab.includes(moveid) && (move.basePower || move.basePowerCallback) && preferredType === moveType) {\r\n\t\t\t\t\tstabMoves.push(moveid);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (stabMoves.length) {\r\n\t\t\t\tconst moveid = this.sample(stabMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If no STAB move was added, add a STAB move\r\n\t\tif (!counter.get('stab')) {\r\n\t\t\tconst stabMoves = [];\r\n\t\t\tfor (const moveid of movePool) {\r\n\t\t\t\tconst move = this.dex.moves.get(moveid);\r\n\t\t\t\tconst moveType = this.getMoveType(move, species, abilities, preferredType);\r\n\t\t\t\tif (!this.noStab.includes(moveid) && (move.basePower || move.basePowerCallback) && types.includes(moveType)) {\r\n\t\t\t\t\tstabMoves.push(moveid);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (stabMoves.length) {\r\n\t\t\t\tconst moveid = this.sample(stabMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t} else {\r\n\t\t\t\t// If they have no regular STAB move, enforce U-turn on Bug types.\r\n\t\t\t\tif (movePool.includes('uturn') && types.includes('Bug')) {\r\n\t\t\t\t\tcounter = this.addMove('uturn', moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce recovery\r\n\t\tif (['Bulky Support', 'Bulky Attacker', 'Bulky Setup', 'Spinner', 'Staller'].includes(role)) {\r\n\t\t\tconst recoveryMoves = movePool.filter(moveid => RECOVERY_MOVES.includes(moveid));\r\n\t\t\tif (recoveryMoves.length) {\r\n\t\t\t\tconst moveid = this.sample(recoveryMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce Staller moves\r\n\t\tif (role === 'Staller') {\r\n\t\t\tconst enforcedMoves = ['protect', 'toxic', 'wish'];\r\n\t\t\tfor (const move of enforcedMoves) {\r\n\t\t\t\tif (movePool.includes(move)) {\r\n\t\t\t\t\tcounter = this.addMove(move, moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce setup\r\n\t\tif (role.includes('Setup')) {\r\n\t\t\t// First, try to add a non-Speed setup move\r\n\t\t\tconst nonSpeedSetupMoves = movePool.filter(moveid => SETUP.includes(moveid) && !SPEED_SETUP.includes(moveid));\r\n\t\t\tif (nonSpeedSetupMoves.length) {\r\n\t\t\t\tconst moveid = this.sample(nonSpeedSetupMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t} else {\r\n\t\t\t\t// No non-Speed setup moves, so add any (Speed) setup move\r\n\t\t\t\tconst setupMoves = movePool.filter(moveid => SETUP.includes(moveid));\r\n\t\t\t\tif (setupMoves.length) {\r\n\t\t\t\t\tconst moveid = this.sample(setupMoves);\r\n\t\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce a move not on the noSTAB list\r\n\t\tif (!counter.damagingMoves.size && !(moves.has('uturn') && types.includes('Bug'))) {\r\n\t\t\t// Choose an attacking move\r\n\t\t\tconst attackingMoves = [];\r\n\t\t\tfor (const moveid of movePool) {\r\n\t\t\t\tconst move = this.dex.moves.get(moveid);\r\n\t\t\t\tif (!this.noStab.includes(moveid) && (move.category !== 'Status')) attackingMoves.push(moveid);\r\n\t\t\t}\r\n\t\t\tif (attackingMoves.length) {\r\n\t\t\t\tconst moveid = this.sample(attackingMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce coverage move\r\n\t\tif (['Fast Attacker', 'Setup Sweeper', 'Bulky Attacker', 'Wallbreaker'].includes(role)) {\r\n\t\t\tif (counter.damagingMoves.size === 1) {\r\n\t\t\t\t// Find the type of the current attacking move\r\n\t\t\t\tconst currentAttackType = counter.damagingMoves.values().next().value.type;\r\n\t\t\t\t// Choose an attacking move that is of different type to the current single attack\r\n\t\t\t\tconst coverageMoves = [];\r\n\t\t\t\tfor (const moveid of movePool) {\r\n\t\t\t\t\tconst move = this.dex.moves.get(moveid);\r\n\t\t\t\t\tconst moveType = this.getMoveType(move, species, abilities, preferredType);\r\n\t\t\t\t\tif (!this.noStab.includes(moveid) && (move.basePower || move.basePowerCallback)) {\r\n\t\t\t\t\t\tif (currentAttackType !== moveType) coverageMoves.push(moveid);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (coverageMoves.length) {\r\n\t\t\t\t\tconst moveid = this.sample(coverageMoves);\r\n\t\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Choose remaining moves randomly from movepool and add them to moves list:\r\n\t\twhile (moves.size < this.maxMoveCount && movePool.length) {\r\n\t\t\tconst moveid = this.sample(movePool);\r\n\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\tmovePool, preferredType, role);\r\n\t\t\tfor (const pair of MOVE_PAIRS) {\r\n\t\t\t\tif (moveid === pair[0] && movePool.includes(pair[1])) {\r\n\t\t\t\t\tcounter = this.addMove(pair[1], moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t\t}\r\n\t\t\t\tif (moveid === pair[1] && movePool.includes(pair[0])) {\r\n\t\t\t\t\tcounter = this.addMove(pair[0], moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn moves;\r\n\t}\r\n\r\n\tshouldCullAbility(\r\n\t\tability: string,\r\n\t\ttypes: Set<string>,\r\n\t\tmoves: Set<string>,\r\n\t\tabilities: Set<string>,\r\n\t\tcounter: MoveCounter,\r\n\t\tmovePool: string[],\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species,\r\n\t\tpreferredType: string,\r\n\t\trole: RandomTeamsTypes.Role\r\n\t): boolean {\r\n\t\tswitch (ability) {\r\n\t\tcase 'Flare Boost': case 'Gluttony': case 'Ice Body': case 'Moody': case 'Pickpocket': case 'Pressure':\r\n\t\tcase 'Sand Veil': case 'Sniper': case 'Snow Cloak': case 'Steadfast': case 'Unburden':\r\n\t\t\treturn true;\r\n\t\tcase 'Chlorophyll':\r\n\t\t\t// Petal Dance is for Lilligant\r\n\t\t\treturn (\r\n\t\t\t\tspecies.baseStats.spe > 100 || moves.has('petaldance') ||\r\n\t\t\t\t(!moves.has('sunnyday') && !teamDetails.sun)\r\n\t\t\t);\r\n\t\tcase 'Compound Eyes': case 'No Guard':\r\n\t\t\treturn !counter.get('inaccurate');\r\n\t\tcase 'Contrary': case 'Skill Link':\r\n\t\t\treturn !counter.get(toID(ability));\r\n\t\tcase 'Defiant': case 'Justified': case 'Moxie':\r\n\t\t\treturn !counter.get('Physical');\r\n\t\tcase 'Guts':\r\n\t\t\treturn (!moves.has('facade') && !moves.has('sleeptalk'));\r\n\t\tcase 'Hustle':\r\n\t\t\treturn (counter.get('Physical') < 2 || species.id === 'delibird');\r\n\t\tcase 'Hydration': case 'Rain Dish': case 'Swift Swim':\r\n\t\t\treturn (\r\n\t\t\t\tspecies.baseStats.spe > 100 || !moves.has('raindance') && !teamDetails.rain ||\r\n\t\t\t\t!moves.has('raindance') && ['Rock Head', 'Water Absorb'].some(abil => abilities.has(abil))\r\n\t\t\t);\r\n\t\tcase 'Intimidate':\r\n\t\t\t// Slam part is for Tauros\r\n\t\t\treturn (moves.has('bodyslam') || species.id === 'staraptor');\r\n\t\tcase 'Iron Fist':\r\n\t\t\treturn (!counter.get(toID(ability)) || species.id === 'golurk');\r\n\t\tcase 'Lightning Rod':\r\n\t\t\treturn (types.has('Ground') || ((!!teamDetails.rain || moves.has('raindance')) && species.id === 'seaking'));\r\n\t\tcase 'Magic Guard': case 'Speed Boost':\r\n\t\t\treturn (abilities.has('Tinted Lens') && role === 'Wallbreaker');\r\n\t\tcase 'Mold Breaker':\r\n\t\t\treturn (species.baseSpecies === 'Basculin' || species.id === 'rampardos');\r\n\t\tcase 'Overgrow':\r\n\t\t\treturn !counter.get('Grass');\r\n\t\tcase 'Prankster':\r\n\t\t\treturn (!counter.get('Status') || (species.id === 'tornadus' && moves.has('bulkup')));\r\n\t\tcase 'Poison Heal':\r\n\t\t\treturn (species.id === 'breloom' && role === 'Fast Attacker');\r\n\t\tcase 'Synchronize':\r\n\t\t\treturn (counter.get('Status') < 2 || !!counter.get('recoil'));\r\n\t\tcase 'Regenerator':\r\n\t\t\treturn ((species.id === 'mienshao' && role !== 'Fast Attacker') || species.id === 'reuniclus');\r\n\t\tcase 'Reckless': case 'Rock Head':\r\n\t\t\treturn !counter.get('recoil');\r\n\t\tcase 'Sand Force': case 'Sand Rush':\r\n\t\t\treturn !teamDetails.sand;\r\n\t\tcase 'Serene Grace':\r\n\t\t\treturn !counter.get('serenegrace');\r\n\t\tcase 'Sheer Force':\r\n\t\t\treturn (!counter.get('sheerforce') || moves.has('doubleedge') || abilities.has('Guts'));\r\n\t\tcase 'Simple':\r\n\t\t\treturn !counter.get('setup');\r\n\t\tcase 'Solar Power':\r\n\t\t\treturn (!counter.get('Special') || !teamDetails.sun);\r\n\t\tcase 'Sticky Hold':\r\n\t\t\treturn species.id !== 'accelgor';\r\n\t\tcase 'Sturdy':\r\n\t\t\treturn (!!counter.get('recoil') && !counter.get('recovery') || species.id === 'steelix' && !!counter.get('sheerforce'));\r\n\t\tcase 'Swarm':\r\n\t\t\treturn !counter.get('Bug') && !moves.has('uturn');\r\n\t\tcase 'Technician':\r\n\t\t\treturn (!counter.get('technician') || moves.has('tailslap'));\r\n\t\tcase 'Tinted Lens':\r\n\t\t\t// Night Shade part is for Noctowl\r\n\t\t\treturn (\r\n\t\t\t\tmoves.has('nightshade') ||\r\n\t\t\t\t['illumise', 'sigilyph', 'yanmega'].some(m => species.id === (m)) && role !== 'Wallbreaker'\r\n\t\t\t);\r\n\t\tcase 'Torrent':\r\n\t\t\treturn !counter.get('Water');\r\n\t\tcase 'Unaware':\r\n\t\t\treturn ((role !== 'Bulky Attacker' && role !== 'Bulky Setup') || species.id === 'swoobat');\r\n\t\tcase 'Water Absorb':\r\n\t\t\treturn moves.has('raindance') || ['Drizzle', 'Unaware', 'Volt Absorb'].some(abil => abilities.has(abil));\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\tgetAbility(\r\n\t\ttypes: Set<string>,\r\n\t\tmoves: Set<string>,\r\n\t\tabilities: Set<string>,\r\n\t\tcounter: MoveCounter,\r\n\t\tmovePool: string[],\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species,\r\n\t\tpreferredType: string,\r\n\t\trole: RandomTeamsTypes.Role,\r\n\t): string {\r\n\t\tconst abilityData = Array.from(abilities).map(a => this.dex.abilities.get(a));\r\n\t\tUtils.sortBy(abilityData, abil => -abil.rating);\r\n\r\n\t\tif (abilityData.length <= 1) return abilityData[0].name;\r\n\r\n\t\t// Hard-code abilities here\r\n\t\tif (\r\n\t\t\tabilities.has('Guts') &&\r\n\t\t\t!abilities.has('Quick Feet') &&\r\n\t\t\t(moves.has('facade') || (moves.has('sleeptalk') && moves.has('rest')))\r\n\t\t) return 'Guts';\r\n\t\tif (species.id === 'starmie') return role === 'Wallbreaker' ? 'Analytic' : 'Natural Cure';\r\n\t\tif (species.id === 'ninetales') return 'Drought';\r\n\t\tif (species.id === 'gligar') return 'Immunity';\r\n\t\tif (species.id === 'arcanine') return 'Intimidate';\r\n\t\tif (species.id === 'altaria') return 'Natural Cure';\r\n\t\tif (species.id === 'mandibuzz') return 'Overcoat';\r\n\t\t// If Ambipom doesn't qualify for Technician, Skill Link is useless on it\r\n\t\tif (species.id === 'ambipom' && !counter.get('technician')) return 'Pickup';\r\n\t\tif (['spiritomb', 'vespiquen', 'weavile'].includes(species.id)) return 'Pressure';\r\n\t\tif (species.id === 'druddigon') return 'Rough Skin';\r\n\t\tif (species.id === 'stunfisk') return 'Static';\r\n\t\tif (species.id === 'zangoose') return 'Toxic Boost';\r\n\t\tif (species.id === 'porygon2') return 'Trace';\r\n\r\n\t\tif (abilities.has('Harvest')) return 'Harvest';\r\n\t\tif (abilities.has('Shed Skin') && moves.has('rest') && !moves.has('sleeptalk')) return 'Shed Skin';\r\n\t\tif (abilities.has('Unburden') && ['acrobatics', 'closecombat'].some(m => moves.has(m))) return 'Unburden';\r\n\r\n\t\tlet abilityAllowed: Ability[] = [];\r\n\t\t// Obtain a list of abilities that are allowed (not culled)\r\n\t\tfor (const ability of abilityData) {\r\n\t\t\tif (ability.rating >= 1 && !this.shouldCullAbility(\r\n\t\t\t\tability.name, types, moves, abilities, counter, movePool, teamDetails, species, preferredType, role\r\n\t\t\t)) {\r\n\t\t\t\tabilityAllowed.push(ability);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If all abilities are rejected, re-allow all abilities\r\n\t\tif (!abilityAllowed.length) {\r\n\t\t\tfor (const ability of abilityData) {\r\n\t\t\t\tif (ability.rating > 0) abilityAllowed.push(ability);\r\n\t\t\t}\r\n\t\t\tif (!abilityAllowed.length) abilityAllowed = abilityData;\r\n\t\t}\r\n\r\n\t\tif (abilityAllowed.length === 1) return abilityAllowed[0].name;\r\n\t\t// Sort abilities by rating with an element of randomness\r\n\t\t// All three abilities can be chosen\r\n\t\tif (abilityAllowed[2] && abilityAllowed[0].rating - 0.5 <= abilityAllowed[2].rating) {\r\n\t\t\tif (abilityAllowed[1].rating <= abilityAllowed[2].rating) {\r\n\t\t\t\tif (this.randomChance(1, 2)) [abilityAllowed[1], abilityAllowed[2]] = [abilityAllowed[2], abilityAllowed[1]];\r\n\t\t\t} else {\r\n\t\t\t\tif (this.randomChance(1, 3)) [abilityAllowed[1], abilityAllowed[2]] = [abilityAllowed[2], abilityAllowed[1]];\r\n\t\t\t}\r\n\t\t\tif (abilityAllowed[0].rating <= abilityAllowed[1].rating) {\r\n\t\t\t\tif (this.randomChance(2, 3)) [abilityAllowed[0], abilityAllowed[1]] = [abilityAllowed[1], abilityAllowed[0]];\r\n\t\t\t} else {\r\n\t\t\t\tif (this.randomChance(1, 2)) [abilityAllowed[0], abilityAllowed[1]] = [abilityAllowed[1], abilityAllowed[0]];\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// Third ability cannot be chosen\r\n\t\t\tif (abilityAllowed[0].rating <= abilityAllowed[1].rating) {\r\n\t\t\t\tif (this.randomChance(1, 2)) [abilityAllowed[0], abilityAllowed[1]] = [abilityAllowed[1], abilityAllowed[0]];\r\n\t\t\t} else if (abilityAllowed[0].rating - 0.5 <= abilityAllowed[1].rating) {\r\n\t\t\t\tif (this.randomChance(1, 3)) [abilityAllowed[0], abilityAllowed[1]] = [abilityAllowed[1], abilityAllowed[0]];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// After sorting, choose the first ability\r\n\t\treturn abilityAllowed[0].name;\r\n\t}\r\n\r\n\tgetPriorityItem(\r\n\t\tability: string,\r\n\t\ttypes: string[],\r\n\t\tmoves: Set<string>,\r\n\t\tcounter: MoveCounter,\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species,\r\n\t\tisLead: boolean,\r\n\t\tpreferredType: string,\r\n\t\trole: RandomTeamsTypes.Role,\r\n\t): string | undefined {\r\n\t\tif (species.requiredItems) return this.sample(species.requiredItems);\r\n\t\tif (species.id === 'farfetchd') return 'Stick';\r\n\t\tif (species.id === 'latias' || species.id === 'latios') return 'Soul Dew';\r\n\t\tif (species.id === 'marowak') return 'Thick Club';\r\n\t\tif (species.id === 'pikachu') return 'Light Ball';\r\n\t\tif (species.id === 'shedinja' || species.id === 'smeargle') return 'Focus Sash';\r\n\t\tif (species.id === 'unown') return 'Choice Specs';\r\n\t\tif (species.id === 'wobbuffet') return 'Custap Berry';\r\n\t\tif (ability === 'Harvest') return 'Sitrus Berry';\r\n\t\tif (species.id === 'ditto') return 'Choice Scarf';\r\n\t\tif (species.id === 'exploud' && role === 'Bulky Attacker') return 'Choice Band';\r\n\t\tif (ability === 'Poison Heal' || moves.has('facade')) return 'Toxic Orb';\r\n\t\tif (ability === 'Speed Boost' && species.id !== 'ninjask') return 'Life Orb';\r\n\t\tif (species.nfe) return 'Eviolite';\r\n\t\tif (['healingwish', 'memento', 'switcheroo', 'trick'].some(m => moves.has(m))) {\r\n\t\t\tif (\r\n\t\t\t\tspecies.baseStats.spe >= 60 && species.baseStats.spe <= 108 && role !== 'Wallbreaker' && !counter.get('priority')\r\n\t\t\t) {\r\n\t\t\t\treturn 'Choice Scarf';\r\n\t\t\t} else {\r\n\t\t\t\treturn (counter.get('Physical') > counter.get('Special')) ? 'Choice Band' : 'Choice Specs';\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (moves.has('bellydrum')) return 'Sitrus Berry';\r\n\t\tif (moves.has('shellsmash')) return 'White Herb';\r\n\t\tif (moves.has('psychoshift')) return 'Flame Orb';\r\n\t\tif (ability === 'Magic Guard' && role !== 'Bulky Support') {\r\n\t\t\treturn moves.has('counter') ? 'Focus Sash' : 'Life Orb';\r\n\t\t}\r\n\t\tif (species.id === 'rampardos' && role === 'Fast Attacker') return 'Choice Scarf';\r\n\t\tif (ability === 'Sheer Force' && counter.get('sheerforce')) return 'Life Orb';\r\n\t\tif (moves.has('acrobatics')) return 'Flying Gem';\r\n\t\tif (species.id === 'hitmonlee' && ability === 'Unburden') return moves.has('fakeout') ? 'Normal Gem' : 'Fighting Gem';\r\n\t\tif (moves.has('lightscreen') && moves.has('reflect')) return 'Light Clay';\r\n\t\tif (moves.has('rest') && !moves.has('sleeptalk') && !['Hydration', 'Natural Cure', 'Shed Skin'].includes(ability)) {\r\n\t\t\treturn 'Chesto Berry';\r\n\t\t}\r\n\t\tif (role === 'Staller') return 'Leftovers';\r\n\t}\r\n\r\n\tgetItem(\r\n\t\tability: string,\r\n\t\ttypes: string[],\r\n\t\tmoves: Set<string>,\r\n\t\tcounter: MoveCounter,\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species,\r\n\t\tisLead: boolean,\r\n\t\tpreferredType: string,\r\n\t\trole: RandomTeamsTypes.Role,\r\n\t): string {\r\n\t\tconst defensiveStatTotal = species.baseStats.hp + species.baseStats.def + species.baseStats.spd;\r\n\r\n\t\tconst scarfReqs = (\r\n\t\t\trole !== 'Wallbreaker' &&\r\n\t\t\tspecies.baseStats.spe >= 60 && species.baseStats.spe <= 108 &&\r\n\t\t\t!counter.get('priority') && !moves.has('pursuit')\r\n\t\t);\r\n\r\n\t\tif (\r\n\t\t\tmoves.has('pursuit') && moves.has('suckerpunch') && counter.get('Dark') &&\r\n\t\t\t(!this.priorityPokemon.includes(species.id) || counter.get('Dark') >= 2)\r\n\t\t) return 'Black Glasses';\r\n\t\tif (counter.get('Special') === 4) {\r\n\t\t\treturn (\r\n\t\t\t\tscarfReqs && species.baseStats.spa >= 90 && this.randomChance(1, 2)\r\n\t\t\t) ? 'Choice Scarf' : 'Choice Specs';\r\n\t\t}\r\n\t\tif (counter.get('Special') === 3 && moves.has('uturn')) return 'Choice Specs';\r\n\t\tif (counter.get('Physical') === 4 && species.id !== 'jirachi' && species.id !== 'spinda' &&\r\n\t\t\t['dragontail', 'fakeout', 'rapidspin'].every(m => !moves.has(m))\r\n\t\t) {\r\n\t\t\treturn (\r\n\t\t\t\tscarfReqs && (species.baseStats.atk >= 100 || ability === 'Pure Power' || ability === 'Huge Power') &&\r\n\t\t\t\tthis.randomChance(1, 2)\r\n\t\t\t) ? 'Choice Scarf' : 'Choice Band';\r\n\t\t}\r\n\r\n\t\tif (ability === 'Sturdy' && moves.has('explosion')) return 'Custap Berry';\r\n\t\tif (types.includes('Normal') && moves.has('fakeout') && !!counter.get('Normal')) return 'Silk Scarf';\r\n\t\tif (species.id === 'palkia') return 'Lustrous Orb';\r\n\t\tif (moves.has('outrage') && counter.get('setup')) return 'Lum Berry';\r\n\t\tif (\r\n\t\t\t(ability === 'Rough Skin') || (species.id !== 'hooh' && role !== 'Wallbreaker' &&\r\n\t\t\tability === 'Regenerator' && species.baseStats.hp + species.baseStats.def >= 180 && this.randomChance(1, 2))\r\n\t\t) return 'Rocky Helmet';\r\n\t\tif (['protect', 'substitute'].some(m => moves.has(m))) return 'Leftovers';\r\n\t\tif (\r\n\t\t\tthis.dex.getEffectiveness('Ground', species) >= 2 &&\r\n\t\t\tability !== 'Levitate'\r\n\t\t) {\r\n\t\t\treturn 'Air Balloon';\r\n\t\t}\r\n\t\tif (\r\n\t\t\trole === 'Fast Support' && isLead && defensiveStatTotal < 255 && !counter.get('recovery') &&\r\n\t\t\t(!counter.get('recoil') || ability === 'Rock Head')\r\n\t\t) return 'Focus Sash';\r\n\r\n\t\t// Default Items\r\n\t\tif (role === 'Fast Support') {\r\n\t\t\treturn (\r\n\t\t\t\tcounter.get('Physical') + counter.get('Special') >= 3 &&\r\n\t\t\t\t['rapidspin', 'uturn', 'voltswitch'].every(m => !moves.has(m)) &&\r\n\t\t\t\tthis.dex.getEffectiveness('Rock', species) < 2\r\n\t\t\t) ? 'Life Orb' : 'Leftovers';\r\n\t\t}\r\n\t\t// noStab moves that should reject Expert Belt\r\n\t\tconst noExpertBeltMoves = (\r\n\t\t\tthis.noStab.filter(moveid => ['Dragon', 'Normal', 'Poison'].includes(this.dex.moves.get(moveid).type))\r\n\t\t);\r\n\t\tconst expertBeltReqs = (\r\n\t\t\t!counter.get('Dragon') && !counter.get('Normal') && !counter.get('Poison') &&\r\n\t\t\tnoExpertBeltMoves.every(m => !moves.has(m))\r\n\t\t);\r\n\t\tif (\r\n\t\t\t!counter.get('Status') && expertBeltReqs &&\r\n\t\t\t(moves.has('uturn') || moves.has('voltswitch') || role === 'Fast Attacker')\r\n\t\t) return 'Expert Belt';\r\n\t\tif (\r\n\t\t\t['Fast Attacker', 'Setup Sweeper', 'Wallbreaker'].some(m => role === m) &&\r\n\t\t\tthis.dex.getEffectiveness('Rock', species) < 2 && ability !== 'Sturdy'\r\n\t\t) return 'Life Orb';\r\n\t\treturn 'Leftovers';\r\n\t}\r\n\r\n\trandomSet(\r\n\t\tspecies: string | Species,\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails = {},\r\n\t\tisLead = false\r\n\t): RandomTeamsTypes.RandomSet {\r\n\t\tspecies = this.dex.species.get(species);\r\n\t\tconst forme = this.getForme(species);\r\n\t\tconst sets = this.randomSets[species.id][\"sets\"];\r\n\t\tconst possibleSets = [];\r\n\t\t// Check if the Pokemon has a Spinner set\r\n\t\tlet canSpinner = false;\r\n\t\tfor (const set of sets) {\r\n\t\t\tif (!teamDetails.rapidSpin && set.role === 'Spinner') canSpinner = true;\r\n\t\t}\r\n\t\tfor (const set of sets) {\r\n\t\t\t// Prevent Spinner if the team already has removal\r\n\t\t\tif (teamDetails.rapidSpin && set.role === 'Spinner') continue;\r\n\t\t\t// Enforce Spinner if the team does not have removal\r\n\t\t\tif (canSpinner && set.role !== 'Spinner') continue;\r\n\t\t\tpossibleSets.push(set);\r\n\t\t}\r\n\t\tconst set = this.sampleIfArray(possibleSets);\r\n\t\tconst role = set.role;\r\n\t\tconst movePool: string[] = Array.from(set.movepool);\r\n\t\tconst preferredTypes = set.preferredTypes;\r\n\t\tconst preferredType = this.sampleIfArray(preferredTypes) || '';\r\n\r\n\t\tlet ability = '';\r\n\t\tlet item = undefined;\r\n\r\n\t\tconst evs = {hp: 85, atk: 85, def: 85, spa: 85, spd: 85, spe: 85};\r\n\t\tconst ivs = {hp: 31, atk: 31, def: 31, spa: 31, spd: 31, spe: 31};\r\n\r\n\t\tconst types = species.types;\r\n\t\tconst abilities = new Set(Object.values(species.abilities));\r\n\t\tif (species.unreleasedHidden) abilities.delete(species.abilities.H);\r\n\r\n\t\t// Get moves\r\n\t\tconst moves = this.randomMoveset(types, abilities, teamDetails, species, isLead, movePool,\r\n\t\t\tpreferredType, role);\r\n\t\tconst counter = this.newQueryMoves(moves, species, preferredType, abilities);\r\n\r\n\t\t// Get ability\r\n\t\tability = this.getAbility(new Set(types), moves, abilities, counter, movePool, teamDetails, species,\r\n\t\t\tpreferredType, role);\r\n\r\n\t\t// Get items\r\n\t\titem = this.getPriorityItem(ability, types, moves, counter, teamDetails, species, isLead, preferredType, role);\r\n\t\tif (item === undefined) {\r\n\t\t\titem = this.getItem(ability, types, moves, counter, teamDetails, species, isLead, preferredType, role);\r\n\t\t}\r\n\r\n\t\t// For Trick / Switcheroo\r\n\t\tif (item === 'Leftovers' && types.includes('Poison')) {\r\n\t\t\titem = 'Black Sludge';\r\n\t\t}\r\n\r\n\t\tconst level = this.getLevel(species);\r\n\r\n\t\t// We use a special variable to track Hidden Power\r\n\t\t// so that we can check for all Hidden Powers at once\r\n\t\tlet hasHiddenPower = false;\r\n\t\tfor (const move of moves) {\r\n\t\t\tif (move.startsWith('hiddenpower')) hasHiddenPower = true;\r\n\t\t}\r\n\r\n\t\tif (hasHiddenPower) {\r\n\t\t\tlet hpType;\r\n\t\t\tfor (const move of moves) {\r\n\t\t\t\tif (move.startsWith('hiddenpower')) hpType = move.substr(11);\r\n\t\t\t}\r\n\t\t\tif (!hpType) throw new Error(`hasHiddenPower is true, but no Hidden Power move was found.`);\r\n\t\t\tconst HPivs = this.dex.types.get(hpType).HPivs;\r\n\t\t\tlet iv: StatID;\r\n\t\t\tfor (iv in HPivs) {\r\n\t\t\t\tivs[iv] = HPivs[iv]!;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Prepare optimal HP\r\n\t\tconst srImmunity = ability === 'Magic Guard';\r\n\t\tlet srWeakness = srImmunity ? 0 : this.dex.getEffectiveness('Rock', species);\r\n\t\t// Crash damage move users want an odd HP to survive two misses\r\n\t\tif (['highjumpkick', 'jumpkick'].some(m => moves.has(m))) srWeakness = 2;\r\n\t\twhile (evs.hp > 1) {\r\n\t\t\tconst hp = Math.floor(Math.floor(2 * species.baseStats.hp + ivs.hp + Math.floor(evs.hp / 4) + 100) * level / 100 + 10);\r\n\t\t\tif (moves.has('substitute') && item === 'Sitrus Berry') {\r\n\t\t\t\t// Two Substitutes should activate Sitrus Berry\r\n\t\t\t\tif (hp % 4 === 0) break;\r\n\t\t\t} else if (moves.has('bellydrum') && item === 'Sitrus Berry') {\r\n\t\t\t\t// Belly Drum should activate Sitrus Berry\r\n\t\t\t\tif (hp % 2 === 0) break;\r\n\t\t\t} else {\r\n\t\t\t\t// Maximize number of Stealth Rock switch-ins\r\n\t\t\t\tif (srWeakness <= 0 || ability === 'Regenerator' || ['Black Sludge', 'Leftovers', 'Life Orb'].includes(item)) break;\r\n\t\t\t\tif (item !== 'Sitrus Berry' && hp % (4 / srWeakness) > 0) break;\r\n\t\t\t\t// Minimise number of Stealth Rock switch-ins to activate Sitrus Berry\r\n\t\t\t\tif (item === 'Sitrus Berry' && hp % (4 / srWeakness) === 0) break;\r\n\t\t\t}\r\n\t\t\tevs.hp -= 4;\r\n\t\t}\r\n\r\n\t\t// Minimize confusion damage\r\n\t\tif (!counter.get('Physical') && !moves.has('transform')) {\r\n\t\t\tevs.atk = 0;\r\n\t\t\tivs.atk = hasHiddenPower ? (ivs.atk || 31) - 28 : 0;\r\n\t\t}\r\n\r\n\t\tif (['gyroball', 'metalburst', 'trickroom'].some(m => moves.has(m))) {\r\n\t\t\tevs.spe = 0;\r\n\t\t\tivs.spe = hasHiddenPower ? (ivs.spe || 31) - 28 : 0;\r\n\t\t}\r\n\r\n\t\t// shuffle moves to add more randomness to camomons\r\n\t\tconst shuffledMoves = Array.from(moves);\r\n\t\tthis.prng.shuffle(shuffledMoves);\r\n\r\n\t\treturn {\r\n\t\t\tname: species.baseSpecies,\r\n\t\t\tspecies: forme,\r\n\t\t\tgender: species.gender,\r\n\t\t\tshiny: this.randomChance(1, 1024),\r\n\t\t\tlevel,\r\n\t\t\tmoves: shuffledMoves,\r\n\t\t\tability,\r\n\t\t\tevs,\r\n\t\t\tivs,\r\n\t\t\titem,\r\n\t\t\trole,\r\n\t\t};\r\n\t}\r\n\r\n\trandomTeam() {\r\n\t\tthis.enforceNoDirectCustomBanlistChanges();\r\n\r\n\t\tconst seed = this.prng.seed;\r\n\t\tconst ruleTable = this.dex.formats.getRuleTable(this.format);\r\n\t\tconst pokemon: RandomTeamsTypes.RandomSet[] = [];\r\n\r\n\t\t// For Monotype\r\n\t\tconst isMonotype = !!this.forceMonotype || ruleTable.has('sametypeclause');\r\n\t\tconst typePool = this.dex.types.names();\r\n\t\tconst type = this.forceMonotype || this.sample(typePool);\r\n\r\n\t\tconst baseFormes: {[k: string]: number} = {};\r\n\t\tconst typeCount: {[k: string]: number} = {};\r\n\t\tconst typeWeaknesses: {[k: string]: number} = {};\r\n\t\tconst teamDetails: RandomTeamsTypes.TeamDetails = {};\r\n\t\tlet numMaxLevelPokemon = 0;\r\n\r\n\t\tconst pokemonList = Object.keys(this.randomSets);\r\n\t\tconst [pokemonPool, baseSpeciesPool] = this.getPokemonPool(type, pokemon, isMonotype, pokemonList);\r\n\t\twhile (baseSpeciesPool.length && pokemon.length < this.maxTeamSize) {\r\n\t\t\tconst baseSpecies = this.sampleNoReplace(baseSpeciesPool);\r\n\t\t\tconst species = this.dex.species.get(this.sample(pokemonPool[baseSpecies]));\r\n\t\t\tif (!species.exists) continue;\r\n\r\n\t\t\t// Limit to one of each species (Species Clause)\r\n\t\t\tif (baseFormes[species.baseSpecies]) continue;\r\n\r\n\t\t\t// Illusion shouldn't be in the last slot\r\n\t\t\tif (species.name === 'Zoroark' && pokemon.length >= (this.maxTeamSize - 1)) continue;\r\n\r\n\t\t\t// Dynamically scale limits for different team sizes. The default and minimum value is 1.\r\n\t\t\tconst limitFactor = Math.round(this.maxTeamSize / 6) || 1;\r\n\r\n\t\t\tconst types = species.types;\r\n\r\n\t\t\tif (!isMonotype && !this.forceMonotype) {\r\n\t\t\t\tlet skip = false;\r\n\r\n\t\t\t\t// Limit two of any type\r\n\t\t\t\tfor (const typeName of types) {\r\n\t\t\t\t\tif (typeCount[typeName] >= 2 * limitFactor) {\r\n\t\t\t\t\t\tskip = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (skip) continue;\r\n\r\n\t\t\t\t// Limit three weak to any type\r\n\t\t\t\tfor (const typeName of this.dex.types.names()) {\r\n\t\t\t\t\t// it's weak to the type\r\n\t\t\t\t\tif (this.dex.getEffectiveness(typeName, species) > 0) {\r\n\t\t\t\t\t\tif (!typeWeaknesses[typeName]) typeWeaknesses[typeName] = 0;\r\n\t\t\t\t\t\tif (typeWeaknesses[typeName] >= 3 * limitFactor) {\r\n\t\t\t\t\t\t\tskip = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (skip) continue;\r\n\r\n\t\t\t\t// Limit one level 100 Pokemon\r\n\t\t\t\tif (!this.adjustLevel && (this.getLevel(species) === 100) && numMaxLevelPokemon >= limitFactor) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst set = this.randomSet(species, teamDetails, pokemon.length === 0);\r\n\r\n\t\t\t// Okay, the set passes, add it to our team\r\n\t\t\tpokemon.push(set);\r\n\r\n\t\t\t// Don't bother tracking details for the last Pokemon\r\n\t\t\tif (pokemon.length === this.maxTeamSize) break;\r\n\r\n\t\t\t// Now that our Pokemon has passed all checks, we can increment our counters\r\n\t\t\tbaseFormes[species.baseSpecies] = 1;\r\n\r\n\t\t\t// Increment type counters\r\n\t\t\tfor (const typeName of types) {\r\n\t\t\t\tif (typeName in typeCount) {\r\n\t\t\t\t\ttypeCount[typeName]++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttypeCount[typeName] = 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Increment weakness counter\r\n\t\t\tfor (const typeName of this.dex.types.names()) {\r\n\t\t\t\t// it's weak to the type\r\n\t\t\t\tif (this.dex.getEffectiveness(typeName, species) > 0) {\r\n\t\t\t\t\ttypeWeaknesses[typeName]++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Increment level 100 counter\r\n\t\t\tif (set.level === 100) numMaxLevelPokemon++;\r\n\r\n\t\t\t// Team details\r\n\t\t\tif (set.ability === 'Snow Warning' || set.moves.includes('hail')) teamDetails.hail = 1;\r\n\t\t\tif (set.ability === 'Drizzle' || set.moves.includes('raindance')) teamDetails.rain = 1;\r\n\t\t\tif (set.ability === 'Sand Stream') teamDetails.sand = 1;\r\n\t\t\tif (set.ability === 'Drought' || set.moves.includes('sunnyday')) teamDetails.sun = 1;\r\n\t\t\tif (set.moves.includes('spikes')) teamDetails.spikes = (teamDetails.spikes || 0) + 1;\r\n\t\t\tif (set.moves.includes('stealthrock')) teamDetails.stealthRock = 1;\r\n\t\t\tif (set.moves.includes('toxicspikes')) teamDetails.toxicSpikes = 1;\r\n\t\t\tif (set.moves.includes('rapidspin')) teamDetails.rapidSpin = 1;\r\n\t\t\tif (set.moves.includes('reflect') && set.moves.includes('lightscreen')) teamDetails.screens = 1;\r\n\t\t}\r\n\t\tif (pokemon.length < this.maxTeamSize && pokemon.length < 12) {\r\n\t\t\tthrow new Error(`Could not build a random team for ${this.format} (seed=${seed})`);\r\n\t\t}\r\n\r\n\t\treturn pokemon;\r\n\t}\r\n}\r\n\r\nexport default RandomGen5Teams;\r\n"],
  "mappings": "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",
  "names": ["RandomGen6Teams", "set"]
}
