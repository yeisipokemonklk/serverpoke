{
  "version": 3,
  "sources": ["../../../../../data/mods/gen1stadium/scripts.ts"],
  "sourcesContent": ["/**\r\n * Stadium mechanics inherit from gen 1 mechanics, but fixes some stuff.\r\n */\r\n\r\nconst SKIP_LASTDAMAGE = new Set([\r\n\t'confuseray', 'conversion', 'counter', 'focusenergy', 'glare', 'haze', 'leechseed', 'lightscreen',\r\n\t'mimic', 'mist', 'poisongas', 'poisonpowder', 'recover', 'reflect', 'rest', 'softboiled',\r\n\t'splash', 'stunspore', 'substitute', 'supersonic', 'teleport', 'thunderwave', 'toxic', 'transform',\r\n]);\r\n\r\nexport const Scripts: ModdedBattleScriptsData = {\r\n\tinherit: 'gen1',\r\n\tgen: 1,\r\n\t// BattlePokemon scripts. Stadium shares gen 1 code but it fixes some problems with it.\r\n\tpokemon: {\r\n\t\tinherit: true,\r\n\t\t// This is run on Stadium after boosts and status changes.\r\n\t\trecalculateStats() {\r\n\t\t\tlet statName: StatIDExceptHP;\r\n\t\t\tfor (statName in this.storedStats) {\r\n\t\t\t\tlet stat = this.species.baseStats[statName];\r\n\t\t\t\tstat = Math.floor(\r\n\t\t\t\t\tMath.floor(\r\n\t\t\t\t\t\t2 * stat + this.set.ivs[statName] + Math.floor(this.set.evs[statName] / 4)\r\n\t\t\t\t\t) * this.level / 100 + 5\r\n\t\t\t\t);\r\n\t\t\t\tthis.baseStoredStats[statName] = this.storedStats[statName] = Math.floor(stat);\r\n\t\t\t\tthis.modifiedStats![statName] = Math.floor(stat);\r\n\t\t\t\t// Re-apply drops, if necessary.\r\n\t\t\t\tif (this.status === 'par' && statName === 'spe') this.modifyStat!('spe', 0.25);\r\n\t\t\t\tif (this.status === 'brn' && statName === 'atk') this.modifyStat!('atk', 0.5);\r\n\t\t\t\tif (this.boosts[statName] !== 0) {\r\n\t\t\t\t\tif (this.boosts[statName] >= 0) {\r\n\t\t\t\t\t\tthis.modifyStat!(statName, [1, 1.5, 2, 2.5, 3, 3.5, 4][this.boosts[statName]]);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.modifyStat!(statName, [100, 66, 50, 40, 33, 28, 25][-this.boosts[statName]] / 100);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.modifiedStats![statName] > 999) {\r\n\t\t\t\t\tthis.modifiedStats![statName] = 999;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t// Stadium's fixed boosting function.\r\n\t\tboostBy(boost) {\r\n\t\t\tlet changed = false;\r\n\t\t\tlet i: BoostID;\r\n\t\t\tfor (i in boost) {\r\n\t\t\t\tlet delta = boost[i];\r\n\t\t\t\tif (delta === undefined) continue;\r\n\t\t\t\tthis.boosts[i] += delta;\r\n\t\t\t\tif (this.boosts[i] > 6) {\r\n\t\t\t\t\tdelta -= this.boosts[i] - 6;\r\n\t\t\t\t\tthis.boosts[i] = 6;\r\n\t\t\t\t}\r\n\t\t\t\tif (this.boosts[i] < -6) {\r\n\t\t\t\t\tdelta -= this.boosts[i] - (-6);\r\n\t\t\t\t\tthis.boosts[i] = -6;\r\n\t\t\t\t}\r\n\t\t\t\tif (delta) changed = true;\r\n\t\t\t}\r\n\t\t\tthis.recalculateStats!();\r\n\t\t\treturn changed;\r\n\t\t},\r\n\t\t// Remove stat recalculation logic from gen 1\r\n\t\tclearBoosts() {\r\n\t\t\tlet i: BoostID;\r\n\t\t\tfor (i in this.boosts) {\r\n\t\t\t\tthis.boosts[i] = 0;\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\tactions: {\r\n\t\tinherit: true,\r\n\t\trunMove(moveOrMoveName, pokemon, targetLoc, sourceEffect) {\r\n\t\t\tconst move = this.dex.getActiveMove(moveOrMoveName);\r\n\t\t\tconst target = this.battle.getTarget(pokemon, move, targetLoc);\r\n\t\t\tif (target?.subFainted) target.subFainted = null;\r\n\r\n\t\t\tthis.battle.setActiveMove(move, pokemon, target);\r\n\r\n\t\t\tif (pokemon.moveThisTurn || !this.battle.runEvent('BeforeMove', pokemon, target, move)) {\r\n\t\t\t\tthis.battle.debug('' + pokemon.fullname + ' move interrupted; movedThisTurn: ' + pokemon.moveThisTurn);\r\n\t\t\t\tthis.battle.clearActiveMove(true);\r\n\t\t\t\t// This is only run for sleep\r\n\t\t\t\tthis.battle.runEvent('AfterMoveSelf', pokemon, target, move);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (move.beforeMoveCallback) {\r\n\t\t\t\tif (move.beforeMoveCallback.call(this.battle, pokemon, target, move)) {\r\n\t\t\t\t\tthis.battle.clearActiveMove(true);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlet lockedMove = this.battle.runEvent('LockMove', pokemon);\r\n\t\t\tif (lockedMove === true) lockedMove = false;\r\n\t\t\tif (\r\n\t\t\t\t!lockedMove &&\r\n\t\t\t\t(!pokemon.volatiles['partialtrappinglock'] || pokemon.volatiles['partialtrappinglock'].locked !== target)\r\n\t\t\t) {\r\n\t\t\t\tpokemon.deductPP(move, null, target);\r\n\t\t\t} else {\r\n\t\t\t\tsourceEffect = move;\r\n\t\t\t}\r\n\t\t\tthis.battle.actions.useMove(move, pokemon, target, sourceEffect);\r\n\t\t},\r\n\t\t// This function deals with AfterMoveSelf events.\r\n\t\t// This leads with partial trapping moves shenanigans after the move has been used.\r\n\t\tuseMove(moveOrMoveName, pokemon, target, sourceEffect) {\r\n\t\t\tconst moveResult = this.useMoveInner(moveOrMoveName, pokemon, target, sourceEffect);\r\n\r\n\t\t\tif (!sourceEffect && this.battle.effect.id) sourceEffect = this.battle.effect;\r\n\t\t\tconst baseMove = this.battle.dex.moves.get(moveOrMoveName);\r\n\t\t\tlet move = this.battle.dex.getActiveMove(baseMove);\r\n\t\t\tif (target === undefined) target = this.battle.getRandomTarget(pokemon, move);\r\n\t\t\tif (move.target === 'self') {\r\n\t\t\t\ttarget = pokemon;\r\n\t\t\t}\r\n\t\t\tif (sourceEffect) move.sourceEffect = sourceEffect.id;\r\n\r\n\t\t\tthis.battle.singleEvent('ModifyMove', move, null, pokemon, target, move, move);\r\n\t\t\tif (baseMove.target !== move.target) {\r\n\t\t\t\t// Target changed in ModifyMove, so we must adjust it here\r\n\t\t\t\ttarget = this.battle.getRandomTarget(pokemon, move);\r\n\t\t\t}\r\n\t\t\tmove = this.battle.runEvent('ModifyMove', pokemon, target, move, move);\r\n\t\t\tif (baseMove.target !== move.target) {\r\n\t\t\t\t// Check again, this shouldn't ever happen on Gen 1.\r\n\t\t\t\ttarget = this.battle.getRandomTarget(pokemon, move);\r\n\t\t\t}\r\n\r\n\t\t\tif (move.id !== 'metronome') {\r\n\t\t\t\tif (move.id !== 'mirrormove' ||\r\n\t\t\t\t\t(!pokemon.side.foe.active[0]?.lastMove || pokemon.side.foe.active[0].lastMove?.id === 'mirrormove')) {\r\n\t\t\t\t\t// The move is our 'final' move (a failed Mirror Move, or any move that isn't Metronome or Mirror Move).\r\n\t\t\t\t\tpokemon.side.lastMove = move;\r\n\t\t\t\t\tpokemon.lastMove = move;\r\n\t\t\t\t\tthis.battle.singleEvent('AfterMove', move, null, pokemon, target, move);\r\n\r\n\t\t\t\t\t// If target fainted\r\n\t\t\t\t\tif (target && target.hp <= 0) {\r\n\t\t\t\t\t\tdelete pokemon.volatiles['partialtrappinglock'];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.battle.runEvent('AfterMoveSelf', pokemon, target, move);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (pokemon.volatiles['mustrecharge']) this.battle.add('-mustrecharge', pokemon);\r\n\r\n\t\t\t\t\t// For partial trapping moves, we are saving the target.\r\n\t\t\t\t\tif (move.volatileStatus === 'partiallytrapped' && target && target.hp > 0) {\r\n\t\t\t\t\t\t// It hit, so let's remove must recharge volatile. Yup, this happens on Stadium.\r\n\t\t\t\t\t\ttarget.removeVolatile('mustrecharge');\r\n\t\t\t\t\t\t// Let's check if the lock exists\r\n\t\t\t\t\t\tif (pokemon.volatiles['partialtrappinglock'] && target.volatiles['partiallytrapped']) {\r\n\t\t\t\t\t\t\t// Here the partialtrappinglock volatile has been already applied\r\n\t\t\t\t\t\t\tif (!pokemon.volatiles['partialtrappinglock'].locked) {\r\n\t\t\t\t\t\t\t\t// If it's the first hit, we save the target\r\n\t\t\t\t\t\t\t\tpokemon.volatiles['partialtrappinglock'].locked = target;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} // If we move to here, the move failed and there's no partial trapping lock\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn moveResult;\r\n\t\t},\r\n\t\t// This is the function that actually uses the move, running ModifyMove events.\r\n\t\t// It uses the move and then deals with the effects after the move.\r\n\t\tuseMoveInner(moveOrMoveName, pokemon, target, sourceEffect) {\r\n\t\t\tif (!sourceEffect && this.battle.effect.id) sourceEffect = this.battle.effect;\r\n\t\t\tconst baseMove = this.battle.dex.moves.get(moveOrMoveName);\r\n\t\t\tlet move = this.battle.dex.getActiveMove(baseMove);\r\n\t\t\tif (target === undefined) target = this.battle.getRandomTarget(pokemon, move);\r\n\t\t\tif (move.target === 'self') {\r\n\t\t\t\ttarget = pokemon;\r\n\t\t\t}\r\n\t\t\tif (sourceEffect) move.sourceEffect = sourceEffect.id;\r\n\r\n\t\t\tthis.battle.setActiveMove(move, pokemon, target);\r\n\r\n\t\t\tthis.battle.singleEvent('ModifyMove', move, null, pokemon, target, move, move);\r\n\t\t\tif (baseMove.target !== move.target) {\r\n\t\t\t\t// Target changed in ModifyMove, so we must adjust it here\r\n\t\t\t\ttarget = this.battle.getRandomTarget(pokemon, move);\r\n\t\t\t}\r\n\t\t\tmove = this.battle.runEvent('ModifyMove', pokemon, target, move, move);\r\n\t\t\tif (baseMove.target !== move.target) {\r\n\t\t\t\t// Check again, this shouldn't ever happen on Gen 1.\r\n\t\t\t\ttarget = this.battle.getRandomTarget(pokemon, move);\r\n\t\t\t\tthis.battle.debug('not a gen 1 mechanic');\r\n\t\t\t}\r\n\t\t\tif (!move) return false;\r\n\r\n\t\t\tlet attrs = '';\r\n\t\t\tif (pokemon.fainted) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif (sourceEffect) attrs += '|[from]' + this.battle.dex.conditions.get(sourceEffect);\r\n\t\t\tthis.battle.addMove('move', pokemon, move.name, target + attrs);\r\n\r\n\t\t\tif (!this.battle.singleEvent('Try', move, null, pokemon, target, move)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif (!this.battle.singleEvent('TryMove', move, null, pokemon, target, move) ||\r\n\t\t\t\t!this.battle.runEvent('TryMove', pokemon, target, move)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tif (move.ignoreImmunity === undefined) {\r\n\t\t\t\tmove.ignoreImmunity = (move.category === 'Status');\r\n\t\t\t}\r\n\r\n\t\t\tlet damage: number | undefined | false | '' = false;\r\n\t\t\tif (!target || target.fainted) {\r\n\t\t\t\tthis.battle.attrLastMove('[notarget]');\r\n\t\t\t\tthis.battle.add('-notarget');\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\t// Store 0 damage for last damage if the move is not in the array.\r\n\t\t\tif (!SKIP_LASTDAMAGE.has(move.id)) this.battle.lastDamage = 0;\r\n\r\n\t\t\tdamage = this.tryMoveHit(target, pokemon, move);\r\n\r\n\t\t\t// Go ahead with results of the used move.\r\n\t\t\tif (damage === false) {\r\n\t\t\t\tthis.battle.singleEvent('MoveFail', move, null, target, pokemon, move);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tif (!move.negateSecondary) {\r\n\t\t\t\tthis.battle.singleEvent('AfterMoveSecondarySelf', move, null, pokemon, target, move);\r\n\t\t\t\tthis.battle.runEvent('AfterMoveSecondarySelf', pokemon, target, move);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\ttryMoveHit(target, pokemon, move) {\r\n\t\t\tlet damage: number | false | undefined = 0;\r\n\r\n\t\t\t// First, check if the target is semi-invulnerable\r\n\t\t\tlet hitResult = this.battle.runEvent('Invulnerability', target, pokemon, move);\r\n\t\t\tif (hitResult === false) {\r\n\t\t\t\tthis.battle.attrLastMove('[miss]');\r\n\t\t\t\tthis.battle.add('-miss', pokemon);\r\n\t\t\t\tif (move.selfdestruct) {\r\n\t\t\t\t\tthis.battle.faint(pokemon, pokemon, move);\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// Then, check if the Pokemon is immune to this move.\r\n\t\t\tif (\r\n\t\t\t\t(!move.ignoreImmunity || (move.ignoreImmunity !== true && !move.ignoreImmunity[move.type])) &&\r\n\t\t\t\t!target.runImmunity(move.type, true)\r\n\t\t\t) {\r\n\t\t\t\tif (move.selfdestruct) {\r\n\t\t\t\t\tthis.battle.faint(pokemon, pokemon, move);\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\thitResult = this.battle.singleEvent('TryImmunity', move, null, target, pokemon, move);\r\n\t\t\tif (hitResult === false) {\r\n\t\t\t\tthis.battle.add('-immune', target);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// Now, let's calculate the accuracy.\r\n\t\t\tlet accuracy = move.accuracy;\r\n\r\n\t\t\t// Partial trapping moves: true accuracy while it lasts\r\n\t\t\tif (pokemon.volatiles['partialtrappinglock']) {\r\n\t\t\t\tif (move.volatileStatus === 'partiallytrapped' && target === pokemon.volatiles['partialtrappinglock'].locked) {\r\n\t\t\t\t\taccuracy = true;\r\n\t\t\t\t} else if (pokemon.volatiles['partialtrappinglock'].locked !== target) {\r\n\t\t\t\t\t// The target switched, therefor, you fail using wrap.\r\n\t\t\t\t\tdelete pokemon.volatiles['partialtrappinglock'];\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// OHKO moves only have a chance to hit if the user is at least as fast as the target\r\n\t\t\tif (move.ohko) {\r\n\t\t\t\tif (target.speed > pokemon.speed) {\r\n\t\t\t\t\tthis.battle.add('-immune', target, '[ohko]');\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Calculate true accuracy for gen 1, which uses 0-255.\r\n\t\t\t// Stadium uses the Gen 2 boost table for accuracy and evasiveness, except for 1/3 instead of 0.33\r\n\t\t\tconst boostTable = [1 / 3, 0.36, 0.43, 0.5, 0.66, 0.75, 1, 1.33, 1.66, 2, 2.33, 2.66, 3];\r\n\t\t\tif (accuracy !== true) {\r\n\t\t\t\taccuracy = Math.floor(accuracy * 255 / 100);\r\n\t\t\t\t// Check also for accuracy modifiers.\r\n\t\t\t\tif (!move.ignoreAccuracy) {\r\n\t\t\t\t\taccuracy = Math.floor(accuracy * boostTable[pokemon.boosts.accuracy + 6]);\r\n\t\t\t\t}\r\n\t\t\t\tif (!move.ignoreEvasion) {\r\n\t\t\t\t\taccuracy = Math.floor(accuracy * boostTable[-target.boosts.evasion + 6]);\r\n\t\t\t\t}\r\n\t\t\t\taccuracy = Math.min(accuracy, 255);\r\n\t\t\t}\r\n\t\t\taccuracy = this.battle.runEvent('Accuracy', target, pokemon, move, accuracy);\r\n\r\n\t\t\t// Stadium fixes the 1/256 accuracy bug.\r\n\t\t\tif (accuracy !== true && !this.battle.randomChance(accuracy + 1, 256)) {\r\n\t\t\t\tthis.battle.attrLastMove('[miss]');\r\n\t\t\t\tthis.battle.add('-miss', pokemon);\r\n\t\t\t\tdamage = false;\r\n\t\t\t\tthis.battle.lastDamage = 0;\r\n\t\t\t}\r\n\r\n\t\t\t// If damage is 0 and not false it means it didn't miss, let's calc.\r\n\t\t\tif (damage !== false) {\r\n\t\t\t\tif (move.multihit) {\r\n\t\t\t\t\tlet hits = move.multihit;\r\n\t\t\t\t\tif (Array.isArray(hits)) {\r\n\t\t\t\t\t\t// Yes, it's hardcoded... meh\r\n\t\t\t\t\t\tif (hits[0] === 2 && hits[1] === 5) {\r\n\t\t\t\t\t\t\thits = this.battle.sample([2, 2, 2, 3, 3, 3, 4, 5]);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\thits = this.battle.random(hits[0], hits[1] + 1);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\thits = Math.floor(hits);\r\n\t\t\t\t\t// In gen 1, all the hits have the same damage for multihits move\r\n\t\t\t\t\tlet moveDamage: number | false | undefined = 0;\r\n\t\t\t\t\tlet i: number;\r\n\t\t\t\t\tfor (i = 0; i < hits && target.hp && pokemon.hp; i++) {\r\n\t\t\t\t\t\tmove.hit = i + 1;\r\n\t\t\t\t\t\tif (move.hit === hits) move.lastHit = true;\r\n\t\t\t\t\t\tmoveDamage = this.moveHit(target, pokemon, move);\r\n\t\t\t\t\t\tif (moveDamage === false) break;\r\n\t\t\t\t\t\tdamage = (moveDamage || 0);\r\n\t\t\t\t\t\t// Move damage is fixed to be the first move's damage\r\n\t\t\t\t\t\tif (i === 0) move.damage = damage;\r\n\t\t\t\t\t\tif (target.subFainted) {\r\n\t\t\t\t\t\t\ti++;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmove.damage = null;\r\n\t\t\t\t\tif (i === 0) return 1;\r\n\t\t\t\t\tthis.battle.add('-hitcount', target, i);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdamage = this.moveHit(target, pokemon, move);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (move.category !== 'Status') target.gotAttacked(move, damage, pokemon);\r\n\r\n\t\t\tif (move.selfdestruct) {\r\n\t\t\t\tthis.battle.faint(pokemon, pokemon, move);\r\n\t\t\t}\r\n\r\n\t\t\t// The move missed.\r\n\t\t\tif (damage === false) {\r\n\t\t\t\t// Delete the partial trap lock if necessary.\r\n\t\t\t\tdelete pokemon.volatiles['partialtrappinglock'];\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif (move.ohko) this.battle.add('-ohko');\r\n\r\n\t\t\tif (!move.negateSecondary) {\r\n\t\t\t\tthis.battle.singleEvent('AfterMoveSecondary', move, null, target, pokemon, move);\r\n\t\t\t\tthis.battle.runEvent('AfterMoveSecondary', target, pokemon, move);\r\n\t\t\t}\r\n\r\n\t\t\treturn damage;\r\n\t\t},\r\n\t\tmoveHit(target, pokemon, moveOrMoveName, moveData, isSecondary, isSelf) {\r\n\t\t\tlet damage: number | false | null | undefined = 0;\r\n\t\t\tconst move = this.dex.getActiveMove(moveOrMoveName);\r\n\r\n\t\t\tif (!isSecondary && !isSelf) this.battle.setActiveMove(move, pokemon, target);\r\n\t\t\tlet hitResult: number | boolean = true;\r\n\t\t\tif (!moveData) moveData = move;\r\n\r\n\t\t\tif (move.ignoreImmunity === undefined) {\r\n\t\t\t\tmove.ignoreImmunity = (move.category === 'Status');\r\n\t\t\t}\r\n\r\n\t\t\tif (target) {\r\n\t\t\t\thitResult = this.battle.singleEvent('TryHit', moveData, {}, target, pokemon, move);\r\n\r\n\t\t\t\t// Partial trapping moves still apply their volatile to Pok\u00E9mon behind a Sub\r\n\t\t\t\tconst targetHadSub = !!target.volatiles['substitute'];\r\n\t\t\t\tif (targetHadSub && moveData.volatileStatus && moveData.volatileStatus === 'partiallytrapped') {\r\n\t\t\t\t\ttarget.addVolatile(moveData.volatileStatus, pokemon, move);\r\n\t\t\t\t\tif (!pokemon.volatiles['partialtrappinglock'] || pokemon.volatiles['partialtrappinglock'].duration > 1) {\r\n\t\t\t\t\t\ttarget.volatiles[moveData.volatileStatus].duration = 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!hitResult) {\r\n\t\t\t\t\tif (hitResult === false) this.battle.add('-fail', target);\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Only run the hit events for the hit itself, not the secondary or self hits\r\n\t\t\t\tif (!isSelf && !isSecondary) {\r\n\t\t\t\t\thitResult = this.battle.runEvent('TryHit', target, pokemon, move);\r\n\t\t\t\t\tif (!hitResult) {\r\n\t\t\t\t\t\tif (hitResult === false) this.battle.add('-fail', target);\r\n\t\t\t\t\t\t// Special Substitute hit flag\r\n\t\t\t\t\t\tif (hitResult !== 0) {\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!this.battle.runEvent('TryFieldHit', target, pokemon, move)) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (isSecondary && !moveData.self) {\r\n\t\t\t\t\thitResult = this.battle.runEvent('TrySecondaryHit', target, pokemon, moveData);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (hitResult === 0) {\r\n\t\t\t\t\ttarget = null;\r\n\t\t\t\t} else if (!hitResult) {\r\n\t\t\t\t\tif (hitResult === false) this.battle.add('-fail', target);\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (target) {\r\n\t\t\t\tlet didSomething = false;\r\n\r\n\t\t\t\tdamage = this.getDamage(pokemon, target, moveData);\r\n\t\t\t\tif (damage && damage > target.hp) {\r\n\t\t\t\t\tdamage = target.hp;\r\n\t\t\t\t}\r\n\t\t\t\tif ((damage || damage === 0) && !target.fainted) {\r\n\t\t\t\t\tdamage = this.battle.damage(damage, target, pokemon, move);\r\n\t\t\t\t\tif (!(damage || damage === 0)) return false;\r\n\t\t\t\t\tdidSomething = true;\r\n\t\t\t\t} else if (damage === false && typeof hitResult === 'undefined') {\r\n\t\t\t\t\tthis.battle.add('-fail', target);\r\n\t\t\t\t}\r\n\t\t\t\tif (damage === false || damage === null) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif (moveData.boosts && !target.fainted) {\r\n\t\t\t\t\tthis.battle.boost(moveData.boosts, target, pokemon, move);\r\n\t\t\t\t}\r\n\t\t\t\tif (moveData.heal && !target.fainted) {\r\n\t\t\t\t\tconst d = target.heal(Math.floor(target.maxhp * moveData.heal[0] / moveData.heal[1]));\r\n\t\t\t\t\tif (!d) {\r\n\t\t\t\t\t\tthis.battle.add('-fail', target);\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.battle.add('-heal', target, target.getHealth);\r\n\t\t\t\t\tdidSomething = true;\r\n\t\t\t\t}\r\n\t\t\t\tif (moveData.status) {\r\n\t\t\t\t\tif (!target.status) {\r\n\t\t\t\t\t\ttarget.setStatus(moveData.status, pokemon, move);\r\n\t\t\t\t\t\ttarget.recalculateStats!();\r\n\t\t\t\t\t} else if (!isSecondary) {\r\n\t\t\t\t\t\tif (target.status === moveData.status) {\r\n\t\t\t\t\t\t\tthis.battle.add('-fail', target, target.status);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthis.battle.add('-fail', target);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdidSomething = true;\r\n\t\t\t\t}\r\n\t\t\t\tif (moveData.forceStatus) {\r\n\t\t\t\t\tif (target.setStatus(moveData.forceStatus, pokemon, move)) {\r\n\t\t\t\t\t\ttarget.recalculateStats!();\r\n\t\t\t\t\t\tdidSomething = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (moveData.volatileStatus) {\r\n\t\t\t\t\tif (target.addVolatile(moveData.volatileStatus, pokemon, move)) {\r\n\t\t\t\t\t\tdidSomething = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (moveData.sideCondition) {\r\n\t\t\t\t\tif (target.side.addSideCondition(moveData.sideCondition, pokemon, move)) {\r\n\t\t\t\t\t\tdidSomething = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (moveData.pseudoWeather) {\r\n\t\t\t\t\tif (this.battle.field.addPseudoWeather(moveData.pseudoWeather, pokemon, move)) {\r\n\t\t\t\t\t\tdidSomething = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// Hit events\r\n\t\t\t\thitResult = this.battle.singleEvent('Hit', moveData, {}, target, pokemon, move);\r\n\t\t\t\tif (!isSelf && !isSecondary) {\r\n\t\t\t\t\tthis.battle.runEvent('Hit', target, pokemon, move);\r\n\t\t\t\t}\r\n\t\t\t\tif (!hitResult && !didSomething) {\r\n\t\t\t\t\tif (hitResult === false) this.battle.add('-fail', target);\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Here's where self effects are applied.\r\n\t\t\tif (moveData.self) {\r\n\t\t\t\tthis.moveHit(pokemon, pokemon, move, moveData.self, isSecondary, true);\r\n\t\t\t}\r\n\r\n\t\t\t// Now we can save the partial trapping damage.\r\n\t\t\tif (pokemon.volatiles['partialtrappinglock']) {\r\n\t\t\t\tpokemon.volatiles['partialtrappinglock'].damage = this.battle.lastDamage;\r\n\t\t\t}\r\n\r\n\t\t\t// Apply move secondaries.\r\n\t\t\tif (moveData.secondaries && target && target.hp > 0) {\r\n\t\t\t\tfor (const secondary of moveData.secondaries) {\r\n\t\t\t\t\t// Multi-hit moves only roll for status once\r\n\t\t\t\t\tif (!move.multihit || move.lastHit) {\r\n\t\t\t\t\t\t// We check here whether to negate the probable secondary status if it's para, burn, or freeze.\r\n\t\t\t\t\t\t// In the game, this is checked and if true, the random number generator is not called.\r\n\t\t\t\t\t\t// That means that a move that does not share the type of the target can status it.\r\n\t\t\t\t\t\t// If a move that was not fire-type would exist on Gen 1, it could burn a Pok\u00E9mon.\r\n\t\t\t\t\t\tif (!(secondary.status && ['par', 'brn', 'frz'].includes(secondary.status) && target.hasType(move.type))) {\r\n\t\t\t\t\t\t\tconst effectChance = Math.floor((secondary.chance || 100) * 255 / 100);\r\n\t\t\t\t\t\t\tif (typeof secondary.chance === 'undefined' || this.battle.randomChance(effectChance + 1, 256)) {\r\n\t\t\t\t\t\t\t\tthis.moveHit(target, pokemon, move, secondary, true, isSelf);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (move.selfSwitch && pokemon.hp) {\r\n\t\t\t\tpokemon.switchFlag = move.selfSwitch === true ? true : this.dex.toID(move.selfSwitch);\r\n\t\t\t}\r\n\r\n\t\t\treturn damage;\r\n\t\t},\r\n\t\tgetDamage(source, target, move, suppressMessages) {\r\n\t\t\t// First of all, we get the move.\r\n\t\t\tif (typeof move === 'string') {\r\n\t\t\t\tmove = this.dex.getActiveMove(move);\r\n\t\t\t} else if (typeof move === 'number') {\r\n\t\t\t\tmove = {\r\n\t\t\t\t\tbasePower: move,\r\n\t\t\t\t\ttype: '???',\r\n\t\t\t\t\tcategory: 'Physical',\r\n\t\t\t\t\twillCrit: false,\r\n\t\t\t\t\tflags: {},\r\n\t\t\t\t} as ActiveMove;\r\n\t\t\t}\r\n\r\n\t\t\t// Let's see if the target is immune to the move.\r\n\t\t\tif (!move.ignoreImmunity || (move.ignoreImmunity !== true && !move.ignoreImmunity[move.type])) {\r\n\t\t\t\tif (!target.runImmunity(move.type, true)) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Is it an OHKO move?\r\n\t\t\tif (move.ohko) {\r\n\t\t\t\treturn 65535;\r\n\t\t\t}\r\n\r\n\t\t\t// We edit the damage through move's damage callback if necessary.\r\n\t\t\tif (move.damageCallback) {\r\n\t\t\t\treturn move.damageCallback.call(this.battle, source, target);\r\n\t\t\t}\r\n\r\n\t\t\t// We take damage from damage=level moves (seismic toss).\r\n\t\t\tif (move.damage === 'level') {\r\n\t\t\t\treturn source.level;\r\n\t\t\t}\r\n\r\n\t\t\t// If there's a fix move damage, we return that.\r\n\t\t\tif (move.damage) {\r\n\t\t\t\treturn move.damage;\r\n\t\t\t}\r\n\r\n\t\t\t// If it's the first hit on a Normal-type partially trap move, it hits Ghosts anyways but damage is 0.\r\n\t\t\tif (move.volatileStatus === 'partiallytrapped' && move.type === 'Normal' && target.hasType('Ghost')) {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\r\n\t\t\t// Let's check if we are in middle of a partial trap sequence to return the previous damage.\r\n\t\t\tif (source.volatiles['partialtrappinglock'] && (target === source.volatiles['partialtrappinglock'].locked)) {\r\n\t\t\t\treturn source.volatiles['partialtrappinglock'].damage;\r\n\t\t\t}\r\n\r\n\t\t\t// We check the category and typing to calculate later on the damage.\r\n\t\t\tif (!move.category) move.category = 'Physical';\r\n\t\t\t// '???' is typeless damage: used for Struggle and Confusion etc\r\n\t\t\tif (!move.type) move.type = '???';\r\n\t\t\tconst type = move.type;\r\n\r\n\t\t\t// We get the base power and apply basePowerCallback if necessary.\r\n\t\t\tlet basePower: number | false | null = move.basePower;\r\n\t\t\tif (move.basePowerCallback) {\r\n\t\t\t\tbasePower = move.basePowerCallback.call(this.battle, source, target, move);\r\n\t\t\t}\r\n\t\t\tif (!basePower) {\r\n\t\t\t\treturn basePower === 0 ? undefined : basePower;\r\n\t\t\t}\r\n\t\t\tbasePower = this.battle.clampIntRange(basePower, 1);\r\n\r\n\t\t\t// Checking for the move's Critical Hit possibility. We check if it's a 100% crit move, otherwise we calculate the chance.\r\n\t\t\tlet isCrit = move.willCrit || false;\r\n\t\t\tif (!isCrit) {\r\n\t\t\t\t// In Stadium, the critical chance is based on speed.\r\n\t\t\t\t// First, we get the base speed and store it. Then we add 76. This is our current crit chance.\r\n\t\t\t\tlet critChance = source.species.baseStats['spe'] + 76;\r\n\r\n\t\t\t\t// Now we right logical shift it two places, essentially dividing by 4 and flooring it.\r\n\t\t\t\tcritChance = critChance >> 2;\r\n\r\n\t\t\t\t// Now we check for focus energy volatile.\r\n\t\t\t\tif (source.volatiles['focusenergy']) {\r\n\t\t\t\t\t// If it exists, crit chance is multiplied by 4 and floored with a logical left shift.\r\n\t\t\t\t\tcritChance = critChance << 2;\r\n\t\t\t\t\t// Then we add 160.\r\n\t\t\t\t\tcritChance += 160;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// If it is not active, we left shift it by 1.\r\n\t\t\t\t\tcritChance = critChance << 1;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Now we check for the move's critical hit ratio.\r\n\t\t\t\tif (move.critRatio === 2) {\r\n\t\t\t\t\t// High crit ratio, we multiply the result so far by 4.\r\n\t\t\t\t\tcritChance = critChance << 2;\r\n\t\t\t\t} else if (move.critRatio === 1) {\r\n\t\t\t\t\t// Normal hit ratio, we divide the crit chance by 2 and floor the result again.\r\n\t\t\t\t\tcritChance = critChance >> 1;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Now we make sure it's a number between 1 and 255.\r\n\t\t\t\tcritChance = this.battle.clampIntRange(critChance, 1, 255);\r\n\r\n\t\t\t\t// Last, we check deppending on ratio if the move critical hits or not.\r\n\t\t\t\t// We compare our critical hit chance against a random number between 0 and 255.\r\n\t\t\t\t// If the random number is lower, we get a critical hit. This means there is always a 1/255 chance of not hitting critically.\r\n\t\t\t\tif (critChance > 0) {\r\n\t\t\t\t\tisCrit = this.battle.randomChance(critChance, 256);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// There is a critical hit.\r\n\t\t\tif (isCrit && this.battle.runEvent('CriticalHit', target, null, move)) {\r\n\t\t\t\ttarget.getMoveHitData(move).crit = true;\r\n\t\t\t}\r\n\r\n\t\t\t// Happens after crit calculation.\r\n\t\t\tif (basePower) {\r\n\t\t\t\tbasePower = this.battle.runEvent('BasePower', source, target, move, basePower);\r\n\t\t\t\tif (basePower && move.basePowerModifier) {\r\n\t\t\t\t\tbasePower *= move.basePowerModifier;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!basePower) return 0;\r\n\t\t\tbasePower = this.battle.clampIntRange(basePower, 1);\r\n\r\n\t\t\t// We now check attacker's and defender's stats.\r\n\t\t\tlet level = source.level;\r\n\t\t\tconst attacker = move.overrideOffensivePokemon === 'target' ? target : source;\r\n\t\t\tconst defender = move.overrideDefensivePokemon === 'source' ? source : target;\r\n\r\n\t\t\tconst isPhysical = move.category === 'Physical';\r\n\t\t\tconst atkType: StatIDExceptHP = move.overrideOffensiveStat || (isPhysical ? 'atk' : 'spa');\r\n\t\t\tconst defType: StatIDExceptHP = move.overrideDefensiveStat || (isPhysical ? 'def' : 'spd');\r\n\r\n\t\t\tlet attack = attacker.getStat(atkType);\r\n\t\t\tlet defense = defender.getStat(defType);\r\n\r\n\t\t\t// In gen 1, screen effect is applied here.\r\n\t\t\tif ((defType === 'def' && defender.volatiles['reflect']) || (defType === 'spd' && defender.volatiles['lightscreen'])) {\r\n\t\t\t\tthis.battle.debug('Screen doubling (Sp)Def');\r\n\t\t\t\tdefense *= 2;\r\n\t\t\t\tdefense = this.battle.clampIntRange(defense, 1, 1998);\r\n\t\t\t}\r\n\r\n\t\t\t// In the event of a critical hit, the offense and defense changes are ignored.\r\n\t\t\t// This includes both boosts and screens.\r\n\t\t\t// Also, level is doubled in damage calculation.\r\n\t\t\tif (isCrit) {\r\n\t\t\t\tmove.ignoreOffensive = true;\r\n\t\t\t\tmove.ignoreDefensive = true;\r\n\t\t\t\tlevel *= 2;\r\n\t\t\t\tif (!suppressMessages) this.battle.add('-crit', target);\r\n\t\t\t}\r\n\r\n\t\t\tif (move.ignoreOffensive) {\r\n\t\t\t\tthis.battle.debug('Negating (sp)atk boost/penalty.');\r\n\t\t\t\tattack = attacker.getStat(atkType, true);\r\n\t\t\t}\r\n\r\n\t\t\tif (move.ignoreDefensive) {\r\n\t\t\t\tthis.battle.debug('Negating (sp)def boost/penalty.');\r\n\t\t\t\tdefense = target.getStat(defType, true);\r\n\t\t\t}\r\n\r\n\t\t\t// When either attack or defense are higher than 256, they are both divided by 4 and moded by 256.\r\n\t\t\t// This is what causes the rollover bugs.\r\n\t\t\tif (attack >= 256 || defense >= 256) {\r\n\t\t\t\tattack = this.battle.clampIntRange(Math.floor(attack / 4) % 256, 1);\r\n\t\t\t\t// Defense isn't checked on the cartridge, but we don't want those / 0 bugs on the sim.\r\n\t\t\t\tdefense = this.battle.clampIntRange(Math.floor(defense / 4) % 256, 1);\r\n\t\t\t}\r\n\r\n\t\t\t// Self destruct moves halve defense at this point.\r\n\t\t\tif (move.selfdestruct && defType === 'def') {\r\n\t\t\t\tdefense = this.battle.clampIntRange(Math.floor(defense / 2), 1);\r\n\t\t\t}\r\n\r\n\t\t\t// Let's go with the calculation now that we have what we need.\r\n\t\t\t// We do it step by step just like the game does.\r\n\t\t\tlet damage = level * 2;\r\n\t\t\tdamage = Math.floor(damage / 5);\r\n\t\t\tdamage += 2;\r\n\t\t\tdamage *= basePower;\r\n\t\t\tdamage *= attack;\r\n\t\t\tdamage = Math.floor(damage / defense);\r\n\t\t\tdamage = this.battle.clampIntRange(Math.floor(damage / 50), 0, 997);\r\n\t\t\tdamage += 2;\r\n\r\n\t\t\t// STAB damage bonus, the \"???\" type never gets STAB\r\n\t\t\tif (type !== '???' && source.hasType(type)) {\r\n\t\t\t\tdamage += Math.floor(damage / 2);\r\n\t\t\t}\r\n\r\n\t\t\t// Type effectiveness.\r\n\t\t\t// In Gen 1, type effectiveness is applied against each of the target's types.\r\n\t\t\tfor (const targetType of target.types) {\r\n\t\t\t\tconst typeMod = this.battle.dex.getEffectiveness(type, targetType);\r\n\t\t\t\tif (typeMod > 0) {\r\n\t\t\t\t\t// Super effective against targetType\r\n\t\t\t\t\tdamage *= 20;\r\n\t\t\t\t\tdamage = Math.floor(damage / 10);\r\n\t\t\t\t}\r\n\t\t\t\tif (typeMod < 0) {\r\n\t\t\t\t\t// Not very effective against targetType\r\n\t\t\t\t\tdamage *= 5;\r\n\t\t\t\t\tdamage = Math.floor(damage / 10);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tconst totalTypeMod = target.runEffectiveness(move);\r\n\t\t\tif (totalTypeMod > 0) {\r\n\t\t\t\tif (!suppressMessages) this.battle.add('-supereffective', target);\r\n\t\t\t}\r\n\t\t\tif (totalTypeMod < 0) {\r\n\t\t\t\tif (!suppressMessages) this.battle.add('-resisted', target);\r\n\t\t\t}\r\n\r\n\t\t\t// If damage becomes 0, the move is made to miss.\r\n\t\t\t// This occurs when damage was either 2 or 3 prior to applying STAB/Type matchup, and target is 4x resistant to the move.\r\n\t\t\tif (damage === 0) return damage;\r\n\r\n\t\t\t// Apply random factor if damage is greater than 1\r\n\t\t\tif (damage > 1) {\r\n\t\t\t\tdamage *= this.battle.random(217, 256);\r\n\t\t\t\tdamage = Math.floor(damage / 255);\r\n\t\t\t}\r\n\r\n\t\t\t// We are done, this is the final damage.\r\n\t\t\treturn Math.floor(damage);\r\n\t\t},\r\n\t},\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
