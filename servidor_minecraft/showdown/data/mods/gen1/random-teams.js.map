{
  "version": 3,
  "sources": ["../../../../../data/mods/gen1/random-teams.ts"],
  "sourcesContent": ["import RandomGen2Teams from '../gen2/random-teams';\r\nimport {Utils} from '../../../lib';\r\n\r\ninterface HackmonsCupEntry {\r\n\ttypes: string[];\r\n\tbaseStats: StatsTable;\r\n}\r\n\r\ninterface Gen1RandomBattleSpecies {\r\n\tlevel?: number;\r\n\tmoves?: ID[];\r\n\tessentialMoves?: ID[];\r\n\texclusiveMoves?: ID[];\r\n\tcomboMoves?: ID[];\r\n}\r\n\r\nexport class RandomGen1Teams extends RandomGen2Teams {\r\n\trandomData: {[species: string]: Gen1RandomBattleSpecies} = require('./random-data.json');\r\n\r\n\t// Challenge Cup or CC teams are basically fully random teams.\r\n\trandomCCTeam() {\r\n\t\tthis.enforceNoDirectCustomBanlistChanges();\r\n\r\n\t\tconst team = [];\r\n\r\n\t\tconst randomN = this.randomNPokemon(this.maxTeamSize, this.forceMonotype);\r\n\r\n\t\tfor (const pokemon of randomN) {\r\n\t\t\tconst species = this.dex.species.get(pokemon);\r\n\r\n\t\t\t// Level balance: calculate directly from stats rather than using some silly lookup table.\r\n\t\t\tconst mbstmin = 1307;\r\n\t\t\tconst stats = species.baseStats;\r\n\r\n\t\t\t// Modified base stat total assumes 15 DVs, 255 EVs in every stat\r\n\t\t\tlet mbst = (stats[\"hp\"] * 2 + 30 + 63 + 100) + 10;\r\n\t\t\tmbst += (stats[\"atk\"] * 2 + 30 + 63 + 100) + 5;\r\n\t\t\tmbst += (stats[\"def\"] * 2 + 30 + 63 + 100) + 5;\r\n\t\t\tmbst += (stats[\"spa\"] * 2 + 30 + 63 + 100) + 5;\r\n\t\t\tmbst += (stats[\"spd\"] * 2 + 30 + 63 + 100) + 5;\r\n\t\t\tmbst += (stats[\"spe\"] * 2 + 30 + 63 + 100) + 5;\r\n\r\n\t\t\tlet level;\r\n\t\t\tif (this.adjustLevel) {\r\n\t\t\t\tlevel = this.adjustLevel;\r\n\t\t\t} else {\r\n\t\t\t\tlevel = Math.floor(100 * mbstmin / mbst); // Initial level guess will underestimate\r\n\r\n\t\t\t\twhile (level < 100) {\r\n\t\t\t\t\tmbst = Math.floor((stats[\"hp\"] * 2 + 30 + 63 + 100) * level / 100 + 10);\r\n\t\t\t\t\t// Since damage is roughly proportional to lvl\r\n\t\t\t\t\tmbst += Math.floor(((stats[\"atk\"] * 2 + 30 + 63 + 100) * level / 100 + 5) * level / 100);\r\n\t\t\t\t\tmbst += Math.floor((stats[\"def\"] * 2 + 30 + 63 + 100) * level / 100 + 5);\r\n\t\t\t\t\tmbst += Math.floor(((stats[\"spa\"] * 2 + 30 + 63 + 100) * level / 100 + 5) * level / 100);\r\n\t\t\t\t\tmbst += Math.floor((stats[\"spd\"] * 2 + 30 + 63 + 100) * level / 100 + 5);\r\n\t\t\t\t\tmbst += Math.floor((stats[\"spe\"] * 2 + 30 + 63 + 100) * level / 100 + 5);\r\n\r\n\t\t\t\t\tif (mbst >= mbstmin) break;\r\n\t\t\t\t\tlevel++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Random DVs.\r\n\t\t\tconst ivs = {\r\n\t\t\t\thp: 0,\r\n\t\t\t\tatk: this.random(16),\r\n\t\t\t\tdef: this.random(16),\r\n\t\t\t\tspa: this.random(16),\r\n\t\t\t\tspd: 0,\r\n\t\t\t\tspe: this.random(16),\r\n\t\t\t};\r\n\t\t\tivs[\"hp\"] = (ivs[\"atk\"] % 2) * 16 + (ivs[\"def\"] % 2) * 8 + (ivs[\"spe\"] % 2) * 4 + (ivs[\"spa\"] % 2) * 2;\r\n\t\t\tivs[\"atk\"] *= 2;\r\n\t\t\tivs[\"def\"] *= 2;\r\n\t\t\tivs[\"spa\"] *= 2;\r\n\t\t\tivs[\"spd\"] = ivs[\"spa\"];\r\n\t\t\tivs[\"spe\"] *= 2;\r\n\r\n\t\t\t// Maxed EVs.\r\n\t\t\tconst evs = {hp: 255, atk: 255, def: 255, spa: 255, spd: 255, spe: 255};\r\n\r\n\t\t\t// Four random unique moves from movepool. don't worry about \"attacking\" or \"viable\".\r\n\t\t\t// Since Gens 1 and 2 learnsets are shared, we need to weed out Gen 2 moves.\r\n\t\t\tconst pool = [...this.dex.species.getMovePool(species.id)];\r\n\r\n\t\t\tteam.push({\r\n\t\t\t\tname: species.baseSpecies,\r\n\t\t\t\tspecies: species.name,\r\n\t\t\t\tmoves: this.multipleSamplesNoReplace(pool, 4),\r\n\t\t\t\tgender: false,\r\n\t\t\t\tability: 'No Ability',\r\n\t\t\t\tevs: evs,\r\n\t\t\t\tivs: ivs,\r\n\t\t\t\titem: '',\r\n\t\t\t\tlevel,\r\n\t\t\t\thappiness: 0,\r\n\t\t\t\tshiny: false,\r\n\t\t\t\tnature: 'Serious',\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn team;\r\n\t}\r\n\r\n\t// Random team generation for Gen 1 Random Battles.\r\n\trandomTeam() {\r\n\t\tthis.enforceNoDirectCustomBanlistChanges();\r\n\r\n\t\t// Get what we need ready.\r\n\t\tconst seed = this.prng.seed;\r\n\t\tconst ruleTable = this.dex.formats.getRuleTable(this.format);\r\n\t\tconst pokemon: RandomTeamsTypes.RandomSet[] = [];\r\n\r\n\t\t// For Monotype\r\n\t\tconst isMonotype = !!this.forceMonotype || ruleTable.has('sametypeclause');\r\n\t\tconst typePool = this.dex.types.names();\r\n\t\tconst type = this.forceMonotype || this.sample(typePool);\r\n\r\n\t\t/** Pok\u00E9mon that are not wholly incompatible with the team, but still pretty bad */\r\n\t\tconst rejectedButNotInvalidPool: string[] = [];\r\n\r\n\t\t// Now let's store what we are getting.\r\n\t\tconst typeCount: {[k: string]: number} = {};\r\n\t\tconst weaknessCount: {[k: string]: number} = {Electric: 0, Psychic: 0, Water: 0, Ice: 0, Ground: 0, Fire: 0};\r\n\t\tlet numMaxLevelPokemon = 0;\r\n\r\n\t\tconst pokemonPool = Object.keys(this.getPokemonPool(type, pokemon, isMonotype, Object.keys(this.randomData))[0]);\r\n\t\twhile (pokemonPool.length && pokemon.length < this.maxTeamSize) {\r\n\t\t\tconst species = this.dex.species.get(this.sampleNoReplace(pokemonPool));\r\n\t\t\tif (!species.exists) continue;\r\n\r\n\t\t\t// Only one Ditto is allowed per battle in Generation 1,\r\n\t\t\t// as it can cause an endless battle if two Dittos are forced\r\n\t\t\t// to face each other.\r\n\t\t\tif (species.id === 'ditto' && this.battleHasDitto) continue;\r\n\r\n\t\t\t// Dynamically scale limits for different team sizes. The default and minimum value is 1.\r\n\t\t\tconst limitFactor = Math.round(this.maxTeamSize / 6) || 1;\r\n\r\n\t\t\tlet skip = false;\r\n\r\n\t\t\tif (!isMonotype && !this.forceMonotype) {\r\n\t\t\t\t// Limit two of any type\r\n\t\t\t\tfor (const typeName of species.types) {\r\n\t\t\t\t\tif (typeCount[typeName] >= 2 * limitFactor) {\r\n\t\t\t\t\t\tskip = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (skip) {\r\n\t\t\t\t\trejectedButNotInvalidPool.push(species.id);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// We need a weakness count of spammable attacks to avoid being swept by those.\r\n\t\t\t// Spammable attacks are: Thunderbolt, Psychic, Surf, Blizzard, Earthquake, Fire Blast.\r\n\t\t\tconst pokemonWeaknesses = [];\r\n\t\t\tfor (const typeName in weaknessCount) {\r\n\t\t\t\tconst increaseCount = this.dex.getImmunity(typeName, species) && this.dex.getEffectiveness(typeName, species) > 0;\r\n\t\t\t\tif (!increaseCount) continue;\r\n\t\t\t\tif (weaknessCount[typeName] >= 2 * limitFactor) {\r\n\t\t\t\t\tskip = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tpokemonWeaknesses.push(typeName);\r\n\t\t\t}\r\n\r\n\t\t\tif (skip) {\r\n\t\t\t\trejectedButNotInvalidPool.push(species.id);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\t// Limit one level 100 Pokemon\r\n\t\t\tif (!this.adjustLevel && (this.getLevel(species) === 100) && numMaxLevelPokemon >= limitFactor) {\r\n\t\t\t\trejectedButNotInvalidPool.push(species.id);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\t// The set passes the limitations.\r\n\t\t\tpokemon.push(this.randomSet(species));\r\n\r\n\t\t\t// Now let's increase the counters.\r\n\t\t\t// Type counter.\r\n\t\t\tfor (const typeName of species.types) {\r\n\t\t\t\tif (typeCount[typeName]) {\r\n\t\t\t\t\ttypeCount[typeName]++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttypeCount[typeName] = 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Weakness counter.\r\n\t\t\tfor (const weakness of pokemonWeaknesses) {\r\n\t\t\t\tweaknessCount[weakness]++;\r\n\t\t\t}\r\n\r\n\t\t\t// Increment level 100 counter\r\n\t\t\tif (this.getLevel(species) === 100) numMaxLevelPokemon++;\r\n\r\n\t\t\t// Ditto check\r\n\t\t\tif (species.id === 'ditto') this.battleHasDitto = true;\r\n\t\t}\r\n\r\n\t\t// if we don't have enough Pok\u00E9mon, go back to rejects, which are already known to not be invalid.\r\n\t\twhile (pokemon.length < this.maxTeamSize && rejectedButNotInvalidPool.length) {\r\n\t\t\tconst species = this.sampleNoReplace(rejectedButNotInvalidPool);\r\n\t\t\tpokemon.push(this.randomSet(species));\r\n\t\t}\r\n\r\n\t\tif (pokemon.length < this.maxTeamSize && pokemon.length < 12 && !isMonotype) {\r\n\t\t\tthrow new Error(`Could not build a random team for ${this.format} (seed=${seed})`);\r\n\t\t}\r\n\r\n\t\treturn pokemon;\r\n\t}\r\n\r\n\t/**\r\n\t * Random set generation for Gen 1 Random Battles.\r\n\t */\r\n\trandomSet(species: string | Species): RandomTeamsTypes.RandomSet {\r\n\t\tspecies = this.dex.species.get(species);\r\n\t\tif (!species.exists) species = this.dex.species.get('pikachu'); // Because Gen 1.\r\n\r\n\t\tconst data = this.randomData[species.id];\r\n\t\tconst movePool = data.moves?.slice() || [];\r\n\t\tconst moves = new Set<string>();\r\n\r\n\t\t// Either add all moves or add none\r\n\t\tif (data.comboMoves && data.comboMoves.length <= this.maxMoveCount && this.randomChance(1, 2)) {\r\n\t\t\tfor (const m of data.comboMoves) moves.add(m);\r\n\t\t}\r\n\r\n\t\t// Add one of the semi-mandatory moves\r\n\t\t// Often, these are used so that the Pokemon only gets one of the less useful moves\r\n\t\t// This is added before the essential moves so that combos containing three moves can roll an exclusive move\r\n\t\tif (moves.size < this.maxMoveCount && data.exclusiveMoves) {\r\n\t\t\tmoves.add(this.sample(data.exclusiveMoves));\r\n\t\t}\r\n\r\n\t\t// Add the mandatory moves.\r\n\t\tif (moves.size < this.maxMoveCount && data.essentialMoves) {\r\n\t\t\tfor (const moveid of data.essentialMoves) {\r\n\t\t\t\tmoves.add(moveid);\r\n\t\t\t\tif (moves.size === this.maxMoveCount) break;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\twhile (moves.size < this.maxMoveCount && movePool.length) {\r\n\t\t\t// Choose next 4 moves from learnset/viable moves and add them to moves list:\r\n\t\t\twhile (moves.size < this.maxMoveCount && movePool.length) {\r\n\t\t\t\tconst moveid = this.sampleNoReplace(movePool);\r\n\t\t\t\tmoves.add(moveid);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst level = this.getLevel(species);\r\n\r\n\t\tconst evs = {hp: 255, atk: 255, def: 255, spa: 255, spd: 255, spe: 255};\r\n\t\tconst ivs = {hp: 30, atk: 30, def: 30, spa: 30, spd: 30, spe: 30};\r\n\r\n\t\t// Should be able to use Substitute four times from full HP without fainting\r\n\t\tif (moves.has('substitute')) {\r\n\t\t\twhile (evs.hp > 3) {\r\n\t\t\t\tconst hp = Math.floor(Math.floor(2 * species.baseStats.hp + ivs.hp + Math.floor(evs.hp / 4) + 100) * level / 100 + 10);\r\n\t\t\t\tif (hp % 4 !== 0) break;\r\n\t\t\t\tevs.hp -= 4;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Minimize confusion damage\r\n\t\tconst noAttackStatMoves = [...moves].every(m => {\r\n\t\t\tconst move = this.dex.moves.get(m);\r\n\t\t\tif (move.damageCallback || move.damage) return true;\r\n\t\t\treturn move.category !== 'Physical';\r\n\t\t});\r\n\t\tif (noAttackStatMoves && !moves.has('mimic') && !moves.has('transform')) {\r\n\t\t\tevs.atk = 0;\r\n\t\t\t// We don't want to lower the HP DV/IV\r\n\t\t\tivs.atk = 2;\r\n\t\t}\r\n\r\n\t\t// shuffle moves to add more randomness to camomons\r\n\t\tconst shuffledMoves = Array.from(moves);\r\n\t\tthis.prng.shuffle(shuffledMoves);\r\n\r\n\t\treturn {\r\n\t\t\tname: species.name,\r\n\t\t\tspecies: species.name,\r\n\t\t\tmoves: shuffledMoves,\r\n\t\t\tability: 'No Ability',\r\n\t\t\tevs,\r\n\t\t\tivs,\r\n\t\t\titem: '',\r\n\t\t\tlevel,\r\n\t\t\tshiny: false,\r\n\t\t\tgender: false,\r\n\t\t};\r\n\t}\r\n\r\n\trandomHCTeam(): PokemonSet[] {\r\n\t\tthis.enforceNoDirectCustomBanlistChanges();\r\n\r\n\t\tconst team = [];\r\n\r\n\t\tconst movePool = [...this.dex.moves.all()];\r\n\t\tconst typesPool = ['Bird', ...this.dex.types.names()];\r\n\r\n\t\tconst randomN = this.randomNPokemon(this.maxTeamSize);\r\n\t\tconst hackmonsCup: {[k: string]: HackmonsCupEntry} = {};\r\n\r\n\t\tfor (const forme of randomN) {\r\n\t\t\t// Choose forme\r\n\t\t\tconst species = this.dex.species.get(forme);\r\n\t\t\tif (!hackmonsCup[species.id]) {\r\n\t\t\t\thackmonsCup[species.id] = {\r\n\t\t\t\t\ttypes: [this.sample(typesPool), this.sample(typesPool)],\r\n\t\t\t\t\tbaseStats: {\r\n\t\t\t\t\t\thp: Utils.clampIntRange(this.random(256), 1),\r\n\t\t\t\t\t\tatk: Utils.clampIntRange(this.random(256), 1),\r\n\t\t\t\t\t\tdef: Utils.clampIntRange(this.random(256), 1),\r\n\t\t\t\t\t\tspa: Utils.clampIntRange(this.random(256), 1),\r\n\t\t\t\t\t\tspd: 0,\r\n\t\t\t\t\t\tspe: Utils.clampIntRange(this.random(256), 1),\r\n\t\t\t\t\t},\r\n\t\t\t\t};\r\n\t\t\t\tif (this.forceMonotype && !hackmonsCup[species.id].types.includes(this.forceMonotype)) {\r\n\t\t\t\t\thackmonsCup[species.id].types[1] = this.forceMonotype;\r\n\t\t\t\t}\r\n\t\t\t\thackmonsCup[species.id].baseStats.spd = hackmonsCup[species.id].baseStats.spa;\r\n\t\t\t}\r\n\t\t\tif (hackmonsCup[species.id].types[0] === hackmonsCup[species.id].types[1]) {\r\n\t\t\t\thackmonsCup[species.id].types.splice(1, 1);\r\n\t\t\t}\r\n\r\n\t\t\t// Random unique moves\r\n\t\t\tconst moves = [];\r\n\t\t\tdo {\r\n\t\t\t\tconst move = this.sampleNoReplace(movePool);\r\n\t\t\t\tif (move.gen <= this.gen && !move.isNonstandard && !move.name.startsWith('Hidden Power ')) {\r\n\t\t\t\t\tmoves.push(move.id);\r\n\t\t\t\t}\r\n\t\t\t} while (moves.length < this.maxMoveCount);\r\n\r\n\t\t\t// Random EVs\r\n\t\t\tconst evs = {\r\n\t\t\t\thp: this.random(256),\r\n\t\t\t\tatk: this.random(256),\r\n\t\t\t\tdef: this.random(256),\r\n\t\t\t\tspa: this.random(256),\r\n\t\t\t\tspd: 0,\r\n\t\t\t\tspe: this.random(256),\r\n\t\t\t};\r\n\t\t\tevs['spd'] = evs['spa'];\r\n\r\n\t\t\t// Random DVs\r\n\t\t\tconst ivs: StatsTable = {\r\n\t\t\t\thp: 0,\r\n\t\t\t\tatk: this.random(16),\r\n\t\t\t\tdef: this.random(16),\r\n\t\t\t\tspa: this.random(16),\r\n\t\t\t\tspd: 0,\r\n\t\t\t\tspe: this.random(16),\r\n\t\t\t};\r\n\t\t\tivs[\"hp\"] = (ivs[\"atk\"] % 2) * 16 + (ivs[\"def\"] % 2) * 8 + (ivs[\"spe\"] % 2) * 4 + (ivs[\"spa\"] % 2) * 2;\r\n\t\t\tfor (const iv in ivs) {\r\n\t\t\t\tif (iv === 'hp' || iv === 'spd') continue;\r\n\t\t\t\tivs[iv as keyof StatsTable] *= 2;\r\n\t\t\t}\r\n\t\t\tivs['spd'] = ivs['spa'];\r\n\r\n\t\t\t// Level balance\r\n\t\t\tconst mbstmin = 425;\r\n\t\t\tconst baseStats = hackmonsCup[species.id].baseStats;\r\n\t\t\tconst calcStat = (statName: StatID, lvl?: number) => {\r\n\t\t\t\tif (lvl) {\r\n\t\t\t\t\treturn Math.floor(Math.floor(2 * baseStats[statName] + ivs[statName] + Math.floor(evs[statName] / 4)) * lvl / 100 + 5);\r\n\t\t\t\t}\r\n\t\t\t\treturn Math.floor(2 * baseStats[statName] + ivs[statName] + Math.floor(evs[statName] / 4)) + 5;\r\n\t\t\t};\r\n\t\t\tlet mbst = 0;\r\n\t\t\tfor (const statName of Object.keys(baseStats)) {\r\n\t\t\t\tmbst += calcStat(statName as StatID);\r\n\t\t\t\tif (statName === 'hp') mbst += 5;\r\n\t\t\t}\r\n\t\t\tlet level;\r\n\t\t\tif (this.adjustLevel) {\r\n\t\t\t\tlevel = this.adjustLevel;\r\n\t\t\t} else {\r\n\t\t\t\tlevel = Math.floor(100 * mbstmin / mbst);\r\n\t\t\t\twhile (level < 100) {\r\n\t\t\t\t\tfor (const statName of Object.keys(baseStats)) {\r\n\t\t\t\t\t\tmbst += calcStat(statName as StatID, level);\r\n\t\t\t\t\t\tif (statName === 'hp') mbst += 5;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (mbst >= mbstmin) break;\r\n\t\t\t\t\tlevel++;\r\n\t\t\t\t}\r\n\t\t\t\tif (level > 100) level = 100;\r\n\t\t\t}\r\n\r\n\t\t\tteam.push({\r\n\t\t\t\tname: species.baseSpecies,\r\n\t\t\t\tspecies: species.name,\r\n\t\t\t\tgender: species.gender,\r\n\t\t\t\titem: '',\r\n\t\t\t\tability: 'No Ability',\r\n\t\t\t\tmoves,\r\n\t\t\t\tevs,\r\n\t\t\t\tivs,\r\n\t\t\t\tnature: '',\r\n\t\t\t\tlevel,\r\n\t\t\t\tshiny: false,\r\n\t\t\t\t// Hacky but the only way to communicate stats/level generation properly\r\n\t\t\t\thc: hackmonsCup[species.id],\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn team;\r\n\t}\r\n}\r\n\r\nexport default RandomGen1Teams;\r\n"],
  "mappings": "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",
  "names": ["RandomGen2Teams"]
}
