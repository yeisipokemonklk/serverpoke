{
  "version": 3,
  "sources": ["../../../../../data/mods/gen3/random-teams.ts"],
  "sourcesContent": ["import RandomGen4Teams from '../gen4/random-teams';\r\nimport {Utils} from '../../../lib';\r\nimport {PRNG, PRNGSeed} from '../../../sim/prng';\r\nimport type {MoveCounter} from '../gen8/random-teams';\r\n\r\n// Moves that restore HP:\r\nconst RECOVERY_MOVES = [\r\n\t'milkdrink', 'moonlight', 'morningsun', 'recover', 'slackoff', 'softboiled', 'synthesis',\r\n];\r\n// Conglomerate for ease of access\r\nconst SETUP = [\r\n\t'acidarmor', 'agility', 'bellydrum', 'bulkup', 'calmmind', 'curse', 'dragondance', 'growth', 'howl', 'irondefense',\r\n\t'meditate', 'raindance', 'sunnyday', 'swordsdance', 'tailglow',\r\n];\r\n// Moves that shouldn't be the only STAB moves:\r\nconst NO_STAB = [\r\n\t'eruption', 'explosion', 'fakeout', 'focuspunch', 'futuresight', 'icywind', 'knockoff', 'machpunch', 'pursuit',\r\n\t'quickattack', 'rapidspin', 'selfdestruct', 'skyattack', 'waterspout',\r\n];\r\n\r\n// Moves that should be paired together when possible\r\nconst MOVE_PAIRS = [\r\n\t['sleeptalk', 'rest'],\r\n\t['protect', 'wish'],\r\n\t['leechseed', 'substitute'],\r\n\t['focuspunch', 'substitute'],\r\n\t['batonpass', 'spiderweb'],\r\n];\r\n\r\nexport class RandomGen3Teams extends RandomGen4Teams {\r\n\tbattleHasDitto: boolean;\r\n\tbattleHasWobbuffet: boolean;\r\n\r\n\trandomSets: {[species: string]: RandomTeamsTypes.RandomSpeciesData} = require('./random-sets.json');\r\n\r\n\tconstructor(format: string | Format, prng: PRNG | PRNGSeed | null) {\r\n\t\tsuper(format, prng);\r\n\t\tthis.noStab = NO_STAB;\r\n\t\tthis.battleHasDitto = false;\r\n\t\tthis.battleHasWobbuffet = false;\r\n\t\tthis.moveEnforcementCheckers = {\r\n\t\t\tBug: (movePool, moves, abilities, types, counter, species) => (\r\n\t\t\t\t!counter.get('Bug') && ['armaldo', 'heracross', 'parasect'].includes(species.id)\r\n\t\t\t),\r\n\t\t\tDark: (movePool, moves, abilities, types, counter) => !counter.get('Dark'),\r\n\t\t\tElectric: (movePool, moves, abilities, types, counter) => !counter.get('Electric'),\r\n\t\t\tFighting: (movePool, moves, abilities, types, counter) => !counter.get('Fighting'),\r\n\t\t\tFire: (movePool, moves, abilities, types, counter) => !counter.get('Fire'),\r\n\t\t\tFlying: (movePool, moves, abilities, types, counter, species) => (!counter.get('Flying') && species.id !== 'crobat'),\r\n\t\t\tGhost: (movePool, moves, abilities, types, counter) => !counter.get('Ghost'),\r\n\t\t\tGround: (movePool, moves, abilities, types, counter) => !counter.get('Ground'),\r\n\t\t\tIce: (movePool, moves, abilities, types, counter) => !counter.get('Ice'),\r\n\t\t\tNormal: (movePool, moves, abilities, types, counter, species) => !counter.get('Normal'),\r\n\t\t\tPoison: (movePool, moves, abilities, types, counter) => !counter.get('Poison') && !counter.get('Bug'),\r\n\t\t\tPsychic: (movePool, moves, abilities, types, counter, species) => (\r\n\t\t\t\t!counter.get('Psychic') && species.baseStats.spa >= 100\r\n\t\t\t),\r\n\t\t\tRock: (movePool, moves, abilities, types, counter, species) => !counter.get('Rock'),\r\n\t\t\tSteel: (movePool, moves, abilities, types, counter, species) => (!counter.get('Steel') && species.id !== 'forretress'),\r\n\t\t\tWater: (movePool, moves, abilities, types, counter, species) => !counter.get('Water'),\r\n\t\t};\r\n\t}\r\n\r\n\tcullMovePool(\r\n\t\ttypes: string[],\r\n\t\tmoves: Set<string>,\r\n\t\tabilities: Set<string>,\r\n\t\tcounter: MoveCounter,\r\n\t\tmovePool: string[],\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species,\r\n\t\tisLead: boolean,\r\n\t\tpreferredType: string,\r\n\t\trole: RandomTeamsTypes.Role,\r\n\t): void {\r\n\t\t// Pokemon cannot have multiple Hidden Powers in any circumstance\r\n\t\tlet hasHiddenPower = false;\r\n\t\tfor (const move of moves) {\r\n\t\t\tif (move.startsWith('hiddenpower')) hasHiddenPower = true;\r\n\t\t}\r\n\t\tif (hasHiddenPower) {\r\n\t\t\tlet movePoolHasHiddenPower = true;\r\n\t\t\twhile (movePoolHasHiddenPower) {\r\n\t\t\t\tmovePoolHasHiddenPower = false;\r\n\t\t\t\tfor (const moveid of movePool) {\r\n\t\t\t\t\tif (moveid.startsWith('hiddenpower')) {\r\n\t\t\t\t\t\tthis.fastPop(movePool, movePool.indexOf(moveid));\r\n\t\t\t\t\t\tmovePoolHasHiddenPower = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\r\n\t\t// If we have two unfilled moves and only one unpaired move, cull the unpaired move.\r\n\t\tif (moves.size === this.maxMoveCount - 2) {\r\n\t\t\tconst unpairedMoves = [...movePool];\r\n\t\t\tfor (const pair of MOVE_PAIRS) {\r\n\t\t\t\tif (movePool.includes(pair[0]) && movePool.includes(pair[1])) {\r\n\t\t\t\t\tthis.fastPop(unpairedMoves, unpairedMoves.indexOf(pair[0]));\r\n\t\t\t\t\tthis.fastPop(unpairedMoves, unpairedMoves.indexOf(pair[1]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (unpairedMoves.length === 1) {\r\n\t\t\t\tthis.fastPop(movePool, movePool.indexOf(unpairedMoves[0]));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// These moves are paired, and shouldn't appear if there is not room for them both.\r\n\t\tif (moves.size === this.maxMoveCount - 1) {\r\n\t\t\tfor (const pair of MOVE_PAIRS) {\r\n\t\t\t\tif (movePool.includes(pair[0]) && movePool.includes(pair[1])) {\r\n\t\t\t\t\tthis.fastPop(movePool, movePool.indexOf(pair[0]));\r\n\t\t\t\t\tthis.fastPop(movePool, movePool.indexOf(pair[1]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Team-based move culls\r\n\t\tif (teamDetails.rapidSpin) {\r\n\t\t\tif (movePool.includes('rapidspin')) this.fastPop(movePool, movePool.indexOf('rapidspin'));\r\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\r\n\t\t}\r\n\r\n\t\t// Develop additional move lists\r\n\t\tconst badWithSetup = ['knockoff', 'rapidspin', 'toxic'];\r\n\t\tconst statusMoves = this.dex.moves.all()\r\n\t\t\t.filter(move => move.category === 'Status')\r\n\t\t\t.map(move => move.id);\r\n\r\n\t\t// General incompatibilities\r\n\t\tconst incompatiblePairs = [\r\n\t\t\t// These moves don't mesh well with other aspects of the set\r\n\t\t\t[statusMoves, 'trick'],\r\n\t\t\t[SETUP, badWithSetup],\r\n\t\t\t['rest', ['protect', 'substitute']],\r\n\t\t\t[['selfdestruct', 'explosion'], ['destinybond', 'painsplit', 'rest']],\r\n\r\n\t\t\t// These attacks are redundant with each other\r\n\t\t\t['surf', 'hydropump'],\r\n\t\t\t[['bodyslam', 'return'], ['bodyslam', 'doubleedge']],\r\n\t\t\t['fireblast', 'flamethrower'],\r\n\r\n\t\t\t// Assorted hardcodes go here:\r\n\t\t\t// Granbull\r\n\t\t\t['bulkup', 'overheat'],\r\n\t\t\t// Heracross\r\n\t\t\t['endure', 'substitute'],\r\n\t\t];\r\n\r\n\t\tfor (const pair of incompatiblePairs) this.incompatibleMoves(moves, movePool, pair[0], pair[1]);\r\n\r\n\t\tconst statusInflictingMoves = ['stunspore', 'thunderwave', 'toxic', 'willowisp', 'yawn'];\r\n\t\tif (role !== 'Staller') {\r\n\t\t\tthis.incompatibleMoves(moves, movePool, statusInflictingMoves, statusInflictingMoves);\r\n\t\t}\r\n\t}\r\n\r\n\t// Generate random moveset for a given species, role, preferred type.\r\n\trandomMoveset(\r\n\t\ttypes: string[],\r\n\t\tabilities: Set<string>,\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species,\r\n\t\tisLead: boolean,\r\n\t\tmovePool: string[],\r\n\t\tpreferredType: string,\r\n\t\trole: RandomTeamsTypes.Role,\r\n\t): Set<string> {\r\n\t\tconst preferredTypes = preferredType ? preferredType.split(',') : [];\r\n\t\tconst moves = new Set<string>();\r\n\t\tlet counter = this.newQueryMoves(moves, species, preferredType, abilities);\r\n\t\tthis.cullMovePool(types, moves, abilities, counter, movePool, teamDetails, species, isLead,\r\n\t\t\tpreferredType, role);\r\n\r\n\t\t// If there are only four moves, add all moves and return early\r\n\t\tif (movePool.length <= this.maxMoveCount) {\r\n\t\t\t// Still need to ensure that multiple Hidden Powers are not added (if maxMoveCount is increased)\r\n\t\t\twhile (movePool.length) {\r\n\t\t\t\tconst moveid = this.sample(movePool);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t}\r\n\t\t\treturn moves;\r\n\t\t}\r\n\r\n\t\tconst runEnforcementChecker = (checkerName: string) => {\r\n\t\t\tif (!this.moveEnforcementCheckers[checkerName]) return false;\r\n\t\t\treturn this.moveEnforcementCheckers[checkerName](\r\n\t\t\t\tmovePool, moves, abilities, new Set(types), counter, species, teamDetails\r\n\t\t\t);\r\n\t\t};\r\n\r\n\t\t// Add required move (e.g. Relic Song for Meloetta-P)\r\n\t\tif (species.requiredMove) {\r\n\t\t\tconst move = this.dex.moves.get(species.requiredMove).id;\r\n\t\t\tcounter = this.addMove(move, moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\tmovePool, preferredType, role);\r\n\t\t}\r\n\r\n\t\t// Add other moves you really want to have, e.g. STAB, recovery, setup.\r\n\r\n\t\t// Enforce Seismic Toss and Spore\r\n\t\tfor (const moveid of ['seismictoss', 'spore']) {\r\n\t\t\tif (movePool.includes(moveid)) {\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce Substitute on non-Setup sets with Baton Pass\r\n\t\tif (!role.includes('Setup')) {\r\n\t\t\tif (movePool.includes('batonpass') && movePool.includes('substitute')) {\r\n\t\t\t\tcounter = this.addMove('substitute', moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce moves of all Preferred Types\r\n\t\tfor (const type of preferredTypes) {\r\n\t\t\tif (!counter.get(type)) {\r\n\t\t\t\tconst stabMoves = [];\r\n\t\t\t\tfor (const moveid of movePool) {\r\n\t\t\t\t\tconst move = this.dex.moves.get(moveid);\r\n\t\t\t\t\tconst moveType = this.getMoveType(move, species, abilities, preferredType);\r\n\t\t\t\t\tif (!this.noStab.includes(moveid) && (move.basePower || move.basePowerCallback) && type === moveType) {\r\n\t\t\t\t\t\tstabMoves.push(moveid);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (stabMoves.length) {\r\n\t\t\t\t\tconst moveid = this.sample(stabMoves);\r\n\t\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce STAB\r\n\t\tfor (const type of types) {\r\n\t\t\t// Check if a STAB move of that type should be required\r\n\t\t\tconst stabMoves = [];\r\n\t\t\tfor (const moveid of movePool) {\r\n\t\t\t\tconst move = this.dex.moves.get(moveid);\r\n\t\t\t\tconst moveType = this.getMoveType(move, species, abilities, preferredType);\r\n\t\t\t\tif (!this.noStab.includes(moveid) && (move.basePower || move.basePowerCallback) && type === moveType) {\r\n\t\t\t\t\tstabMoves.push(moveid);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\twhile (runEnforcementChecker(type)) {\r\n\t\t\t\tif (!stabMoves.length) break;\r\n\t\t\t\tconst moveid = this.sampleNoReplace(stabMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If no STAB move was added, add a STAB move\r\n\t\tif (!counter.get('stab')) {\r\n\t\t\tconst stabMoves = [];\r\n\t\t\tfor (const moveid of movePool) {\r\n\t\t\t\tconst move = this.dex.moves.get(moveid);\r\n\t\t\t\tconst moveType = this.getMoveType(move, species, abilities, preferredType);\r\n\t\t\t\tif (!this.noStab.includes(moveid) && (move.basePower || move.basePowerCallback) && types.includes(moveType)) {\r\n\t\t\t\t\tstabMoves.push(moveid);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (stabMoves.length) {\r\n\t\t\t\tconst moveid = this.sample(stabMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce recovery\r\n\t\tif (['Bulky Support', 'Bulky Attacker', 'Bulky Setup', 'Staller'].includes(role)) {\r\n\t\t\tconst recoveryMoves = movePool.filter(moveid => RECOVERY_MOVES.includes(moveid));\r\n\t\t\tif (recoveryMoves.length) {\r\n\t\t\t\tconst moveid = this.sample(recoveryMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce Staller moves\r\n\t\tif (role === 'Staller') {\r\n\t\t\tconst enforcedMoves = ['protect', 'toxic', 'wish'];\r\n\t\t\tfor (const move of enforcedMoves) {\r\n\t\t\t\tif (movePool.includes(move)) {\r\n\t\t\t\t\tcounter = this.addMove(move, moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce setup\r\n\t\tif (role.includes('Setup') || role === 'Berry Sweeper') {\r\n\t\t\tconst setupMoves = movePool.filter(moveid => SETUP.includes(moveid));\r\n\t\t\tif (setupMoves.length) {\r\n\t\t\t\tconst moveid = this.sample(setupMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce Berry Sweeper moves\r\n\t\tif (role === 'Berry Sweeper') {\r\n\t\t\t// Enforce Flail/Reversal\r\n\t\t\tfor (const move of ['flail', 'reversal']) {\r\n\t\t\t\tif (movePool.includes(move)) {\r\n\t\t\t\t\tcounter = this.addMove(move, moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Enforce one of Endure and Substitute, but not both\r\n\t\t\tconst hpControlMoves = [];\r\n\t\t\tfor (const moveid of movePool) {\r\n\t\t\t\tif (['endure', 'substitute'].includes(moveid)) hpControlMoves.push(moveid);\r\n\t\t\t}\r\n\t\t\tif (hpControlMoves.length) {\r\n\t\t\t\tconst moveid = this.sample(hpControlMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce a move not on the noSTAB list\r\n\t\tif (!counter.damagingMoves.size) {\r\n\t\t\t// Choose an attacking move\r\n\t\t\tconst attackingMoves = [];\r\n\t\t\tfor (const moveid of movePool) {\r\n\t\t\t\tconst move = this.dex.moves.get(moveid);\r\n\t\t\t\tif (!this.noStab.includes(moveid) && (move.category !== 'Status')) attackingMoves.push(moveid);\r\n\t\t\t}\r\n\t\t\tif (attackingMoves.length) {\r\n\t\t\t\tconst moveid = this.sample(attackingMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce coverage move\r\n\t\tif (['Fast Attacker', 'Setup Sweeper', 'Bulky Attacker', 'Wallbreaker', 'Berry Sweeper'].includes(role)) {\r\n\t\t\tif (counter.damagingMoves.size === 1) {\r\n\t\t\t\t// Find the type of the current attacking move\r\n\t\t\t\tconst currentAttackType = counter.damagingMoves.values().next().value.type;\r\n\t\t\t\t// Choose an attacking move that is of different type to the current single attack\r\n\t\t\t\tconst coverageMoves = [];\r\n\t\t\t\tfor (const moveid of movePool) {\r\n\t\t\t\t\tconst move = this.dex.moves.get(moveid);\r\n\t\t\t\t\tconst moveType = this.getMoveType(move, species, abilities, preferredType);\r\n\t\t\t\t\tif (!this.noStab.includes(moveid) && (move.basePower || move.basePowerCallback)) {\r\n\t\t\t\t\t\tif (currentAttackType !== moveType) coverageMoves.push(moveid);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (coverageMoves.length) {\r\n\t\t\t\t\tconst moveid = this.sample(coverageMoves);\r\n\t\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Choose remaining moves randomly from movepool and add them to moves list:\r\n\t\twhile (moves.size < this.maxMoveCount && movePool.length) {\r\n\t\t\tconst moveid = this.sample(movePool);\r\n\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\tmovePool, preferredType, role);\r\n\t\t\tfor (const pair of MOVE_PAIRS) {\r\n\t\t\t\tif (moveid === pair[0] && movePool.includes(pair[1])) {\r\n\t\t\t\t\tcounter = this.addMove(pair[1], moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t\t}\r\n\t\t\t\tif (moveid === pair[1] && movePool.includes(pair[0])) {\r\n\t\t\t\t\tcounter = this.addMove(pair[0], moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn moves;\r\n\t}\r\n\r\n\tshouldCullAbility(\r\n\t\tability: string,\r\n\t\ttypes: Set<string>,\r\n\t\tmoves: Set<string>,\r\n\t\tabilities: Set<string>,\r\n\t\tcounter: MoveCounter,\r\n\t\tmovePool: string[],\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species,\r\n\t\tpreferredType: string,\r\n\t\trole: RandomTeamsTypes.Role\r\n\t) {\r\n\t\tswitch (ability) {\r\n\t\tcase 'Rain Dish': case 'Sand Veil': case 'Soundproof': case 'Sticky Hold':\r\n\t\t\treturn true;\r\n\t\tcase 'Chlorophyll':\r\n\t\t\treturn !moves.has('sunnyday') && !teamDetails.sun;\r\n\t\tcase 'Hustle':\r\n\t\t\treturn !counter.get('Physical');\r\n\t\tcase 'Rock Head':\r\n\t\t\treturn !counter.get('recoil');\r\n\t\tcase 'Swarm':\r\n\t\t\treturn !counter.get('Bug');\r\n\t\tcase 'Swift Swim':\r\n\t\t\treturn (\r\n\t\t\t\t// Relicanth always wants Swift Swim if it doesn't have Double-Edge\r\n\t\t\t\t!moves.has('raindance') && !teamDetails.rain && !(species.id === 'relicanth' && !counter.get('recoil')) ||\r\n\t\t\t\t!moves.has('raindance') && abilities.has('Water Absorb')\r\n\t\t\t);\r\n\t\tcase 'Thick Fat':\r\n\t\t\treturn (species.id === 'snorlax' || (species.id === 'hariyama' && moves.has('sleeptalk')));\r\n\t\tcase 'Water Absorb':\r\n\t\t\treturn (species.id === 'mantine' && moves.has('raindance'));\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\tgetAbility(\r\n\t\ttypes: Set<string>,\r\n\t\tmoves: Set<string>,\r\n\t\tabilities: Set<string>,\r\n\t\tcounter: MoveCounter,\r\n\t\tmovePool: string[],\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species,\r\n\t\tpreferredType: string,\r\n\t\trole: RandomTeamsTypes.Role,\r\n\t): string {\r\n\t\tconst abilityData = Array.from(abilities).map(a => this.dex.abilities.get(a));\r\n\t\tUtils.sortBy(abilityData, abil => -abil.rating);\r\n\r\n\t\tif (abilityData.length <= 1) return abilityData[0].name;\r\n\r\n\t\t// Hard-code abilities here\r\n\t\tif (species.id === 'yanma' && counter.get('inaccurate')) return 'Compound Eyes';\r\n\t\tif (species.id === 'arcanine') return 'Intimidate';\r\n\t\tif (species.id === 'blissey') return 'Natural Cure';\r\n\t\tif (species.id === 'heracross' && role === 'Berry Sweeper') return 'Swarm';\r\n\t\tif (species.id === 'gardevoir') return 'Trace';\r\n\r\n\t\tlet abilityAllowed: Ability[] = [];\r\n\t\t// Obtain a list of abilities that are allowed (not culled)\r\n\t\tfor (const ability of abilityData) {\r\n\t\t\tif (ability.rating >= 1 && !this.shouldCullAbility(\r\n\t\t\t\tability.name, types, moves, abilities, counter, movePool, teamDetails, species, preferredType, role\r\n\t\t\t)) {\r\n\t\t\t\tabilityAllowed.push(ability);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If all abilities are rejected, re-allow all abilities\r\n\t\tif (!abilityAllowed.length) {\r\n\t\t\tfor (const ability of abilityData) {\r\n\t\t\t\tif (ability.rating > 0) abilityAllowed.push(ability);\r\n\t\t\t}\r\n\t\t\tif (!abilityAllowed.length) abilityAllowed = abilityData;\r\n\t\t}\r\n\r\n\t\tif (abilityAllowed.length === 1) return abilityAllowed[0].name;\r\n\t\t// Sort abilities by rating with an element of randomness\r\n\t\tif (abilityAllowed[0].rating <= abilityAllowed[1].rating) {\r\n\t\t\tif (this.randomChance(1, 2)) [abilityAllowed[0], abilityAllowed[1]] = [abilityAllowed[1], abilityAllowed[0]];\r\n\t\t} else if (abilityAllowed[0].rating - 0.5 <= abilityAllowed[1].rating) {\r\n\t\t\tif (this.randomChance(1, 3)) [abilityAllowed[0], abilityAllowed[1]] = [abilityAllowed[1], abilityAllowed[0]];\r\n\t\t}\r\n\r\n\t\t// After sorting, choose the first ability\r\n\t\treturn abilityAllowed[0].name;\r\n\t}\r\n\r\n\tgetItem(\r\n\t\tability: string,\r\n\t\ttypes: string[],\r\n\t\tmoves: Set<string>,\r\n\t\tcounter: MoveCounter,\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species,\r\n\t\tisLead: boolean,\r\n\t\tpreferredType: string,\r\n\t\trole: RandomTeamsTypes.Role,\r\n\t): string {\r\n\t\t// First, the high-priority items\r\n\t\tif (species.id === 'farfetchd') return 'Stick';\r\n\t\tif (species.id === 'latias' || species.id === 'latios') return 'Soul Dew';\r\n\t\tif (species.id === 'linoone' && role === 'Setup Sweeper') return 'Silk Scarf';\r\n\t\tif (species.id === 'marowak') return 'Thick Club';\r\n\t\tif (species.id === 'pikachu') return 'Light Ball';\r\n\t\tif (species.id === 'shedinja') return 'Lum Berry';\r\n\t\tif (species.id === 'shuckle') return 'Leftovers';\r\n\t\tif (species.id === 'unown') return counter.get('Physical') ? 'Choice Band' : 'Twisted Spoon';\r\n\r\n\t\tif (moves.has('trick')) return 'Choice Band';\r\n\t\tif (\r\n\t\t\tmoves.has('rest') && !moves.has('sleeptalk') &&\r\n\t\t\t// Altaria wants Chesto Berry on Dragon Dance + Rest\r\n\t\t\t(moves.has('dragondance') || !['Early Bird', 'Natural Cure', 'Shed Skin'].includes(ability))\r\n\t\t) return 'Chesto Berry';\r\n\r\n\t\t// Medium priority items\r\n\t\tif (counter.get('Physical') >= 4) return 'Choice Band';\r\n\t\tif (counter.get('Physical') >= 3 && (moves.has('batonpass') || (role === 'Wallbreaker' && counter.get('Special')))) {\r\n\t\t\treturn 'Choice Band';\r\n\t\t}\r\n\r\n\t\tif (\r\n\t\t\tmoves.has('dragondance') && ability !== 'Natural Cure' &&\r\n\t\t\t!moves.has('healbell') && !moves.has('substitute')\r\n\t\t) return 'Lum Berry';\r\n\t\tif (moves.has('bellydrum')) return moves.has('substitute') ? 'Salac Berry' : 'Lum Berry';\r\n\r\n\t\tif (moves.has('raindance') && counter.get('Special') >= 3) return 'Petaya Berry';\r\n\r\n\t\tif (role === 'Berry Sweeper') {\r\n\t\t\tif (moves.has('endure')) return 'Salac Berry';\r\n\t\t\tif (moves.has('flail') || moves.has('reversal')) return (species.baseStats.spe >= 90) ? 'Liechi Berry' : 'Salac Berry';\r\n\t\t\tif (moves.has('substitute') && counter.get('Physical') >= 3) return 'Liechi Berry';\r\n\t\t\tif (moves.has('substitute') && counter.get('Special') >= 3) return 'Petaya Berry';\r\n\t\t}\r\n\r\n\t\tconst salacReqs = species.baseStats.spe >= 60 && species.baseStats.spe <= 100 && !counter.get('priority');\r\n\r\n\t\tif (moves.has('bulkup') && moves.has('substitute') && counter.get('Status') === 2 && salacReqs) return 'Salac Berry';\r\n\r\n\t\tif (moves.has('swordsdance') && moves.has('substitute') && counter.get('Status') === 2) {\r\n\t\t\tif (salacReqs) return 'Salac Berry';\r\n\t\t\tif (species.baseStats.spe > 100 && counter.get('Physical') >= 2) return 'Liechi Berry';\r\n\t\t}\r\n\r\n\t\tif (moves.has('swordsdance') && counter.get('Status') === 1) {\r\n\t\t\tif (salacReqs) return 'Salac Berry';\r\n\t\t\tif (species.baseStats.spe > 100) {\r\n\t\t\t\treturn (counter.get('Physical') >= 3 && this.randomChance(1, 2)) ? 'Liechi Berry' : 'Lum Berry';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (species.id === 'deoxys' || species.id === 'deoxysattack') return 'White Herb';\r\n\r\n\t\t// Default to Leftovers\r\n\t\treturn 'Leftovers';\r\n\t}\r\n\r\n\trandomSet(\r\n\t\tspecies: string | Species,\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails = {},\r\n\t\tisLead = false\r\n\t): RandomTeamsTypes.RandomSet {\r\n\t\tspecies = this.dex.species.get(species);\r\n\t\tconst forme = this.getForme(species);\r\n\t\tconst sets = this.randomSets[species.id][\"sets\"];\r\n\r\n\t\tconst set = this.sampleIfArray(sets);\r\n\t\tconst role = set.role;\r\n\t\tconst movePool: string[] = Array.from(set.movepool);\r\n\t\tconst preferredTypes = set.preferredTypes;\r\n\t\t// In Gen 3, if a set has multiple preferred types, enforce all of them.\r\n\t\tconst preferredType = preferredTypes ? preferredTypes.join() : '';\r\n\r\n\t\tlet ability = '';\r\n\t\tlet item = undefined;\r\n\r\n\t\tconst evs = {hp: 85, atk: 85, def: 85, spa: 85, spd: 85, spe: 85};\r\n\t\tconst ivs = {hp: 31, atk: 31, def: 31, spa: 31, spd: 31, spe: 31};\r\n\r\n\t\tconst types = species.types;\r\n\t\tconst abilities = new Set(Object.values(species.abilities));\r\n\r\n\t\t// Get moves\r\n\t\tconst moves = this.randomMoveset(types, abilities, teamDetails, species, isLead, movePool,\r\n\t\t\tpreferredType, role);\r\n\t\tconst counter = this.newQueryMoves(moves, species, preferredType, abilities);\r\n\r\n\t\t// Get ability\r\n\t\tability = this.getAbility(new Set(types), moves, abilities, counter, movePool, teamDetails, species,\r\n\t\t\tpreferredType, role);\r\n\r\n\t\t// Get items\r\n\t\titem = this.getItem(ability, types, moves, counter, teamDetails, species, isLead, preferredType, role);\r\n\r\n\t\tconst level = this.getLevel(species);\r\n\r\n\t\t// We use a special variable to track Hidden Power\r\n\t\t// so that we can check for all Hidden Powers at once\r\n\t\tlet hasHiddenPower = false;\r\n\t\tfor (const move of moves) {\r\n\t\t\tif (move.startsWith('hiddenpower')) hasHiddenPower = true;\r\n\t\t}\r\n\r\n\t\tif (hasHiddenPower) {\r\n\t\t\tlet hpType;\r\n\t\t\tfor (const move of moves) {\r\n\t\t\t\tif (move.startsWith('hiddenpower')) hpType = move.substr(11);\r\n\t\t\t}\r\n\t\t\tif (!hpType) throw new Error(`hasHiddenPower is true, but no Hidden Power move was found.`);\r\n\t\t\tconst HPivs = this.dex.types.get(hpType).HPivs;\r\n\t\t\tlet iv: StatID;\r\n\t\t\tfor (iv in HPivs) {\r\n\t\t\t\tivs[iv] = HPivs[iv]!;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Prepare optimal HP\r\n\t\twhile (evs.hp > 1) {\r\n\t\t\tconst hp = Math.floor(Math.floor(2 * species.baseStats.hp + ivs.hp + Math.floor(evs.hp / 4) + 100) * level / 100 + 10);\r\n\t\t\tif (moves.has('substitute') && ['flail', 'reversal'].some(m => moves.has(m))) {\r\n\t\t\t\t// Flail/Reversal users should be able to use four Substitutes\r\n\t\t\t\tif (hp % 4 > 0) break;\r\n\t\t\t} else if (moves.has('substitute') && (item === 'Salac Berry' || item === 'Petaya Berry' || item === 'Liechi Berry')) {\r\n\t\t\t\t// Other pinch berry holders should have berries activate after three Substitutes\r\n\t\t\t\tif (hp % 4 === 0) break;\r\n\t\t\t} else if (moves.has('bellydrum')) {\r\n\t\t\t\t// Belly Drum users should be able to use Belly Drum twice\r\n\t\t\t\tif (hp % 2 > 0) break;\r\n\t\t\t} else {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tevs.hp -= 4;\r\n\t\t}\r\n\r\n\t\t// Minimize confusion damage\r\n\t\tif (!counter.get('Physical') && !moves.has('transform')) {\r\n\t\t\tevs.atk = 0;\r\n\t\t\tivs.atk = hasHiddenPower ? (ivs.atk || 31) - 28 : 0;\r\n\t\t}\r\n\r\n\t\t// Prepare optimal HP\r\n\t\tlet hp = Math.floor(Math.floor(2 * species.baseStats.hp + ivs.hp + Math.floor(evs.hp / 4) + 100) * level / 100 + 10);\r\n\t\tif (moves.has('substitute') && ['endeavor', 'flail', 'reversal'].some(m => moves.has(m))) {\r\n\t\t\t// Endeavor/Flail/Reversal users should be able to use four Substitutes\r\n\t\t\tif (hp % 4 === 0) evs.hp -= 4;\r\n\t\t} else if (moves.has('substitute') && (item === 'Salac Berry' || item === 'Petaya Berry' || item === 'Liechi Berry')) {\r\n\t\t\t// Other pinch berry holders should have berries activate after three Substitutes\r\n\t\t\twhile (hp % 4 > 0) {\r\n\t\t\t\tevs.hp -= 4;\r\n\t\t\t\thp = Math.floor(Math.floor(2 * species.baseStats.hp + ivs.hp + Math.floor(evs.hp / 4) + 100) * level / 100 + 10);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// shuffle moves to add more randomness to camomons\r\n\t\tconst shuffledMoves = Array.from(moves);\r\n\t\tthis.prng.shuffle(shuffledMoves);\r\n\r\n\t\treturn {\r\n\t\t\tname: species.baseSpecies,\r\n\t\t\tspecies: forme,\r\n\t\t\tgender: species.gender,\r\n\t\t\tshiny: this.randomChance(1, 1024),\r\n\t\t\tlevel,\r\n\t\t\tmoves: shuffledMoves,\r\n\t\t\tability,\r\n\t\t\tevs,\r\n\t\t\tivs,\r\n\t\t\titem,\r\n\t\t\trole,\r\n\t\t};\r\n\t}\r\n\r\n\trandomTeam() {\r\n\t\tthis.enforceNoDirectCustomBanlistChanges();\r\n\r\n\t\tconst seed = this.prng.seed;\r\n\t\tconst ruleTable = this.dex.formats.getRuleTable(this.format);\r\n\t\tconst pokemon: RandomTeamsTypes.RandomSet[] = [];\r\n\r\n\t\t// For Monotype\r\n\t\tconst isMonotype = !!this.forceMonotype || ruleTable.has('sametypeclause');\r\n\t\tconst typePool = this.dex.types.names();\r\n\t\tconst type = this.forceMonotype || this.sample(typePool);\r\n\r\n\t\tconst baseFormes: {[k: string]: number} = {};\r\n\t\tconst typeCount: {[k: string]: number} = {};\r\n\t\tconst typeWeaknesses: {[k: string]: number} = {};\r\n\t\tconst teamDetails: RandomTeamsTypes.TeamDetails = {};\r\n\t\tlet numMaxLevelPokemon = 0;\r\n\r\n\t\tconst pokemonList = (this.gen === 3) ? Object.keys(this.randomSets) : Object.keys(this.randomData);\r\n\t\tconst [pokemonPool, baseSpeciesPool] = this.getPokemonPool(type, pokemon, isMonotype, pokemonList);\r\n\t\twhile (baseSpeciesPool.length && pokemon.length < this.maxTeamSize) {\r\n\t\t\tconst baseSpecies = this.sampleNoReplace(baseSpeciesPool);\r\n\t\t\tconst species = this.dex.species.get(this.sample(pokemonPool[baseSpecies]));\r\n\t\t\tif (!species.exists) continue;\r\n\r\n\t\t\t// Limit to one of each species (Species Clause)\r\n\t\t\tif (baseFormes[species.baseSpecies]) continue;\r\n\r\n\t\t\t// Limit to one Wobbuffet per battle (not just per team)\r\n\t\t\tif (species.name === 'Wobbuffet' && this.battleHasWobbuffet) continue;\r\n\t\t\t// Limit to one Ditto per battle in Gen 2\r\n\t\t\tif (this.dex.gen < 3 && species.name === 'Ditto' && this.battleHasDitto) continue;\r\n\r\n\t\t\tconst types = species.types;\r\n\r\n\t\t\tif (!isMonotype && !this.forceMonotype) {\r\n\t\t\t\t// Dynamically scale limits for different team sizes. The default and minimum value is 1.\r\n\t\t\t\tconst limitFactor = Math.round(this.maxTeamSize / 6) || 1;\r\n\r\n\t\t\t\t// Limit two of any type\r\n\t\t\t\tlet skip = false;\r\n\t\t\t\tfor (const typeName of types) {\r\n\t\t\t\t\tif (typeCount[typeName] >= 2 * limitFactor) {\r\n\t\t\t\t\t\tskip = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (skip) continue;\r\n\r\n\t\t\t\t// Limit three weak to any type\r\n\t\t\t\tfor (const typeName of this.dex.types.names()) {\r\n\t\t\t\t\t// it's weak to the type\r\n\t\t\t\t\tif (this.dex.getEffectiveness(typeName, species) > 0) {\r\n\t\t\t\t\t\tif (!typeWeaknesses[typeName]) typeWeaknesses[typeName] = 0;\r\n\t\t\t\t\t\tif (typeWeaknesses[typeName] >= 3 * limitFactor) {\r\n\t\t\t\t\t\t\tskip = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (skip) continue;\r\n\r\n\t\t\t\t// Limit one level 100 Pokemon\r\n\t\t\t\tif (!this.adjustLevel && (this.getLevel(species) === 100) && numMaxLevelPokemon >= limitFactor) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Okay, the set passes, add it to our team\r\n\t\t\tconst set = this.randomSet(species, teamDetails);\r\n\t\t\tpokemon.push(set);\r\n\r\n\t\t\t// Don't bother tracking details for the last Pokemon\r\n\t\t\tif (pokemon.length === this.maxTeamSize) break;\r\n\r\n\t\t\t// Now that our Pokemon has passed all checks, we can increment our counters\r\n\t\t\tbaseFormes[species.baseSpecies] = 1;\r\n\r\n\t\t\t// Increment type counters\r\n\t\t\tfor (const typeName of types) {\r\n\t\t\t\tif (typeName in typeCount) {\r\n\t\t\t\t\ttypeCount[typeName]++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttypeCount[typeName] = 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Increment weakness counter\r\n\t\t\tfor (const typeName of this.dex.types.names()) {\r\n\t\t\t\t// it's weak to the type\r\n\t\t\t\tif (this.dex.getEffectiveness(typeName, species) > 0) {\r\n\t\t\t\t\ttypeWeaknesses[typeName]++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Increment level 100 counter\r\n\t\t\tif (set.level === 100) numMaxLevelPokemon++;\r\n\r\n\t\t\t// Update team details\r\n\t\t\tif (set.ability === 'Drizzle' || set.moves.includes('raindance')) teamDetails.rain = 1;\r\n\t\t\tif (set.ability === 'Drought' || set.moves.includes('sunnyday')) teamDetails.sun = 1;\r\n\t\t\tif (set.ability === 'Sand Stream') teamDetails.sand = 1;\r\n\t\t\tif (set.moves.includes('spikes')) teamDetails.spikes = 1;\r\n\t\t\tif (set.moves.includes('rapidspin')) teamDetails.rapidSpin = 1;\r\n\r\n\t\t\t// In Gen 3, Shadow Tag users can prevent each other from switching out, possibly causing and endless battle or at least causing a long stall war\r\n\t\t\t// To prevent this, we prevent more than one Wobbuffet in a single battle.\r\n\t\t\tif (species.id === 'wobbuffet') this.battleHasWobbuffet = true;\r\n\t\t\tif (species.id === 'ditto') this.battleHasDitto = true;\r\n\t\t}\r\n\r\n\t\tif (pokemon.length < this.maxTeamSize && !isMonotype && !this.forceMonotype && pokemon.length < 12) {\r\n\t\t\tthrow new Error(`Could not build a random team for ${this.format} (seed=${seed})`);\r\n\t\t}\r\n\r\n\t\treturn pokemon;\r\n\t}\r\n}\r\n\r\nexport default RandomGen3Teams;\r\n"],
  "mappings": "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",
  "names": ["RandomGen4Teams", "hp"]
}
