{
  "version": 3,
  "sources": ["../../../../../data/mods/randomroulette/scripts.ts"],
  "sourcesContent": ["import {PRNG} from '../../../sim/prng';\r\nimport {Pokemon} from '../../../sim/pokemon';\r\nimport {Teams} from '../../../sim/teams';\r\n\r\nexport const Scripts: ModdedBattleScriptsData = {\r\n\tstart() {\r\n\t\t// Choose a random format\r\n\t\tthis.gen = this.random(1, 10);\r\n\t\tconst format = Dex.formats.get(`gen${this.gen}randombattle@@@${(this.format.customRules || []).join(',')}`);\r\n\t\tthis.dex = Dex.forFormat(format);\r\n\t\tthis.ruleTable = this.dex.formats.getRuleTable(format);\r\n\t\tthis.teamGenerator = Teams.getGenerator(format);\r\n\r\n\t\tthis.actions.battle = this;\r\n\t\tthis.actions.dex = this.dex;\r\n\t\tif (this.actions.dex.data.Scripts.actions) Object.assign(this.actions, this.actions.dex.data.Scripts.actions);\r\n\t\tif (format.actions) Object.assign(this.actions, format.actions);\r\n\r\n\t\tfor (const i in this.dex.data.Scripts) {\r\n\t\t\tconst entry = this.dex.data.Scripts[i];\r\n\t\t\tif (typeof entry === 'function') (this as any)[i] = entry;\r\n\t\t}\r\n\r\n\t\tfor (const rule of this.ruleTable.keys()) {\r\n\t\t\tif ('+*-!'.includes(rule.charAt(0))) continue;\r\n\t\t\tconst subFormat = this.dex.formats.get(rule);\r\n\t\t\tif (subFormat.exists) {\r\n\t\t\t\tconst hasEventHandler = Object.keys(subFormat).some(\r\n\t\t\t\t\t// skip event handlers that are handled elsewhere\r\n\t\t\t\t\tval => val.startsWith('on') && ![\r\n\t\t\t\t\t\t'onBegin', 'onTeamPreview', 'onBattleStart', 'onValidateRule', 'onValidateTeam', 'onChangeSet', 'onValidateSet',\r\n\t\t\t\t\t].includes(val)\r\n\t\t\t\t);\r\n\t\t\t\tif (hasEventHandler) this.field.addPseudoWeather(rule);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Generate teams using the format\r\n\t\tfor (const side of this.sides) {\r\n\t\t\tthis.teamGenerator.setSeed(PRNG.generateSeed());\r\n\r\n\t\t\tconst team = this.teamGenerator.getTeam();\r\n\t\t\tside.team = team;\r\n\t\t\tside.pokemon = [];\r\n\t\t\tfor (let i = 0; i < team.length && i < 24; i++) {\r\n\t\t\t\tside.pokemon.push(new Pokemon(team[i], side));\r\n\t\t\t\tside.pokemon[i].position = i;\r\n\t\t\t}\r\n\t\t\tside.dynamaxUsed = this.gen !== 8;\r\n\t\t}\r\n\r\n\t\t// Everything below is copied from sim/battle.ts\r\n\r\n\t\t// Deserialized games should use restart()\r\n\t\tif (this.deserialized) return;\r\n\t\t// need all players to start\r\n\t\tif (!this.sides.every(side => !!side)) throw new Error(`Missing sides: ${this.sides}`);\r\n\r\n\t\tif (this.started) throw new Error(`Battle already started`);\r\n\r\n\t\tthis.started = true;\r\n\t\tif (this.gameType === 'multi') {\r\n\t\t\tthis.sides[1].foe = this.sides[2]!;\r\n\t\t\tthis.sides[0].foe = this.sides[3]!;\r\n\t\t\tthis.sides[2]!.foe = this.sides[1];\r\n\t\t\tthis.sides[3]!.foe = this.sides[0];\r\n\t\t\tthis.sides[1].allySide = this.sides[3]!;\r\n\t\t\tthis.sides[0].allySide = this.sides[2]!;\r\n\t\t\tthis.sides[2]!.allySide = this.sides[0];\r\n\t\t\tthis.sides[3]!.allySide = this.sides[1];\r\n\t\t\t// sync side conditions\r\n\t\t\tthis.sides[2]!.sideConditions = this.sides[0].sideConditions;\r\n\t\t\tthis.sides[3]!.sideConditions = this.sides[1].sideConditions;\r\n\t\t} else {\r\n\t\t\tthis.sides[1].foe = this.sides[0];\r\n\t\t\tthis.sides[0].foe = this.sides[1];\r\n\t\t\tif (this.sides.length > 2) { // ffa\r\n\t\t\t\tthis.sides[2]!.foe = this.sides[3]!;\r\n\t\t\t\tthis.sides[3]!.foe = this.sides[2]!;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (const side of this.sides) {\r\n\t\t\tthis.add('teamsize', side.id, side.pokemon.length);\r\n\t\t}\r\n\r\n\t\tthis.add('gen', this.gen);\r\n\r\n\t\tthis.add('tier', format.name);\r\n\t\tif (this.rated) {\r\n\t\t\tif (this.rated === 'Rated battle') this.rated = true;\r\n\t\t\tthis.add('rated', typeof this.rated === 'string' ? this.rated : '');\r\n\t\t}\r\n\r\n\t\tif (format.onBegin) format.onBegin.call(this);\r\n\t\tfor (const rule of this.ruleTable.keys()) {\r\n\t\t\tif ('+*-!'.includes(rule.charAt(0))) continue;\r\n\t\t\tconst subFormat = this.dex.formats.get(rule);\r\n\t\t\tif (subFormat.onBegin) subFormat.onBegin.call(this);\r\n\t\t}\r\n\r\n\t\tif (this.sides.some(side => !side.pokemon[0])) {\r\n\t\t\tthrow new Error('Battle not started: A player has an empty team.');\r\n\t\t}\r\n\r\n\t\tif (this.debugMode) {\r\n\t\t\tthis.checkEVBalance();\r\n\t\t}\r\n\r\n\t\tif (format.onTeamPreview) format.onTeamPreview.call(this);\r\n\t\tfor (const rule of this.ruleTable.keys()) {\r\n\t\t\tif ('+*-!'.includes(rule.charAt(0))) continue;\r\n\t\t\tconst subFormat = this.dex.formats.get(rule);\r\n\t\t\tif (subFormat.onTeamPreview) subFormat.onTeamPreview.call(this);\r\n\t\t}\r\n\r\n\t\tthis.queue.addChoice({choice: 'start'});\r\n\t\tthis.midTurn = true;\r\n\t\tif (!this.requestState) this.go();\r\n\t},\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
