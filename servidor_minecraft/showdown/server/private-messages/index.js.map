{
  "version": 3,
  "sources": ["../../../../server/private-messages/index.ts"],
  "sourcesContent": ["/**\r\n * Private message handling, particularly for offline messages.\r\n * By Mia.\r\n * @author mia-pi-git\r\n */\r\nimport {SQL, Utils} from '../../lib';\r\nimport {Config} from '../config-loader';\r\nimport {Auth} from '../user-groups';\r\nimport {statements} from './database';\r\n/** The time until a PM sent offline expires. Presently, 60 days. */\r\nexport const EXPIRY_TIME = 60 * 24 * 60 * 60 * 1000;\r\n/** The time until a PM that has been seen by the user expires. Presently, one week.*/\r\nexport const SEEN_EXPIRY_TIME = 7 * 24 * 60 * 60 * 1000;\r\n/** The max PMs that one user can have pending to a specific user at one time */\r\nexport const MAX_PENDING = 20;\r\n\r\n// this would be in database.ts, but for some weird reason, if the extension and the pm are the same\r\n// it doesn't work. all the keys in the require() result are there, but they're also set to undefined.\r\n// no idea why.\r\nexport const PM = SQL(module, {\r\n\tfile: 'databases/offline-pms.db',\r\n\textension: 'server/private-messages/database.js',\r\n});\r\n\r\nexport interface ReceivedPM {\r\n\ttime: number;\r\n\tsender: string;\r\n\treceiver: string;\r\n\tseen: number | null;\r\n\tmessage: string;\r\n}\r\n\r\nexport const PrivateMessages = new class {\r\n\tdatabase = PM;\r\n\tclearInterval = this.nextClear();\r\n\tofflineIsEnabled = Config.usesqlitepms && Config.usesqlite;\r\n\tasync sendOffline(to: string, from: User | string, message: string, context?: Chat.CommandContext) {\r\n\t\tawait this.checkCanSend(to, from);\r\n\t\tconst result = await PM.transaction('send', [toID(from), toID(to), message]);\r\n\t\tif (result.error) throw new Chat.ErrorMessage(result.error);\r\n\t\tif (typeof from === 'object') {\r\n\t\t\tfrom.send(`|pm|${this.getIdentity(from)}|${this.getIdentity(to)}|${message} __[sent offline]__`);\r\n\t\t}\r\n\t\tconst changed = !!result.changes;\r\n\t\tif (changed && context) {\r\n\t\t\tChat.runHandlers('onMessageOffline', context, message, toID(to));\r\n\t\t}\r\n\t\treturn changed;\r\n\t}\r\n\tgetSettings(userid: string) {\r\n\t\treturn PM.get(statements.getSettings, [toID(userid)]);\r\n\t}\r\n\tdeleteSettings(userid: string) {\r\n\t\treturn PM.run(statements.deleteSettings, [toID(userid)]);\r\n\t}\r\n\tasync checkCanSend(to: string, from: User | string) {\r\n\t\tfrom = toID(from);\r\n\t\tto = toID(to);\r\n\t\tconst setting = await this.getSettings(to);\r\n\t\tconst requirement = setting?.view_only || Config.usesqlitepms || \"friends\";\r\n\t\tswitch (requirement) {\r\n\t\tcase 'friends':\r\n\t\t\tif (!(await Chat.Friends.findFriendship(to, from))) {\r\n\t\t\t\tif (Config.usesqlitepms === 'friends') {\r\n\t\t\t\t\tthrow new Chat.ErrorMessage(`At this time, you may only send offline PMs to friends. ${to} is not friends with you.`);\r\n\t\t\t\t}\r\n\t\t\t\tthrow new Chat.ErrorMessage(`${to} is only accepting offline PMs from friends at this time.`);\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase 'trusted':\r\n\t\t\tif (!Users.globalAuth.has(toID(from))) {\r\n\t\t\t\tthrow new Chat.ErrorMessage(`${to} is currently blocking offline PMs from non-trusted users.`);\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase 'none':\r\n\t\t\t// drivers+ can override\r\n\t\t\tif (!Auth.atLeast(Users.globalAuth.get(from as ID), '%')) {\r\n\t\t\t\tthrow new Chat.ErrorMessage(`${to} has indicated that they do not wish to receive offine PMs.`);\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tif (!Auth.atLeast(Users.globalAuth.get(from as ID), requirement)) {\r\n\t\t\t\tif (setting?.view_only) {\r\n\t\t\t\t\tthrow new Chat.ErrorMessage(`That user is not allowing offline PMs from your rank at this time.`);\r\n\t\t\t\t}\r\n\t\t\t\tthrow new Chat.ErrorMessage('You do not meet the rank requirement to send offline PMs at this time.');\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\tsetViewOnly(user: User | string, val: string | null) {\r\n\t\tconst id = toID(user);\r\n\t\tif (!val) { // if null, no need to save\r\n\t\t\treturn PM.run(statements.deleteSettings, [id]);\r\n\t\t}\r\n\t\treturn PM.run(statements.setBlock, [id, val]);\r\n\t}\r\n\tcheckCanUse(user: User, options = {forceBool: false, isLogin: false}) {\r\n\t\tif (!this.offlineIsEnabled) {\r\n\t\t\tif (options.forceBool) return false;\r\n\t\t\tthrow new Chat.ErrorMessage(`Offline PMs are currently disabled.`);\r\n\t\t}\r\n\t\tif (!(options.isLogin ? user.registered : user.autoconfirmed)) {\r\n\t\t\tif (options.forceBool) return false;\r\n\t\t\tthrow new Chat.ErrorMessage(\"You must be autoconfirmed to use offine messaging.\");\r\n\t\t}\r\n\t\tif (!Users.globalAuth.atLeast(user, Config.usesqlitepms)) {\r\n\t\t\tif (options.forceBool) return false;\r\n\t\t\tthrow new Chat.ErrorMessage(\"You do not have the needed rank to send offline PMs.\");\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\tcheckCanPM(user: User, pmTarget: ID) {\r\n\t\tthis.checkCanUse(user);\r\n\t\tif (Config.usesqlitepms === 'friends' && !user.friends?.has(pmTarget)) {\r\n\t\t\tthrow new Chat.ErrorMessage(\r\n\t\t\t\t`At this time, you may only send offline messages to friends. You do not have ${pmTarget} friended.`\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\tasync sendReceived(user: User) {\r\n\t\tconst userid = toID(user);\r\n\t\t// we only want to send the unseen pms to them when they login - they can replay the rest at will otherwise\r\n\t\tconst messages = await this.fetchUnseen(userid);\r\n\t\tfor (const {message, time, sender} of messages) {\r\n\t\t\tuser.send(\r\n\t\t\t\t`|pm|${this.getIdentity(sender)}|${this.getIdentity(user)}|/html ` +\r\n\t\t\t\t`${Utils.escapeHTML(message)} __[sent offline, <time>${new Date(time).toISOString()}</time>]__`\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\tprivate getIdentity(user: User | string) {\r\n\t\tuser = Users.getExact(user) || user;\r\n\t\tif (typeof user === 'object') {\r\n\t\t\treturn user.getIdentity();\r\n\t\t}\r\n\t\treturn `${Users.globalAuth.get(toID(user))}${user}`;\r\n\t}\r\n\tnextClear(): NodeJS.Timer {\r\n\t\tif (!PM.isParentProcess) return null!;\r\n\t\tconst time = Date.now();\r\n\t\t// even though we expire once a week atm, we check once a day\r\n\t\tconst nextMidnight = new Date(time + 24 * 60 * 60 * 1000);\r\n\t\tnextMidnight.setHours(0, 0, 1);\r\n\t\tif (this.clearInterval) clearTimeout(this.clearInterval);\r\n\t\tthis.clearInterval = setTimeout(() => {\r\n\t\t\tvoid this.clearOffline();\r\n\t\t\tvoid this.clearSeen();\r\n\t\t\tthis.nextClear();\r\n\t\t}, nextMidnight.getTime() - time);\r\n\t\treturn this.clearInterval;\r\n\t}\r\n\tclearSeen() {\r\n\t\treturn PM.run(statements.clearSeen);\r\n\t}\r\n\tsend(message: string, user: User, pmTarget: User, onlyRecipient: User | null = null) {\r\n\t\tconst buf = `|pm|${user.getIdentity()}|${pmTarget.getIdentity()}|${message}`;\r\n\t\tif (onlyRecipient) return onlyRecipient.send(buf);\r\n\t\tuser.send(buf);\r\n\t\tif (pmTarget !== user) pmTarget.send(buf);\r\n\t\tpmTarget.lastPM = user.id;\r\n\t\tuser.lastPM = pmTarget.id;\r\n\t}\r\n\tasync fetchUnseen(user: User | string): Promise<ReceivedPM[]> {\r\n\t\tconst userid = toID(user);\r\n\t\treturn (await PM.transaction('listNew', [userid])) || [];\r\n\t}\r\n\tasync fetchAll(user: User | string): Promise<ReceivedPM[]> {\r\n\t\treturn (await PM.all(statements.fetch, [toID(user)])) || [];\r\n\t}\r\n\tasync renderReceived(user: User) {\r\n\t\tconst all = await this.fetchAll(user);\r\n\t\tlet buf = `<div class=\"ladder pad\">`;\r\n\t\tbuf += `<h2>PMs received offline in the last ${Chat.toDurationString(SEEN_EXPIRY_TIME)}</h2>`;\r\n\t\tconst sortedPMs: {[userid: string]: ReceivedPM[]} = {};\r\n\t\tfor (const curPM of all) {\r\n\t\t\tif (!sortedPMs[curPM.sender]) sortedPMs[curPM.sender] = [];\r\n\t\t\tsortedPMs[curPM.sender].push(curPM);\r\n\t\t}\r\n\t\tfor (const k in sortedPMs) {\r\n\t\t\tUtils.sortBy(sortedPMs[k], pm => -pm.time);\r\n\t\t}\r\n\t\tbuf += `<div class=\"mainmenuwrapper\" style=\"margin-left:40px\">`;\r\n\t\tfor (const pair of Utils.sortBy(Object.entries(sortedPMs), ([id]) => id)) {\r\n\t\t\tconst [sender, messages] = pair;\r\n\t\t\tconst group = Users.globalAuth.get(toID(sender));\r\n\t\t\tconst name = Users.getExact(sender)?.name || sender;\r\n\t\t\tconst id = toID(name);\r\n\t\t\tbuf += Utils.html`<div class=\"pm-window pm-window-${id}\" width=\"30px\" data-userid=\"${id}\" data-name=\"${group}${name}\" style=\"width:300px\">`;\r\n\t\t\tbuf += Utils.html`<h3><small>${group}</small>${name}</h3>`;\r\n\t\t\tbuf += `<div class=\"pm-log\"><div class=\"pm-buttonbar\">`;\r\n\t\t\tfor (const {message, time} of messages) {\r\n\t\t\t\tbuf += `<div class=\"chat chatmessage-${toID(sender)}\">&nbsp;&nbsp;`;\r\n\t\t\t\tbuf += `<small>[<time>${new Date(time).toISOString()}</time>] </small>`;\r\n\t\t\t\tbuf += Utils.html`<small>${group}</small>`;\r\n\t\t\t\tbuf += Utils.html`<span class=\"username\" data-roomgroup=\"${group}\" data-name=\"${name}\"><username>${name}</username></span>: `;\r\n\t\t\t\tbuf += `<em>${message}</em></div>`;\r\n\t\t\t}\r\n\t\t\tbuf += `</div></div></div>`;\r\n\t\t\tbuf += `<br />`;\r\n\t\t}\r\n\t\tbuf += `</div>`;\r\n\t\treturn buf;\r\n\t}\r\n\tclearOffline() {\r\n\t\treturn PM.run(statements.clearDated);\r\n\t}\r\n\tdestroy() {\r\n\t\tvoid PM.destroy();\r\n\t}\r\n};\r\n\r\nif (Config.usesqlite) {\r\n\tif (!process.send) {\r\n\t\tPM.spawn(Config.pmprocesses || 1);\r\n\t\t// clear super old pms on startup\r\n\t\tvoid PM.run(statements.clearDated);\r\n\t} else if (process.send && process.mainModule === module) {\r\n\t\tglobal.Monitor = {\r\n\t\t\tcrashlog(error: Error, source = 'A private message child process', details: AnyObject | null = null) {\r\n\t\t\t\tconst repr = JSON.stringify([error.name, error.message, source, details]);\r\n\t\t\t\tprocess.send!(`THROW\\n@!!@${repr}\\n${error.stack}`);\r\n\t\t\t},\r\n\t\t};\r\n\t\tprocess.on('uncaughtException', err => {\r\n\t\t\tMonitor.crashlog(err, 'A private message database process');\r\n\t\t});\r\n\t\tprocess.on('unhandledRejection', err => {\r\n\t\t\tMonitor.crashlog(err as Error, 'A private message database process');\r\n\t\t});\r\n\t}\r\n}\r\n\r\n"],
  "mappings": "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",
  "names": []
}
