{
  "version": 3,
  "sources": ["../../../../server/tournaments/index.ts"],
  "sourcesContent": ["\r\nimport {Elimination} from './generator-elimination';\r\nimport {RoundRobin} from './generator-round-robin';\r\nimport {Utils} from '../../lib';\r\nimport {PRNG} from '../../sim/prng';\r\nimport type {BestOfGame} from '../room-battle-bestof';\r\n\r\nexport interface TournamentRoomSettings {\r\n\tallowModjoin?: boolean;\r\n\tallowScouting?: boolean;\r\n\tannouncements?: boolean;\r\n\tautoconfirmedOnly?: boolean;\r\n\tautodq?: number;\r\n\tautostart?: number | boolean;\r\n\tforcePublic?: boolean;\r\n\tforceTimer?: boolean;\r\n\tplayerCap?: number;\r\n\trecentToursLength?: number;\r\n\trecentTours?: {name: string, baseFormat: string, time: number}[];\r\n\tblockRecents?: boolean;\r\n}\r\n\r\ntype Generator = RoundRobin | Elimination;\r\n\r\nconst BRACKET_MINIMUM_UPDATE_INTERVAL = 2 * 1000;\r\nconst AUTO_DISQUALIFY_WARNING_TIMEOUT = 30 * 1000;\r\nconst MAX_AUTO_DISQUALIFY_TIMEOUT = 60 * 60 * 1000;\r\nconst AUTO_START_MINIMUM_TIMEOUT = 30 * 1000;\r\nconst MAX_REASON_LENGTH = 300;\r\nconst MAX_CUSTOM_NAME_LENGTH = 100;\r\nconst TOURBAN_DURATION = 14 * 24 * 60 * 60 * 1000;\r\n\r\nPunishments.addRoomPunishmentType({\r\n\ttype: 'TOURBAN',\r\n\tdesc: 'banned from tournaments',\r\n});\r\n\r\nconst TournamentGenerators = {\r\n\t__proto__: null,\r\n\troundrobin: RoundRobin,\r\n\telimination: Elimination,\r\n};\r\n\r\nfunction usersToNames(users: TournamentPlayer[]) {\r\n\treturn users.map(user => user.name);\r\n}\r\n\r\nexport class TournamentPlayer extends Rooms.RoomGamePlayer<Tournament> {\r\n\treadonly availableMatches: Set<TournamentPlayer>;\r\n\tisBusy: boolean;\r\n\tinProgressMatch: {to: TournamentPlayer, room: GameRoom} | null;\r\n\tpendingChallenge: {\r\n\t\tfrom?: TournamentPlayer,\r\n\t\tto?: TournamentPlayer,\r\n\t\tteam: string,\r\n\t\thidden: boolean,\r\n\t\tinviteOnly: boolean,\r\n\t} | null;\r\n\tisDisqualified: boolean;\r\n\tisEliminated: boolean;\r\n\tautoDisqualifyWarned: boolean;\r\n\tlastActionTime: number;\r\n\twins: number;\r\n\tlosses: number;\r\n\tgames: number;\r\n\tscore: number;\r\n\tconstructor(user: User | string | null, game: Tournament, num: number) {\r\n\t\tsuper(user, game, num);\r\n\t\tthis.availableMatches = new Set();\r\n\t\tthis.isBusy = false;\r\n\t\tthis.inProgressMatch = null;\r\n\t\tthis.pendingChallenge = null;\r\n\t\tthis.isDisqualified = false;\r\n\t\tthis.isEliminated = false;\r\n\t\tthis.autoDisqualifyWarned = false;\r\n\t\tthis.lastActionTime = 0;\r\n\r\n\t\tthis.wins = 0;\r\n\t\tthis.losses = 0;\r\n\t\tthis.games = 0;\r\n\t\tthis.score = 0;\r\n\t}\r\n}\r\n\r\nexport class Tournament extends Rooms.RoomGame<TournamentPlayer> {\r\n\toverride readonly gameid = 'tournament' as ID;\r\n\treadonly isTournament: true;\r\n\treadonly completedMatches: Set<RoomID>;\r\n\t/** Format ID not including custom rules */\r\n\treadonly baseFormat: ID;\r\n\t/**\r\n\t * Full format specifier, including custom rules (such as 'gen7challengecup1v1@@@speciesclause')\r\n\t */\r\n\tfullFormat: string;\r\n\tname: string;\r\n\tcustomRules: string[];\r\n\tgenerator: Generator;\r\n\tisRated: boolean;\r\n\tallowScouting: boolean;\r\n\tallowModjoin: boolean;\r\n\tautoconfirmedOnly: boolean;\r\n\tforceTimer: boolean;\r\n\tautostartcap: boolean;\r\n\tforcePublic: boolean;\r\n\tisTournamentStarted: boolean;\r\n\tisBracketInvalidated: boolean;\r\n\tlastBracketUpdate: number;\r\n\tbracketUpdateTimer: NodeJS.Timeout | null;\r\n\tbracketCache: AnyObject | null;\r\n\tisAvailableMatchesInvalidated: boolean;\r\n\tavailableMatchesCache: {\r\n\t\tchallenges: Map<TournamentPlayer, TournamentPlayer[]>, challengeBys: Map<TournamentPlayer, TournamentPlayer[]>,\r\n\t};\r\n\tautoDisqualifyTimeout: number;\r\n\tautoDisqualifyTimer: NodeJS.Timeout | null;\r\n\tautoStartTimeout: number;\r\n\tautoStartTimer: NodeJS.Timeout | null;\r\n\r\n\tconstructor(\r\n\t\troom: ChatRoom, format: Format, generator: Generator,\r\n\t\tplayerCap: string | undefined, isRated: boolean, name: string | undefined\r\n\t) {\r\n\t\tsuper(room);\r\n\t\tconst formatId = toID(format);\r\n\r\n\t\tthis.title = format.name + ' tournament';\r\n\t\tthis.isTournament = true;\r\n\t\tthis.completedMatches = new Set();\r\n\t\tthis.allowRenames = false;\r\n\t\tthis.playerCap = (playerCap ? parseInt(playerCap) : Config.tourdefaultplayercap) || 0;\r\n\r\n\t\tthis.baseFormat = formatId;\r\n\t\tthis.fullFormat = formatId;\r\n\t\t// This will sometimes be sent alone in updates as \"format\", if the tour doesn't have a custom name\r\n\t\tthis.name = name || formatId;\r\n\t\tthis.customRules = [];\r\n\t\tthis.generator = generator;\r\n\t\tthis.isRated = isRated;\r\n\t\tthis.allowScouting = true;\r\n\t\tthis.allowModjoin = false;\r\n\t\tthis.autoconfirmedOnly = false;\r\n\t\tthis.forceTimer = false;\r\n\t\tthis.autostartcap = false;\r\n\t\tthis.forcePublic = false;\r\n\t\tif (Config.tourdefaultplayercap && this.playerCap > Config.tourdefaultplayercap) {\r\n\t\t\tMonitor.log(`[TourMonitor] Room ${room.roomid} starting a tour over default cap (${this.playerCap})`);\r\n\t\t}\r\n\r\n\t\tthis.isTournamentStarted = false;\r\n\r\n\t\tthis.isBracketInvalidated = true;\r\n\t\tthis.lastBracketUpdate = 0;\r\n\t\tthis.bracketUpdateTimer = null;\r\n\t\tthis.bracketCache = null;\r\n\r\n\t\tthis.isAvailableMatchesInvalidated = true;\r\n\t\tthis.availableMatchesCache = {challenges: new Map(), challengeBys: new Map()};\r\n\r\n\t\tthis.autoDisqualifyTimeout = Infinity;\r\n\t\tthis.autoDisqualifyTimer = null;\r\n\t\tthis.autoStartTimeout = Infinity;\r\n\t\tthis.autoStartTimer = null;\r\n\r\n\t\troom.add(`|tournament|create|${this.baseFormat}|${generator.name}|${this.playerCap}${this.name === this.baseFormat ? `` : `|${this.name}`}`);\r\n\t\tconst update: {\r\n\t\t\tformat: string, teambuilderFormat?: string, generator: string,\r\n\t\t\tplayerCap: number, isStarted: boolean, isJoined: boolean,\r\n\t\t} = {\r\n\t\t\tformat: this.name,\r\n\t\t\tgenerator: generator.name,\r\n\t\t\tplayerCap: this.playerCap,\r\n\t\t\tisStarted: false,\r\n\t\t\tisJoined: false,\r\n\t\t};\r\n\t\tif (this.name !== this.baseFormat) update.teambuilderFormat = this.baseFormat;\r\n\t\troom.send(`|tournament|update|${JSON.stringify(update)}`);\r\n\t\tthis.update();\r\n\t}\r\n\tdestroy() {\r\n\t\tthis.forceEnd();\r\n\t}\r\n\tremove() {\r\n\t\tif (this.autoStartTimer) clearTimeout(this.autoStartTimer);\r\n\t\tif (this.autoDisqualifyTimer) clearTimeout(this.autoDisqualifyTimer);\r\n\t\tfor (const roomid of this.completedMatches) {\r\n\t\t\tconst room = Rooms.get(roomid) as GameRoom;\r\n\t\t\tif (room) room.tour = null;\r\n\t\t}\r\n\t\tthis.setEnded();\r\n\t\tthis.room.game = null;\r\n\t}\r\n\tgetRemainingPlayers() {\r\n\t\treturn this.players.filter(player => !player.isDisqualified && !player.isEliminated);\r\n\t}\r\n\r\n\tsetGenerator(generator: Generator, output: Chat.CommandContext) {\r\n\t\tif (this.isTournamentStarted) {\r\n\t\t\toutput.sendReply('|tournament|error|BracketFrozen');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.generator = generator;\r\n\t\tthis.room.send(`|tournament|update|${JSON.stringify({generator: generator.name})}`);\r\n\t\tthis.isBracketInvalidated = true;\r\n\t\tthis.update();\r\n\t\treturn true;\r\n\t}\r\n\r\n\tsetCustomRules(rules: string) {\r\n\t\tlet format;\r\n\t\ttry {\r\n\t\t\tconst tryFormat = Dex.formats.validate(`${this.baseFormat}@@@${rules}`);\r\n\t\t\tformat = Dex.formats.get(tryFormat, true);\r\n\r\n\t\t\t// In tours of formats with generated teams, custom rule errors should be checked for here,\r\n\t\t\t// since users can't edit their teams to avoid them at matching time\r\n\t\t\tif (format.team) {\r\n\t\t\t\tconst testTeamSeed = PRNG.generateSeed();\r\n\t\t\t\tconst testTeamGenerator = Teams.getGenerator(format, testTeamSeed);\r\n\t\t\t\ttestTeamGenerator.getTeam(); // Throws error if generation fails\r\n\t\t\t}\r\n\t\t\tthis.fullFormat = tryFormat;\r\n\t\t} catch (e: any) {\r\n\t\t\tthrow new Chat.ErrorMessage(`Custom rule error: ${e.message}`);\r\n\t\t}\r\n\r\n\t\tconst customRules = format.customRules;\r\n\t\tif (!customRules) {\r\n\t\t\tthrow new Chat.ErrorMessage(`Invalid rules.`);\r\n\t\t}\r\n\t\tthis.customRules = customRules;\r\n\t\tif (this.name === this.baseFormat) {\r\n\t\t\tthis.name = this.getDefaultCustomName();\r\n\t\t\tthis.room.send(`|tournament|update|${JSON.stringify({format: this.name})}`);\r\n\t\t\tthis.update();\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tgetCustomRules() {\r\n\t\tconst bans = [];\r\n\t\tconst unbans = [];\r\n\t\tconst restrictions = [];\r\n\t\tconst addedRules = [];\r\n\t\tconst removedRules = [];\r\n\t\tfor (const ban of this.customRules) {\r\n\t\t\tconst charAt0 = ban.charAt(0);\r\n\t\t\tif (charAt0 === '+') {\r\n\t\t\t\tunbans.push(ban.substr(1));\r\n\t\t\t} else if (charAt0 === '-') {\r\n\t\t\t\tbans.push(ban.substr(1));\r\n\t\t\t} else if (charAt0 === '*') {\r\n\t\t\t\trestrictions.push(ban.substr(1));\r\n\t\t\t} else if (charAt0 === '!') {\r\n\t\t\t\tremovedRules.push(ban.substr(1));\r\n\t\t\t} else {\r\n\t\t\t\taddedRules.push(ban);\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst html = [];\r\n\t\tif (bans.length) html.push(Utils.html`<b>Added bans</b> - ${bans.join(', ')}`);\r\n\t\tif (unbans.length) html.push(Utils.html`<b>Removed bans</b> - ${unbans.join(', ')}`);\r\n\t\tif (restrictions.length) html.push(Utils.html`<b>Added restrictions</b> - ${restrictions.join(', ')}`);\r\n\t\tif (addedRules.length) html.push(Utils.html`<b>Added rules</b> - ${addedRules.join(', ')}`);\r\n\t\tif (removedRules.length) html.push(Utils.html`<b>Removed rules</b> - ${removedRules.join(', ')}`);\r\n\t\treturn html.join(`<br />`);\r\n\t}\r\n\r\n\tforceEnd() {\r\n\t\tif (this.isTournamentStarted) {\r\n\t\t\tif (this.autoDisqualifyTimer) clearTimeout(this.autoDisqualifyTimer);\r\n\t\t\tfor (const player of this.players) {\r\n\t\t\t\tconst match = player.inProgressMatch;\r\n\t\t\t\tif (match) {\r\n\t\t\t\t\tmatch.room.tour = null;\r\n\t\t\t\t\tmatch.room.setParent(null);\r\n\t\t\t\t\tmatch.room.addRaw(`<div class=\"broadcast-red\"><b>The tournament was forcefully ended.</b><br />You can finish playing, but this battle is no longer considered a tournament battle.</div>`);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.room.add('|tournament|forceend');\r\n\t\tthis.remove();\r\n\t}\r\n\r\n\tupdateFor(targetUser: User, connection?: Connection | User) {\r\n\t\tif (!connection) connection = targetUser;\r\n\t\tif (this.ended) return;\r\n\r\n\t\tif ((!this.bracketUpdateTimer && this.isBracketInvalidated) ||\r\n\t\t\t(this.isTournamentStarted && this.isAvailableMatchesInvalidated)) {\r\n\t\t\tthis.room.add(\r\n\t\t\t\t\"Error: update() called with a target user when data invalidated: \" +\r\n\t\t\t\t(!this.bracketUpdateTimer && this.isBracketInvalidated) + \", \" +\r\n\t\t\t\t(this.isTournamentStarted && this.isAvailableMatchesInvalidated) +\r\n\t\t\t\t\"; Please report this to an admin.\"\r\n\t\t\t);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst possiblePlayer = this.playerTable[targetUser.id];\r\n\t\tlet isJoined = false;\r\n\t\tif (possiblePlayer) {\r\n\t\t\tif (this.generator.name.includes(\"Elimination\")) {\r\n\t\t\t\tisJoined = !possiblePlayer.isEliminated && !possiblePlayer.isDisqualified;\r\n\t\t\t} else if (this.generator.name.includes(\"Round Robin\")) {\r\n\t\t\t\tif (possiblePlayer.isDisqualified) {\r\n\t\t\t\t\tisJoined = !possiblePlayer.isDisqualified;\r\n\t\t\t\t} else if ((this.generator as RoundRobin)?.matchesPerPlayer) {\r\n\t\t\t\t\tisJoined = possiblePlayer.games !== (this.generator as RoundRobin).matchesPerPlayer;\r\n\t\t\t\t} else if (!this.isTournamentStarted) {\r\n\t\t\t\t\tisJoined = true;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tisJoined = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst update: {\r\n\t\t\tformat: string, teambuilderFormat?: string, generator: string,\r\n\t\t\tisStarted: boolean, isJoined: boolean, bracketData: AnyObject,\r\n\t\t} = {\r\n\t\t\tformat: this.name,\r\n\t\t\tgenerator: this.generator.name,\r\n\t\t\tisStarted: this.isTournamentStarted,\r\n\t\t\tisJoined,\r\n\t\t\tbracketData: this.bracketCache!,\r\n\t\t};\r\n\t\tif (this.name !== this.baseFormat) update.teambuilderFormat = this.baseFormat;\r\n\t\tconnection.sendTo(this.room, `|tournament|update|${JSON.stringify(update)}`);\r\n\t\tif (this.isTournamentStarted && isJoined) {\r\n\t\t\tconst update2 = {\r\n\t\t\t\tchallenges: usersToNames(this.availableMatchesCache.challenges.get(this.playerTable[targetUser.id])!),\r\n\t\t\t\tchallengeBys: usersToNames(this.availableMatchesCache.challengeBys.get(this.playerTable[targetUser.id])!),\r\n\t\t\t};\r\n\t\t\tconnection.sendTo(this.room, `|tournament|update|${JSON.stringify(update2)}`);\r\n\r\n\t\t\tconst pendingChallenge = this.playerTable[targetUser.id].pendingChallenge;\r\n\t\t\tif (pendingChallenge) {\r\n\t\t\t\tif (pendingChallenge.to) {\r\n\t\t\t\t\tconnection.sendTo(this.room, `|tournament|update|${JSON.stringify({challenging: pendingChallenge.to.name})}`);\r\n\t\t\t\t} else if (pendingChallenge.from) {\r\n\t\t\t\t\tconnection.sendTo(this.room, `|tournament|update|${JSON.stringify({challenged: pendingChallenge.from.name})}`);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tconnection.sendTo(this.room, '|tournament|updateEnd');\r\n\t}\r\n\r\n\tupdate() {\r\n\t\tif (this.ended) return;\r\n\t\tif (this.isBracketInvalidated) {\r\n\t\t\tif (Date.now() < this.lastBracketUpdate + BRACKET_MINIMUM_UPDATE_INTERVAL) {\r\n\t\t\t\tif (this.bracketUpdateTimer) clearTimeout(this.bracketUpdateTimer);\r\n\t\t\t\tthis.bracketUpdateTimer = setTimeout(() => {\r\n\t\t\t\t\tthis.bracketUpdateTimer = null;\r\n\t\t\t\t\tthis.update();\r\n\t\t\t\t}, BRACKET_MINIMUM_UPDATE_INTERVAL);\r\n\t\t\t} else {\r\n\t\t\t\tthis.lastBracketUpdate = Date.now();\r\n\r\n\t\t\t\tthis.bracketCache = this.getBracketData();\r\n\t\t\t\tthis.isBracketInvalidated = false;\r\n\t\t\t\tthis.room.send(`|tournament|update|${JSON.stringify({bracketData: this.bracketCache})}`);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.isTournamentStarted && this.isAvailableMatchesInvalidated) {\r\n\t\t\tthis.availableMatchesCache = this.getAvailableMatches();\r\n\r\n\t\t\tthis.isAvailableMatchesInvalidated = false;\r\n\t\t\tfor (const [player, opponents] of this.availableMatchesCache.challenges) {\r\n\t\t\t\tplayer.sendRoom(`|tournament|update|${JSON.stringify({challenges: usersToNames(opponents)})}`);\r\n\t\t\t}\r\n\t\t\tfor (const [player, opponents] of this.availableMatchesCache.challengeBys) {\r\n\t\t\t\tplayer.sendRoom(`|tournament|update|${JSON.stringify({challengeBys: usersToNames(opponents)})}`);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.room.send('|tournament|updateEnd');\r\n\t}\r\n\r\n\tstatic checkBanned(room: Room, user: User | string) {\r\n\t\treturn Punishments.hasRoomPunishType(room, toID(user), 'TOURBAN');\r\n\t}\r\n\r\n\tremoveBannedUser(userid: User | ID) {\r\n\t\tuserid = toID(userid);\r\n\t\tif (!(userid in this.playerTable)) return;\r\n\t\tif (this.isTournamentStarted) {\r\n\t\t\tconst player = this.playerTable[userid];\r\n\t\t\tif (!player.isDisqualified) {\r\n\t\t\t\tthis.disqualifyUser(userid);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.removeUser(userid);\r\n\t\t}\r\n\t\tthis.room.update();\r\n\t}\r\n\r\n\taddUser(user: User, output: Chat.CommandContext) {\r\n\t\tif (!user.named) {\r\n\t\t\toutput.sendReply('|tournament|error|UserNotNamed');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (user.id in this.playerTable) {\r\n\t\t\toutput.sendReply('|tournament|error|UserAlreadyAdded');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this.playerCap && this.playerCount >= this.playerCap) {\r\n\t\t\toutput.sendReply('|tournament|error|Full');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (Tournament.checkBanned(this.room, user) || Punishments.isBattleBanned(user) || user.namelocked) {\r\n\t\t\toutput.sendReply('|tournament|error|Banned');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif ((this.room.settings.tournaments?.autoconfirmedOnly || this.autoconfirmedOnly) &&\r\n\t\t   !user.autoconfirmed && !user.trusted) {\r\n\t\t\tuser.popup(\"Signups for tournaments are only available for autoconfirmed users in this room.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst gameCount = user.games.size;\r\n\t\tif (gameCount > 4) {\r\n\t\t\toutput.errorReply(\"Due to high load, you are limited to 4 games at the same time.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!Config.noipchecks) {\r\n\t\t\tfor (const otherPlayer of this.players) {\r\n\t\t\t\tif (!otherPlayer) continue;\r\n\t\t\t\tconst otherUser = Users.get(otherPlayer.id);\r\n\t\t\t\tif (otherUser && otherUser.latestIp === user.latestIp) {\r\n\t\t\t\t\toutput.sendReply('|tournament|error|AltUserAlreadyAdded');\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.isTournamentStarted) {\r\n\t\t\toutput.sendReply(`|tournament|error|BracketFrozen`);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst player = this.addPlayer(user);\r\n\t\tif (!player) throw new Error(\"Failed to add player.\");\r\n\r\n\t\tthis.playerTable[user.id] = player;\r\n\t\tthis.room.add(`|tournament|join|${user.name}`);\r\n\t\tuser.sendTo(this.room, '|tournament|update|{\"isJoined\":true}');\r\n\t\tthis.isBracketInvalidated = true;\r\n\t\tthis.update();\r\n\t\tif (this.playerCount === this.playerCap) {\r\n\t\t\tif (this.autostartcap === true) {\r\n\t\t\t\tthis.startTournament(output);\r\n\t\t\t} else {\r\n\t\t\t\tthis.room.add(\"The tournament is now full.\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tmakePlayer(user: User | string | null) {\r\n\t\tconst num = this.players.length ? this.players[this.players.length - 1].num : 1;\r\n\t\treturn new TournamentPlayer(user, this, num);\r\n\t}\r\n\r\n\tremoveUser(userid: ID, output?: Chat.CommandContext) {\r\n\t\tconst player = this.playerTable[userid];\r\n\t\tif (!player) {\r\n\t\t\tif (output) output.sendReply('|tournament|error|UserNotAdded');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.removePlayer(player);\r\n\t\tconst user = Users.get(userid);\r\n\t\tthis.room.add(`|tournament|leave|${user ? user.name : userid}`);\r\n\t\tif (user) user.sendTo(this.room, '|tournament|update|{\"isJoined\":false}');\r\n\t\tthis.isBracketInvalidated = true;\r\n\t\tthis.update();\r\n\t}\r\n\treplaceUser(user: User, replacementUser: User, output: Chat.CommandContext) {\r\n\t\tif (!this.isTournamentStarted) {\r\n\t\t\toutput.sendReply('|tournament|error|NotStarted');\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!(user.id in this.playerTable)) {\r\n\t\t\toutput.errorReply(`${user.name} isn't in the tournament.`);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!replacementUser.named) {\r\n\t\t\toutput.errorReply(`${replacementUser.name} must be named to join the tournament.`);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (replacementUser.id in this.playerTable) {\r\n\t\t\toutput.errorReply(`${replacementUser.name} is already in the tournament.`);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (Tournament.checkBanned(this.room, replacementUser) || Punishments.isBattleBanned(replacementUser) ||\r\n\t\t\treplacementUser.namelocked) {\r\n\t\t\toutput.errorReply(`${replacementUser.name} is banned from joining tournaments.`);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif ((this.room.settings.tournaments?.autoconfirmedOnly || this.autoconfirmedOnly) && !user.autoconfirmed) {\r\n\t\t\tuser.popup(\"Signups for tournaments are only available for autoconfirmed users in this room.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!Config.noipchecks) {\r\n\t\t\tfor (const otherPlayer of this.players) {\r\n\t\t\t\tif (!otherPlayer) continue;\r\n\t\t\t\tconst otherUser = Users.get(otherPlayer.id);\r\n\t\t\t\tif (otherUser &&\r\n\t\t\t\t\totherUser.latestIp === replacementUser.latestIp &&\r\n\t\t\t\t\treplacementUser.latestIp !== user.latestIp) {\r\n\t\t\t\t\toutput.errorReply(`${replacementUser.name} already has an alt in the tournament.`);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!(replacementUser.id in this.room.users)) {\r\n\t\t\toutput.errorReply(`${replacementUser.name} is not in this room (${this.room.title}).`);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst player = this.playerTable[user.id];\r\n\t\tif (player.pendingChallenge) {\r\n\t\t\tthis.cancelChallenge(user, output);\r\n\t\t}\r\n\r\n\t\t// Replace the player\r\n\t\tthis.setPlayerUser(player, replacementUser);\r\n\r\n\t\t// Reset and invalidate any in progress battles\r\n\t\tlet matchPlayer = null;\r\n\t\tif (player.inProgressMatch) {\r\n\t\t\tmatchPlayer = player;\r\n\t\t} else {\r\n\t\t\tfor (const p of this.players) {\r\n\t\t\t\tif (p.inProgressMatch && p.inProgressMatch.to === player) {\r\n\t\t\t\t\tmatchPlayer = p;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (matchPlayer?.inProgressMatch) {\r\n\t\t\tmatchPlayer.inProgressMatch.to.isBusy = false;\r\n\t\t\tmatchPlayer.isBusy = false;\r\n\r\n\t\t\tmatchPlayer.inProgressMatch.room.addRaw(\r\n\t\t\t\tUtils.html`<div class=\"broadcast-red\"><b>${user.name} is no longer in the tournament.<br />` +\r\n\t\t\t\t`You can finish playing, but this battle is no longer considered a tournament battle.</div>`\r\n\t\t\t).update();\r\n\t\t\tmatchPlayer.inProgressMatch.room.setParent(null);\r\n\t\t\tthis.completedMatches.add(matchPlayer.inProgressMatch.room.roomid);\r\n\t\t\tmatchPlayer.inProgressMatch = null;\r\n\t\t}\r\n\r\n\t\tthis.isAvailableMatchesInvalidated = true;\r\n\t\tthis.isBracketInvalidated = true;\r\n\t\t// Update the bracket\r\n\t\tthis.update();\r\n\t\tthis.updateFor(user);\r\n\t\tthis.updateFor(replacementUser);\r\n\t\tconst challengePlayer = player.pendingChallenge &&\r\n\t\t\t(player.pendingChallenge.from || player.pendingChallenge.to);\r\n\t\tif (challengePlayer) {\r\n\t\t\tconst challengeUser = Users.getExact(challengePlayer.id);\r\n\t\t\tif (challengeUser) this.updateFor(challengeUser);\r\n\t\t}\r\n\r\n\t\tthis.room.add(`|tournament|replace|${user.name}|${replacementUser.name}`);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tgetBracketData() {\r\n\t\tlet data: any;\r\n\t\tif (!this.isTournamentStarted) {\r\n\t\t\tdata = this.generator.getPendingBracketData(this.players);\r\n\t\t} else {\r\n\t\t\tdata = this.generator.getBracketData();\r\n\t\t}\r\n\t\tif (data.type === 'tree') {\r\n\t\t\tif (!data.rootNode) {\r\n\t\t\t\tdata.users = usersToNames(this.players.sort());\r\n\t\t\t\treturn data;\r\n\t\t\t}\r\n\t\t\tconst queue = [data.rootNode];\r\n\t\t\twhile (queue.length > 0) {\r\n\t\t\t\tconst node = queue.shift();\r\n\r\n\t\t\t\tif (node.state === 'available') {\r\n\t\t\t\t\tconst pendingChallenge = node.children[0].team.pendingChallenge;\r\n\t\t\t\t\tif (pendingChallenge && node.children[1].team === pendingChallenge.to) {\r\n\t\t\t\t\t\tnode.state = 'challenging';\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst inProgressMatch = node.children[0].team.inProgressMatch;\r\n\t\t\t\t\tif (inProgressMatch && node.children[1].team === inProgressMatch.to) {\r\n\t\t\t\t\t\tnode.state = 'inprogress';\r\n\t\t\t\t\t\tnode.room = inProgressMatch.room.roomid;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (node.team && typeof node.team !== 'string') {\r\n\t\t\t\t\tnode.team = node.team.name;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (node.children) {\r\n\t\t\t\t\tfor (const child of node.children) {\r\n\t\t\t\t\t\tqueue.push(child);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if (data.type === 'table') {\r\n\t\t\tif (this.isTournamentStarted) {\r\n\t\t\t\tfor (const [r, row] of data.tableContents.entries()) {\r\n\t\t\t\t\tconst pendingChallenge = data.tableHeaders.rows[r].pendingChallenge;\r\n\t\t\t\t\tconst inProgressMatch = data.tableHeaders.rows[r].inProgressMatch;\r\n\t\t\t\t\tif (pendingChallenge || inProgressMatch) {\r\n\t\t\t\t\t\tfor (const [c, cell] of row.entries()) {\r\n\t\t\t\t\t\t\tif (!cell) continue;\r\n\r\n\t\t\t\t\t\t\tif (pendingChallenge && data.tableHeaders.cols[c] === pendingChallenge.to) {\r\n\t\t\t\t\t\t\t\tcell.state = 'challenging';\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (inProgressMatch && data.tableHeaders.cols[c] === inProgressMatch.to) {\r\n\t\t\t\t\t\t\t\tcell.state = 'inprogress';\r\n\t\t\t\t\t\t\t\tcell.room = inProgressMatch.room.roomid;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tdata.tableHeaders.cols = usersToNames(data.tableHeaders.cols);\r\n\t\t\tdata.tableHeaders.rows = usersToNames(data.tableHeaders.rows);\r\n\t\t}\r\n\t\treturn data;\r\n\t}\r\n\r\n\tstartTournament(output: Chat.CommandContext, isAutostart?: boolean) {\r\n\t\tif (this.isTournamentStarted) {\r\n\t\t\toutput.sendReply('|tournament|error|AlreadyStarted');\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (this.players.length < 2) {\r\n\t\t\tif (isAutostart) {\r\n\t\t\t\tthis.room.send('|tournament|error|NotEnoughUsers');\r\n\t\t\t\tthis.forceEnd();\r\n\t\t\t\tthis.room.update();\r\n\t\t\t\toutput.modlog('TOUR END');\r\n\t\t\t} else { // manual tour start without enough users\r\n\t\t\t\toutput.sendReply('|tournament|error|NotEnoughUsers');\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tthis.generator.freezeBracket(this.players);\r\n\r\n\t\tconst now = Date.now();\r\n\t\tfor (const user of this.players) {\r\n\t\t\tuser.lastActionTime = now;\r\n\t\t}\r\n\r\n\t\tthis.isTournamentStarted = true;\r\n\t\tif (this.autoStartTimer) clearTimeout(this.autoStartTimer);\r\n\t\tif (this.autoDisqualifyTimeout !== Infinity) {\r\n\t\t\tthis.autoDisqualifyTimer = setTimeout(() => this.runAutoDisqualify(), this.autoDisqualifyTimeout);\r\n\t\t}\r\n\t\tthis.isBracketInvalidated = true;\r\n\t\tthis.room.add(`|tournament|start|${this.players.length}`);\r\n\t\toutput.modlog('TOUR START', null, `${this.players.length} players`);\r\n\t\tthis.room.send('|tournament|update|{\"isStarted\":true}');\r\n\t\tthis.update();\r\n\t\treturn true;\r\n\t}\r\n\tgetAvailableMatches() {\r\n\t\tconst matches = this.generator.getAvailableMatches() as [TournamentPlayer, TournamentPlayer][];\r\n\t\tif (typeof matches === 'string') throw new Error(`Error from getAvailableMatches(): ${matches}`);\r\n\r\n\t\tconst challenges = new Map<TournamentPlayer, TournamentPlayer[]>();\r\n\t\tconst challengeBys = new Map<TournamentPlayer, TournamentPlayer[]>();\r\n\t\tconst oldAvailableMatches = new Map<TournamentPlayer, boolean>();\r\n\r\n\t\tfor (const user of this.players) {\r\n\t\t\tchallenges.set(user, []);\r\n\t\t\tchallengeBys.set(user, []);\r\n\r\n\t\t\tlet oldAvailableMatch = false;\r\n\t\t\tconst availableMatches = user.availableMatches;\r\n\t\t\tif (availableMatches.size) {\r\n\t\t\t\toldAvailableMatch = true;\r\n\t\t\t\tavailableMatches.clear();\r\n\t\t\t}\r\n\t\t\toldAvailableMatches.set(user, oldAvailableMatch);\r\n\t\t}\r\n\r\n\t\tfor (const match of matches) {\r\n\t\t\tchallenges.get(match[0])!.push(match[1]);\r\n\t\t\tchallengeBys.get(match[1])!.push(match[0]);\r\n\r\n\t\t\tmatch[0].availableMatches.add(match[1]);\r\n\t\t}\r\n\r\n\t\tconst now = Date.now();\r\n\t\tfor (const player of this.players) {\r\n\t\t\tif (oldAvailableMatches.get(player)) continue;\r\n\r\n\t\t\tif (player.availableMatches.size) player.lastActionTime = now;\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tchallenges,\r\n\t\t\tchallengeBys,\r\n\t\t};\r\n\t}\r\n\r\n\tdisqualifyUser(userid: ID, output: Chat.CommandContext | null = null, reason: string | null = null, isSelfDQ = false) {\r\n\t\tconst user = Users.get(userid);\r\n\t\tlet sendReply: (msg: string) => void;\r\n\t\tif (output) {\r\n\t\t\tsendReply = msg => output.sendReply(msg);\r\n\t\t} else if (user) {\r\n\t\t\tsendReply = msg => user.sendTo(this.roomid, msg);\r\n\t\t} else {\r\n\t\t\tsendReply = () => {};\r\n\t\t}\r\n\t\tif (!this.isTournamentStarted) {\r\n\t\t\tsendReply('|tournament|error|NotStarted');\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (!(userid in this.playerTable)) {\r\n\t\t\tsendReply(`|tournament|error|UserNotAdded|${userid}`);\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tconst player = this.playerTable[userid];\r\n\t\tif (player.isDisqualified) {\r\n\t\t\tsendReply(`|tournament|error|AlreadyDisqualified|${userid}`);\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tplayer.isDisqualified = true;\r\n\r\n\t\tconst error = this.generator.disqualifyUser(player);\r\n\t\tif (error) {\r\n\t\t\tsendReply(`|tournament|error|${error}`);\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tplayer.isBusy = false;\r\n\r\n\t\tconst challenge = player.pendingChallenge;\r\n\t\tif (challenge) {\r\n\t\t\tplayer.pendingChallenge = null;\r\n\t\t\tif (challenge.to) {\r\n\t\t\t\tchallenge.to.isBusy = false;\r\n\t\t\t\tchallenge.to.pendingChallenge = null;\r\n\t\t\t\tchallenge.to.sendRoom('|tournament|update|{\"challenged\":null}');\r\n\t\t\t} else if (challenge.from) {\r\n\t\t\t\tchallenge.from.isBusy = false;\r\n\t\t\t\tchallenge.from.pendingChallenge = null;\r\n\t\t\t\tchallenge.from.sendRoom('|tournament|update|{\"challenging\":null}');\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst matchFrom = player.inProgressMatch;\r\n\t\tif (matchFrom) {\r\n\t\t\tmatchFrom.to.isBusy = false;\r\n\t\t\tplayer.inProgressMatch = null;\r\n\t\t\tmatchFrom.room.setParent(null);\r\n\t\t\tthis.completedMatches.add(matchFrom.room.roomid);\r\n\t\t\tmatchFrom.room.game?.forfeit?.(player.name);\r\n\t\t}\r\n\r\n\t\tlet matchTo = null;\r\n\t\tfor (const playerFrom of this.players) {\r\n\t\t\tconst match = playerFrom.inProgressMatch;\r\n\t\t\tif (match && match.to === player) matchTo = playerFrom;\r\n\t\t}\r\n\t\tif (matchTo) {\r\n\t\t\tmatchTo.isBusy = false;\r\n\t\t\tconst matchRoom = matchTo.inProgressMatch!.room;\r\n\t\t\tmatchRoom.setParent(null);\r\n\t\t\tthis.completedMatches.add(matchRoom.roomid);\r\n\t\t\tif (matchRoom.game) matchRoom.game.forfeit?.(player.id);\r\n\t\t\tmatchTo.inProgressMatch = null;\r\n\t\t}\r\n\r\n\t\tif (isSelfDQ) {\r\n\t\t\tthis.room.add(`|tournament|leave|${player.name}`);\r\n\t\t} else {\r\n\t\t\tthis.room.add(`|tournament|disqualify|${player.name}`);\r\n\t\t}\r\n\t\tif (user) {\r\n\t\t\tuser.sendTo(this.room, '|tournament|update|{\"isJoined\":false}');\r\n\t\t\tuser.popup(`|modal|You have been disqualified from the tournament in ${this.room.title}${reason ? `:\\n\\n${reason}` : `.`}`);\r\n\t\t}\r\n\t\tthis.isBracketInvalidated = true;\r\n\t\tthis.isAvailableMatchesInvalidated = true;\r\n\r\n\t\tif (this.generator.isTournamentEnded()) {\r\n\t\t\tthis.onTournamentEnd();\r\n\t\t} else {\r\n\t\t\tthis.update();\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tsetAutoStartTimeout(timeout: number, output: Chat.CommandContext) {\r\n\t\tif (this.isTournamentStarted) {\r\n\t\t\toutput.sendReply('|tournament|error|AlreadyStarted');\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (timeout < AUTO_START_MINIMUM_TIMEOUT || isNaN(timeout)) {\r\n\t\t\toutput.sendReply('|tournament|error|InvalidAutoStartTimeout');\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (this.autoStartTimer) clearTimeout(this.autoStartTimer);\r\n\t\tif (timeout === Infinity) {\r\n\t\t\tthis.room.add('|tournament|autostart|off');\r\n\t\t} else {\r\n\t\t\tthis.autoStartTimer = setTimeout(() => this.startTournament(output, true), timeout);\r\n\t\t\tthis.room.add(`|tournament|autostart|on|${timeout}`);\r\n\t\t}\r\n\t\tthis.autoStartTimeout = timeout;\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tsetAutoDisqualifyTimeout(timeout: number, output: Chat.CommandContext) {\r\n\t\tif (\r\n\t\t\tisNaN(timeout) || timeout < AUTO_DISQUALIFY_WARNING_TIMEOUT ||\r\n\t\t\t(timeout > MAX_AUTO_DISQUALIFY_TIMEOUT && timeout !== Infinity)\r\n\t\t) {\r\n\t\t\toutput.sendReply('|tournament|error|InvalidAutoDisqualifyTimeout');\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tthis.autoDisqualifyTimeout = timeout;\r\n\t\tif (this.autoDisqualifyTimeout === Infinity) {\r\n\t\t\tthis.room.add('|tournament|autodq|off');\r\n\t\t\tif (this.autoDisqualifyTimer) clearTimeout(this.autoDisqualifyTimer);\r\n\t\t\tfor (const player of this.players) player.autoDisqualifyWarned = false;\r\n\t\t} else {\r\n\t\t\tthis.room.add(`|tournament|autodq|on|${this.autoDisqualifyTimeout}`);\r\n\t\t\tif (this.isTournamentStarted) this.runAutoDisqualify();\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\trunAutoDisqualify(output?: Chat.CommandContext) {\r\n\t\tif (!this.isTournamentStarted) {\r\n\t\t\tif (output) output.sendReply('|tournament|error|NotStarted');\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (this.autoDisqualifyTimer) clearTimeout(this.autoDisqualifyTimer);\r\n\r\n\t\tconst now = Date.now();\r\n\t\tfor (const player of this.players) {\r\n\t\t\tconst time = player.lastActionTime;\r\n\t\t\tlet availableMatches = false;\r\n\t\t\tif (player.availableMatches.size) availableMatches = true;\r\n\t\t\tconst pendingChallenge = player.pendingChallenge;\r\n\r\n\t\t\tif (!availableMatches && !pendingChallenge) {\r\n\t\t\t\tplayer.autoDisqualifyWarned = false;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tif (pendingChallenge?.to) continue;\r\n\r\n\t\t\tif (now > time + this.autoDisqualifyTimeout && player.autoDisqualifyWarned) {\r\n\t\t\t\tlet reason;\r\n\t\t\t\tif (pendingChallenge?.from) {\r\n\t\t\t\t\treason = \"You failed to accept your opponent's challenge in time.\";\r\n\t\t\t\t} else {\r\n\t\t\t\t\treason = \"You failed to challenge your opponent in time.\";\r\n\t\t\t\t}\r\n\t\t\t\tthis.disqualifyUser(player.id, output, reason);\r\n\t\t\t\tthis.room.update();\r\n\t\t\t} else if (now > time + this.autoDisqualifyTimeout - AUTO_DISQUALIFY_WARNING_TIMEOUT) {\r\n\t\t\t\tif (player.autoDisqualifyWarned) continue;\r\n\t\t\t\tlet remainingTime = this.autoDisqualifyTimeout - now + time;\r\n\t\t\t\tif (remainingTime <= 0) {\r\n\t\t\t\t\tremainingTime = AUTO_DISQUALIFY_WARNING_TIMEOUT;\r\n\t\t\t\t\tplayer.lastActionTime = now - this.autoDisqualifyTimeout + AUTO_DISQUALIFY_WARNING_TIMEOUT;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tplayer.autoDisqualifyWarned = true;\r\n\t\t\t\tplayer.sendRoom(`|tournament|autodq|target|${remainingTime}`);\r\n\t\t\t} else {\r\n\t\t\t\tplayer.autoDisqualifyWarned = false;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!this.ended) this.autoDisqualifyTimer = setTimeout(() => this.runAutoDisqualify(), this.autoDisqualifyTimeout);\r\n\r\n\t\tif (output) output.sendReply(\"All available matches were checked for automatic disqualification.\");\r\n\t}\r\n\r\n\tsetScouting(allowed: boolean) {\r\n\t\tthis.allowScouting = allowed;\r\n\t\tthis.allowModjoin = !allowed;\r\n\t\tthis.room.add(`|tournament|scouting|${this.allowScouting ? 'allow' : 'disallow'}`);\r\n\t}\r\n\tsetModjoin(allowed: boolean) {\r\n\t\tthis.allowModjoin = allowed;\r\n\t\tthis.room.add(`Modjoining is now ${allowed ? 'allowed' : 'banned'} (Players can${allowed ? '' : 'not'} modjoin their tournament battles).`);\r\n\t}\r\n\tsetAutoconfirmedOnly(acOnly: boolean) {\r\n\t\tthis.autoconfirmedOnly = acOnly;\r\n\t\tthis.room.add(`This tournament is now ${acOnly ? 'dis' : ''}allowing non-autoconfirmed users' joining.`);\r\n\t}\r\n\tsetForceTimer(force: boolean) {\r\n\t\tthis.forceTimer = force;\r\n\t\tthis.room.add(`Forcetimer is now ${force ? 'on' : 'off'} for the tournament.`);\r\n\t}\r\n\tsetForcePublic(force: boolean) {\r\n\t\tthis.forcePublic = force;\r\n\t\tthis.room.add(`Tournament battles forced public: ${force ? 'ON' : 'OFF'}`);\r\n\t}\r\n\tsetAutostartAtCap(autostart: boolean) {\r\n\t\tthis.autostartcap = true;\r\n\t\tthis.room.add(`The tournament will start once ${this.playerCap} players have joined.`);\r\n\t}\r\n\r\n\tasync challenge(user: User, targetUserid: ID, output: Chat.CommandContext) {\r\n\t\tif (!this.isTournamentStarted) {\r\n\t\t\toutput.sendReply('|tournament|error|NotStarted');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!(user.id in this.playerTable)) {\r\n\t\t\toutput.sendReply('|tournament|error|UserNotAdded');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!(targetUserid in this.playerTable)) {\r\n\t\t\toutput.sendReply('|tournament|error|InvalidMatch');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst from = this.playerTable[user.id];\r\n\t\tconst to = this.playerTable[targetUserid];\r\n\t\tconst availableMatches = from.availableMatches;\r\n\t\tif (!availableMatches?.has(to)) {\r\n\t\t\toutput.sendReply('|tournament|error|InvalidMatch');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (from.isBusy || to.isBusy) {\r\n\t\t\tthis.room.add(\"Tournament backend breaks specifications. Please report this to an admin.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tfrom.isBusy = true;\r\n\t\tto.isBusy = true;\r\n\r\n\t\tthis.isAvailableMatchesInvalidated = true;\r\n\t\tthis.update();\r\n\r\n\t\tconst ready = await Ladders(this.fullFormat).prepBattle(output.connection, 'tour');\r\n\t\tif (!ready) {\r\n\t\t\tfrom.isBusy = false;\r\n\t\t\tto.isBusy = false;\r\n\r\n\t\t\tthis.isAvailableMatchesInvalidated = true;\r\n\t\t\tthis.update();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tto.lastActionTime = Date.now();\r\n\t\tfrom.pendingChallenge = {\r\n\t\t\tto, team: ready.settings.team, hidden: ready.settings.hidden, inviteOnly: ready.settings.inviteOnly,\r\n\t\t};\r\n\t\tto.pendingChallenge = {\r\n\t\t\tfrom, team: ready.settings.team, hidden: ready.settings.hidden, inviteOnly: ready.settings.inviteOnly,\r\n\t\t};\r\n\t\tfrom.sendRoom(`|tournament|update|${JSON.stringify({challenging: to.name})}`);\r\n\t\tto.sendRoom(`|tournament|update|${JSON.stringify({challenged: from.name})}`);\r\n\r\n\t\tthis.isBracketInvalidated = true;\r\n\t\tthis.update();\r\n\t}\r\n\tcancelChallenge(user: User, output: Chat.CommandContext) {\r\n\t\tif (!this.isTournamentStarted) {\r\n\t\t\tif (output) output.sendReply('|tournament|error|NotStarted');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!(user.id in this.playerTable)) {\r\n\t\t\tif (output) output.sendReply('|tournament|error|UserNotAdded');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst player = this.playerTable[user.id];\r\n\t\tconst challenge = player.pendingChallenge;\r\n\t\tif (!challenge?.to) return;\r\n\r\n\t\tplayer.isBusy = false;\r\n\t\tchallenge.to.isBusy = false;\r\n\t\tplayer.pendingChallenge = null;\r\n\t\tchallenge.to.pendingChallenge = null;\r\n\t\tuser.sendTo(this.room, '|tournament|update|{\"challenging\":null}');\r\n\t\tchallenge.to.sendRoom('|tournament|update|{\"challenged\":null}');\r\n\r\n\t\tthis.isBracketInvalidated = true;\r\n\t\tthis.isAvailableMatchesInvalidated = true;\r\n\t\tthis.update();\r\n\t}\r\n\tasync acceptChallenge(user: User, output: Chat.CommandContext) {\r\n\t\tif (!this.isTournamentStarted) {\r\n\t\t\toutput.sendReply('|tournament|error|NotStarted');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!(user.id in this.playerTable)) {\r\n\t\t\toutput.sendReply('|tournament|error|UserNotAdded');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst player = this.playerTable[user.id];\r\n\t\tconst challenge = player.pendingChallenge;\r\n\t\tif (!challenge?.from) return;\r\n\r\n\t\tconst ready = await Ladders(this.fullFormat).prepBattle(output.connection, 'tour');\r\n\t\tif (!ready) return;\r\n\r\n\t\t// Prevent battles between offline users from starting\r\n\t\tconst from = Users.get(challenge.from.id);\r\n\t\tif (!from?.connected || !user.connected) return;\r\n\r\n\t\t// Prevent double accepts and users that have been disqualified while between these two functions\r\n\t\tif (!challenge.from.pendingChallenge) return;\r\n\t\tif (!player.pendingChallenge) return;\r\n\r\n\t\tconst room = Rooms.createBattle({\r\n\t\t\tformat: this.fullFormat,\r\n\t\t\tisPrivate: this.room.settings.isPrivate,\r\n\t\t\tplayers: [{\r\n\t\t\t\tuser: from,\r\n\t\t\t\tteam: challenge.team,\r\n\t\t\t\thidden: challenge.hidden,\r\n\t\t\t\tinviteOnly: challenge.inviteOnly,\r\n\t\t\t}, {\r\n\t\t\t\tuser,\r\n\t\t\t\tteam: ready.settings.team,\r\n\t\t\t\thidden: ready.settings.hidden,\r\n\t\t\t\tinviteOnly: ready.settings.inviteOnly,\r\n\t\t\t}],\r\n\t\t\trated: !Ladders.disabled && this.isRated,\r\n\t\t\tchallengeType: ready.challengeType,\r\n\t\t\ttour: this,\r\n\t\t\tparentid: this.roomid,\r\n\t\t});\r\n\r\n\t\tchallenge.from.pendingChallenge = null;\r\n\t\tplayer.pendingChallenge = null;\r\n\t\tfrom.sendTo(this.room, '|tournament|update|{\"challenging\":null}');\r\n\t\tuser.sendTo(this.room, '|tournament|update|{\"challenged\":null}');\r\n\r\n\t\t// server lockdown\r\n\t\tif (!room) return;\r\n\r\n\t\tchallenge.from.inProgressMatch = {to: player, room};\r\n\t\tthis.room.add(`|tournament|battlestart|${from.name}|${user.name}|${room.roomid}`).update();\r\n\r\n\t\tthis.isBracketInvalidated = true;\r\n\t\tif (this.autoDisqualifyTimeout !== Infinity) this.runAutoDisqualify();\r\n\t\tif (this.forceTimer) room.game.startTimer();\r\n\t\tthis.update();\r\n\t}\r\n\r\n\tgetDefaultCustomName() {\r\n\t\treturn Dex.formats.get(this.fullFormat).name + \" (with custom rules)\";\r\n\t}\r\n\tforfeit(user: User) {\r\n\t\treturn this.disqualifyUser(user.id, null, \"You left the tournament\", true);\r\n\t}\r\n\tonConnect(user: User, connection: Connection) {\r\n\t\tthis.updateFor(user, connection);\r\n\t}\r\n\tonUpdateConnection(user: User, connection: Connection) {\r\n\t\tthis.updateFor(user, connection);\r\n\t}\r\n\tonRename(user: User, oldUserid: ID) {\r\n\t\tif (oldUserid in this.playerTable) {\r\n\t\t\tthis.renamePlayer(user, oldUserid);\r\n\t\t}\r\n\r\n\t\tthis.updateFor(user);\r\n\t}\r\n\tonBattleJoin(room: GameRoom, user: User) {\r\n\t\tif (!room.p1 || !room.p2) return;\r\n\t\tif (this.allowScouting || this.ended || user.latestIp === room.p1.latestIp || user.latestIp === room.p2.latestIp) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (user.can('makeroom')) return;\r\n\t\tfor (const otherPlayer of this.getRemainingPlayers()) {\r\n\t\t\tconst otherUser = Users.get(otherPlayer.id);\r\n\t\t\tif (otherUser && otherUser.latestIp === user.latestIp) {\r\n\t\t\t\treturn \"Scouting is banned: tournament players can't watch other tournament battles.\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tonBattleWin(room: GameRoom, winnerid: ID) {\r\n\t\tif (this.completedMatches.has(room.roomid)) return;\r\n\t\tthis.completedMatches.add(room.roomid);\r\n\t\troom.setParent(null);\r\n\t\tif (!room.game) throw new Error(\"onBattleWin called without a battle\");\r\n\t\tif (!room.p1 || !room.p2) throw new Error(\"onBattleWin called with missing players\");\r\n\t\tconst p1 = this.playerTable[room.p1.id];\r\n\t\tconst p2 = this.playerTable[room.p2.id];\r\n\t\tconst winner = this.playerTable[winnerid];\r\n\t\tconst score = (room.game as RoomBattle | BestOfGame).score || [0, 0];\r\n\r\n\t\tlet result: 'win' | 'loss' | 'draw' = 'draw';\r\n\t\tif (p1 === winner) {\r\n\t\t\tp1.score += 1;\r\n\t\t\tp1.wins += 1;\r\n\t\t\tp2.losses += 1;\r\n\t\t\tresult = 'win';\r\n\t\t} else if (p2 === winner) {\r\n\t\t\tp2.score += 1;\r\n\t\t\tp2.wins += 1;\r\n\t\t\tp1.losses += 1;\r\n\t\t\tresult = 'loss';\r\n\t\t}\r\n\r\n\t\tp1.isBusy = false;\r\n\t\tp2.isBusy = false;\r\n\t\tp1.inProgressMatch = null;\r\n\r\n\t\tthis.isBracketInvalidated = true;\r\n\t\tthis.isAvailableMatchesInvalidated = true;\r\n\r\n\t\tif (result === 'draw' && !this.generator.isDrawingSupported) {\r\n\t\t\tthis.room.add(`|tournament|battleend|${p1.name}|${p2.name}|${result}|${score.join(',')}|fail|${room.roomid}`);\r\n\r\n\t\t\tif (this.autoDisqualifyTimeout !== Infinity) this.runAutoDisqualify();\r\n\t\t\tthis.update();\r\n\t\t\treturn this.room.update();\r\n\t\t}\r\n\t\tif (result === 'draw') {\r\n\t\t\tp1.score += 0.5;\r\n\t\t\tp2.score += 0.5;\r\n\t\t}\r\n\t\tp1.games += 1;\r\n\t\tp2.games += 1;\r\n\t\tif (!(p1.isDisqualified || p2.isDisqualified)) {\r\n\t\t\t// If a player was disqualified, handle the results there\r\n\t\t\tconst error = this.generator.setMatchResult([p1, p2], result as 'win' | 'loss', score);\r\n\t\t\tif (error) {\r\n\t\t\t\t// Should never happen\r\n\t\t\t\treturn this.room.add(`Unexpected ${error} from setMatchResult([${room.p1.id}, ${room.p2.id}], ${result}, ${score}) in onBattleWin(${room.roomid}, ${winnerid}). Please report this to an admin.`).update();\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.room.add(`|tournament|battleend|${p1.name}|${p2.name}|${result}|${score.join(',')}|success|${room.roomid}`);\r\n\r\n\t\tif (this.generator.isTournamentEnded()) {\r\n\t\t\tif (!this.room.settings.isPrivate && this.generator.name.includes('Elimination') && !Config.autosavereplays) {\r\n\t\t\t\tconst uploader = Users.get(winnerid);\r\n\t\t\t\tif (uploader?.connections[0]) {\r\n\t\t\t\t\tvoid Chat.parse('/savereplay', room, uploader, uploader.connections[0]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.onTournamentEnd();\r\n\t\t} else {\r\n\t\t\tif (this.autoDisqualifyTimeout !== Infinity) this.runAutoDisqualify();\r\n\t\t\tthis.update();\r\n\t\t}\r\n\t\tthis.room.update();\r\n\t}\r\n\tonTournamentEnd() {\r\n\t\tconst update = {\r\n\t\t\tresults: (this.generator.getResults() as TournamentPlayer[][]).map(usersToNames),\r\n\t\t\tformat: this.name,\r\n\t\t\tgenerator: this.generator.name,\r\n\t\t\tbracketData: this.getBracketData(),\r\n\t\t};\r\n\t\tthis.room.add(`|tournament|end|${JSON.stringify(update)}`);\r\n\t\tconst settings = this.room.settings.tournaments;\r\n\t\tif (settings?.recentToursLength) {\r\n\t\t\tif (!settings.recentTours) settings.recentTours = [];\r\n\t\t\tconst name = Dex.formats.get(this.name).exists ? Dex.formats.get(this.name).name :\r\n\t\t\t\t`${this.name} (${Dex.formats.get(this.baseFormat).name})`;\r\n\t\t\tsettings.recentTours.unshift({name, baseFormat: this.baseFormat, time: Date.now()});\r\n\t\t\t// Use a while loop here in case the threshold gets lowered with /tour settings recenttours\r\n\t\t\t// to trim down multiple at once\r\n\t\t\twhile (settings.recentTours.length > settings.recentToursLength) {\r\n\t\t\t\tsettings.recentTours.pop();\r\n\t\t\t}\r\n\t\t\tthis.room.saveSettings();\r\n\t\t}\r\n\t\tthis.remove();\r\n\t}\r\n}\r\n\r\nfunction getGenerator(generator: string | undefined) {\r\n\tgenerator = toID(generator);\r\n\tswitch (generator) {\r\n\tcase 'elim': generator = 'elimination'; break;\r\n\tcase 'rr': generator = 'roundrobin'; break;\r\n\t}\r\n\treturn TournamentGenerators[generator as 'elimination' | 'roundrobin'];\r\n}\r\n\r\nfunction createTournamentGenerator(\r\n\tgeneratorName: string | undefined, modifier: string | undefined, output: Chat.CommandContext\r\n) {\r\n\tconst TourGenerator = getGenerator(generatorName);\r\n\tif (!TourGenerator) {\r\n\t\toutput.errorReply(`${generatorName} is not a valid type.`);\r\n\t\tconst generatorNames = Object.keys(TournamentGenerators).join(', ');\r\n\t\toutput.errorReply(`Valid types: ${generatorNames}`);\r\n\t\treturn;\r\n\t}\r\n\treturn new TourGenerator(modifier || '');\r\n}\r\nfunction createTournament(\r\n\troom: Room, formatId: string | undefined, generator: string | undefined, playerCap: string | undefined,\r\n\tisRated: boolean, generatorMod: string | undefined, name: string | undefined, output: Chat.CommandContext\r\n) {\r\n\tif (room.type !== 'chat') {\r\n\t\toutput.errorReply(\"Tournaments can only be created in chat rooms.\");\r\n\t\treturn;\r\n\t}\r\n\tif (room.game) {\r\n\t\toutput.errorReply(`You cannot have a tournament until the current room activity is over: ${room.game.title}`);\r\n\t\treturn;\r\n\t}\r\n\tif (Rooms.global.lockdown) {\r\n\t\toutput.errorReply(\"The server is restarting soon, so a tournament cannot be created.\");\r\n\t\treturn;\r\n\t}\r\n\tconst format = Dex.formats.get(formatId);\r\n\tif (format.effectType !== 'Format' || !format.tournamentShow) {\r\n\t\toutput.errorReply(`${format.id} is not a valid tournament format.`);\r\n\t\tvoid output.parse(`/tour formats`);\r\n\t\treturn;\r\n\t}\r\n\tconst settings = room.settings.tournaments;\r\n\tif (settings?.blockRecents && settings.recentTours && settings.recentToursLength) {\r\n\t\tconst recentTours = settings.recentTours.map(x => x.baseFormat);\r\n\t\tif (recentTours.includes(format.id)) {\r\n\t\t\toutput.errorReply(`A ${format.name} tournament was made too recently.`);\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\tif (!getGenerator(generator)) {\r\n\t\toutput.errorReply(`${generator} is not a valid type.`);\r\n\t\tconst generators = Object.keys(TournamentGenerators).join(', ');\r\n\t\toutput.errorReply(`Valid types: ${generators}`);\r\n\t\treturn;\r\n\t}\r\n\tif (playerCap && parseInt(playerCap) < 2) {\r\n\t\toutput.errorReply(\"You cannot have a player cap that is less than 2.\");\r\n\t\treturn;\r\n\t}\r\n\tif (name?.trim().length) {\r\n\t\tif (output.checkChat(name) !== name) {\r\n\t\t\tthrow new Chat.ErrorMessage(`You cannot use filtered words in tour names.`);\r\n\t\t}\r\n\r\n\t\tif (name.length > MAX_CUSTOM_NAME_LENGTH) {\r\n\t\t\tthrow new Chat.ErrorMessage(`The tournament's name cannot exceed ${MAX_CUSTOM_NAME_LENGTH} characters.`);\r\n\t\t}\r\n\t\tif (name.includes('|')) throw new Chat.ErrorMessage(\"The tournament's name cannot include the | symbol.\");\r\n\t}\r\n\tconst tour = room.game = new Tournament(\r\n\t\troom, format, createTournamentGenerator(generator, generatorMod, output)!, playerCap, isRated, name\r\n\t);\r\n\tif (settings) {\r\n\t\tif (typeof settings.autostart === 'number') tour.setAutoStartTimeout(settings.autostart, output);\r\n\t\tif (settings.playerCap) {\r\n\t\t\ttour.playerCap = settings.playerCap;\r\n\t\t\tif (settings.autostart === true) tour.setAutostartAtCap(true);\r\n\t\t}\r\n\t\tif (settings.autodq) tour.setAutoDisqualifyTimeout(settings.autodq, output);\r\n\t\tif (settings.forcePublic) tour.setForcePublic(true);\r\n\t\tif (settings.forceTimer) tour.setForceTimer(true);\r\n\t\tif (settings.allowModjoin === false) tour.setModjoin(false);\r\n\t\tif (settings.allowScouting === false) tour.setScouting(false);\r\n\t}\r\n\treturn tour;\r\n}\r\n\r\nconst commands: Chat.ChatCommands = {\r\n\tpasttours: 'recenttours',\r\n\trecenttours(target, room, user) {\r\n\t\tthis.runBroadcast();\r\n\t\troom = this.requireRoom();\r\n\t\tif (!room.settings.tournaments?.recentToursLength) {\r\n\t\t\tthrow new Chat.ErrorMessage(`Recent tournaments aren't documented in this room.`);\r\n\t\t}\r\n\t\tif (!room.settings.tournaments?.recentTours?.length) {\r\n\t\t\tthrow new Chat.ErrorMessage(`There haven't been any documented tournaments in this room recently.`);\r\n\t\t}\r\n\t\t// Shorten array if the recentToursLength gets adjusted\r\n\t\tconst array = room.settings.tournaments.recentTours;\r\n\t\tconst {name, time} = array[0];\r\n\t\tlet buf = `The last tournament ended ${Chat.toDurationString(Date.now() - time)} ago - ${name}`;\r\n\t\tif (array.length > 1) {\r\n\t\t\tbuf += `<hr /><strong>Previous tournaments:</strong> `;\r\n\t\t\tbuf += array.filter((x, i) => i !== 0).map(x => x.name).join(', ');\r\n\t\t}\r\n\t\tthis.sendReplyBox(buf);\r\n\t},\r\n\trecenttourshelp: [`/recenttours - Displays the n most recent tour(s), where n represents the number defined by staff (i.e. the 6 most recent tours).`],\r\n\r\n\ttour: 'tournament',\r\n\ttours: 'tournament',\r\n\ttournaments: 'tournament',\r\n\ttournament: {\r\n\t\t''(target, room, user) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tif (!this.runBroadcast()) return;\r\n\t\t\tconst update = [];\r\n\t\t\tfor (const tourRoom of Rooms.rooms.values()) {\r\n\t\t\t\tconst tournament = tourRoom.getGame(Tournament);\r\n\t\t\t\tif (!tournament) continue;\r\n\t\t\t\tif (tourRoom.settings.isPrivate || tourRoom.settings.isPersonal || tourRoom.settings.staffRoom) continue;\r\n\t\t\t\tupdate.push({\r\n\t\t\t\t\troom: tourRoom.roomid, title: room.title, format: tournament.name,\r\n\t\t\t\t\tgenerator: tournament.generator.name, isStarted: tournament.isTournamentStarted,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tthis.sendReply(`|tournaments|info|${JSON.stringify(update)}`);\r\n\t\t},\r\n\t\thelp() {\r\n\t\t\treturn this.parse('/help tournament');\r\n\t\t},\r\n\t\tenable: 'toggle',\r\n\t\tdisable: 'toggle',\r\n\t\ttoggle(target, room, user, connection, cmd) {\r\n\t\t\tthrow new Chat.ErrorMessage(`${this.cmdToken}${this.fullCmd} has been deprecated. Instead, use \"${this.cmdToken}permissions set tournaments, [rank symbol]\".`);\r\n\t\t},\r\n\t\tannouncements: 'announce',\r\n\t\tannounce(target, room, user, connection, cmd) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tthis.checkCan('gamemanagement', null, room);\r\n\t\t\tif (!target) {\r\n\t\t\t\tif (room.settings.tournaments?.announcements) {\r\n\t\t\t\t\treturn this.sendReply(\"Tournament announcements are enabled.\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn this.sendReply(\"Tournament announcements are disabled.\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst option = target.toLowerCase();\r\n\t\t\tif (this.meansYes(option)) {\r\n\t\t\t\tif (room.settings.tournaments?.announcements) return this.errorReply(\"Tournament announcements are already enabled.\");\r\n\t\t\t\tif (!room.settings.tournaments) room.settings.tournaments = {};\r\n\t\t\t\troom.settings.tournaments.announcements = true;\r\n\t\t\t\troom.saveSettings();\r\n\t\t\t\tthis.privateModAction(`Tournament announcements were enabled by ${user.name}`);\r\n\t\t\t\tthis.modlog('TOUR ANNOUNCEMENTS', null, 'ON');\r\n\t\t\t} else if (this.meansNo(option)) {\r\n\t\t\t\tif (!room.settings.tournaments?.announcements) return this.errorReply(\"Tournament announcements are already disabled.\");\r\n\t\t\t\tif (!room.settings.tournaments) room.settings.tournaments = {};\r\n\t\t\t\troom.settings.tournaments.announcements = false;\r\n\t\t\t\troom.saveSettings();\r\n\t\t\t\tthis.privateModAction(`Tournament announcements were disabled by ${user.name}`);\r\n\t\t\t\tthis.modlog('TOUR ANNOUNCEMENTS', null, 'OFF');\r\n\t\t\t} else {\r\n\t\t\t\treturn this.sendReply(`Usage: /tour ${cmd} <on|off>`);\r\n\t\t\t}\r\n\r\n\t\t\troom.saveSettings();\r\n\t\t},\r\n\t\tnew: 'create',\r\n\t\tcreate(target, room, user, connection, cmd) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tthis.checkCan('tournaments', null, room);\r\n\t\t\tconst [format, generator, cap, mod, name] = target.split(',').map(item => item.trim());\r\n\t\t\tif (!target || !format || !generator) {\r\n\t\t\t\treturn this.sendReply(`Usage: /tour ${cmd} <format>, <type> [, <comma-separated arguments>]`);\r\n\t\t\t}\r\n\r\n\t\t\tconst tour: Tournament | undefined = createTournament(room, format, generator, cap, Config.ratedtours, mod, name, this);\r\n\t\t\tif (tour) {\r\n\t\t\t\tthis.privateModAction(`${user.name} created a tournament in ${tour.baseFormat} format.`);\r\n\t\t\t\tthis.modlog('TOUR CREATE', null, tour.baseFormat);\r\n\t\t\t\tif (room.settings.tournaments?.announcements) {\r\n\t\t\t\t\tconst tourRoom = Rooms.search(Config.tourroom || 'tournaments');\r\n\t\t\t\t\tif (tourRoom && tourRoom !== room) {\r\n\t\t\t\t\t\ttourRoom.addRaw(\r\n\t\t\t\t\t\t\tUtils.html`<div class=\"infobox\"><a href=\"/${room.roomid}\" class=\"ilink\">` +\r\n\t\t\t\t\t\t\tUtils.html`<strong>${Dex.formats.get(tour.name).name}</strong> tournament created in` +\r\n\t\t\t\t\t\t\t` <strong>${room.title}</strong>.</a></div>`\r\n\t\t\t\t\t\t).update();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tformats(target, room, user) {\r\n\t\t\tif (!this.runBroadcast()) return;\r\n\t\t\tlet buf = ``;\r\n\t\t\tlet section = undefined;\r\n\t\t\tfor (const format of Dex.formats.all()) {\r\n\t\t\t\tif (!format.tournamentShow) continue;\r\n\t\t\t\tconst name = format.name.startsWith(`[Gen ${Dex.gen}] `) ? format.name.slice(8) : format.name;\r\n\t\t\t\tif (format.section !== section) {\r\n\t\t\t\t\tsection = format.section;\r\n\t\t\t\t\tbuf += Utils.html`<br /><strong>${section}:</strong><br />&bull; ${name}`;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbuf += Utils.html`<br />&bull; ${name}`;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.sendReplyBox(`<div class=\"chat\"><details class=\"readmore\"><summary>Valid Formats: </summary>${buf}</details></div>`);\r\n\t\t},\r\n\t\tbanuser(target, room, user) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tconst [userid, ...reasonsArray] = target.split(',').map(item => item.trim());\r\n\t\t\tif (!target) {\r\n\t\t\t\treturn this.sendReply(`Usage: /tour banuser <user>, <reason>`);\r\n\t\t\t}\r\n\t\t\tconst reason = reasonsArray.join(',');\r\n\t\t\tconst targetUser = Users.get(userid);\r\n\t\t\tthis.checkCan('gamemoderation', targetUser, room);\r\n\r\n\t\t\tconst targetUserid = targetUser ? targetUser.id : toID(userid);\r\n\t\t\tif (!targetUser) return false;\r\n\t\t\tif (reason?.length > MAX_REASON_LENGTH) {\r\n\t\t\t\treturn this.errorReply(`The reason is too long. It cannot exceed ${MAX_REASON_LENGTH} characters.`);\r\n\t\t\t}\r\n\r\n\t\t\tif (Tournament.checkBanned(room, targetUser)) return this.errorReply(\"This user is already banned from tournaments.\");\r\n\r\n\t\t\tconst punishment = {\r\n\t\t\t\ttype: 'TOURBAN',\r\n\t\t\t\tid: targetUserid,\r\n\t\t\t\texpireTime: Date.now() + TOURBAN_DURATION,\r\n\t\t\t\treason,\r\n\t\t\t};\r\n\t\t\tif (targetUser) {\r\n\t\t\t\tPunishments.roomPunish(room, targetUser, punishment);\r\n\t\t\t} else {\r\n\t\t\t\tPunishments.roomPunishName(room, targetUserid, punishment);\r\n\t\t\t}\r\n\t\t\troom.getGame(Tournament)?.removeBannedUser(targetUserid);\r\n\r\n\t\t\tthis.modlog('TOURBAN', targetUser, reason);\r\n\t\t\tthis.privateModAction(\r\n\t\t\t\t`${targetUser ? targetUser.name : targetUserid} was banned from joining tournaments by ${user.name}. (${reason})`\r\n\t\t\t);\r\n\t\t},\r\n\t\tunbanuser(target, room, user) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\ttarget = target.trim();\r\n\t\t\tif (!target) {\r\n\t\t\t\treturn this.sendReply(`Usage: /tour unbanuser <user>`);\r\n\t\t\t}\r\n\t\t\tconst targetUser = Users.get(toID(target));\r\n\t\t\tthis.checkCan('gamemoderation', targetUser, room);\r\n\r\n\t\t\tconst targetUserid = toID(targetUser || toID(target));\r\n\r\n\t\t\tif (!Tournament.checkBanned(room, targetUserid)) return this.errorReply(\"This user isn't banned from tournaments.\");\r\n\r\n\t\t\tif (targetUser) {\r\n\t\t\t\tPunishments.roomUnpunish(room, targetUserid, 'TOURBAN', false);\r\n\t\t\t}\r\n\t\t\tthis.privateModAction(`${targetUser ? targetUser.name : targetUserid} was unbanned from joining tournaments by ${user.name}.`);\r\n\t\t\tthis.modlog('TOUR UNBAN', targetUser, null, {noip: 1, noalts: 1});\r\n\t\t},\r\n\t\tj: 'join',\r\n\t\tin: 'join',\r\n\t\tjoin(target, room, user) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tconst tournament = this.requireGame(Tournament);\r\n\t\t\ttournament.addUser(user, this);\r\n\t\t},\r\n\t\tl: 'leave',\r\n\t\tout: 'leave',\r\n\t\tleave(target, room, user) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tconst tournament = this.requireGame(Tournament);\r\n\t\t\tif (tournament.isTournamentStarted) {\r\n\t\t\t\tif (tournament.getRemainingPlayers().some(player => player.id === user.id)) {\r\n\t\t\t\t\ttournament.disqualifyUser(user.id, this, null, true);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.errorReply(\"You have already been eliminated from this tournament.\");\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\ttournament.removeUser(user.id, this);\r\n\t\t\t}\r\n\t\t},\r\n\t\tgetusers(target, room) {\r\n\t\t\tif (!this.runBroadcast()) return;\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tconst tournament = this.requireGame(Tournament);\r\n\t\t\tconst users = usersToNames(tournament.getRemainingPlayers().sort());\r\n\t\t\tthis.sendReplyBox(\r\n\t\t\t\t`<strong>${users.length}/${tournament.players.length}` +\r\n\t\t\t\tUtils.html` users remain in this tournament:</strong><br />${users.join(', ')}`\r\n\t\t\t);\r\n\t\t},\r\n\t\tgetupdate(target, room, user) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tconst tournament = this.requireGame(Tournament);\r\n\t\t\ttournament.updateFor(user);\r\n\t\t\tthis.sendReply(\"Your tournament bracket has been updated.\");\r\n\t\t},\r\n\t\tchallenge(target, room, user, connection, cmd) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tconst tournament = this.requireGame(Tournament);\r\n\t\t\tif (!target) {\r\n\t\t\t\treturn this.sendReply(`Usage: /tour ${cmd} <user>`);\r\n\t\t\t}\r\n\t\t\tvoid tournament.challenge(user, toID(target), this);\r\n\t\t},\r\n\t\tcancelchallenge(target, room, user) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tconst tournament = this.requireGame(Tournament);\r\n\t\t\ttournament.cancelChallenge(user, this);\r\n\t\t},\r\n\t\tacceptchallenge(target, room, user) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tconst tournament = this.requireGame(Tournament);\r\n\t\t\tvoid tournament.acceptChallenge(user, this);\r\n\t\t},\r\n\t\tasync vtm(target, room, user, connection) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tconst tournament = this.requireGame(Tournament);\r\n\t\t\tif (Monitor.countPrepBattle(connection.ip, connection)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tconst result = await TeamValidatorAsync.get(tournament.fullFormat).validateTeam(user.battleSettings.team);\r\n\t\t\tif (result.startsWith('1')) {\r\n\t\t\t\tconnection.popup(\"Your team is valid for this tournament.\");\r\n\t\t\t} else {\r\n\t\t\t\tconst formatName = Dex.formats.get(tournament.baseFormat).name;\r\n\t\t\t\t// split/join is the easiest way to do a find/replace with an untrusted string, sadly\r\n\t\t\t\tconst reasons = result.slice(1).split(formatName).join('this tournament');\r\n\t\t\t\tconnection.popup(`Your team was rejected for the following reasons:\\n\\n- ${reasons.replace(/\\n/g, '\\n- ')}`);\r\n\t\t\t}\r\n\t\t},\r\n\t\tviewruleset: 'viewcustomrules',\r\n\t\tviewbanlist: 'viewcustomrules',\r\n\t\tviewrules: 'viewcustomrules',\r\n\t\tviewcustomrules(target, room) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tconst tournament = this.requireGame(Tournament);\r\n\t\t\tif (!this.runBroadcast()) return;\r\n\t\t\tif (tournament.customRules.length < 1) {\r\n\t\t\t\treturn this.errorReply(\"The tournament does not have any custom rules.\");\r\n\t\t\t}\r\n\t\t\tthis.sendReply(`|html|<div class='infobox infobox-limited'>This tournament includes:<br />${tournament.getCustomRules()}</div>`);\r\n\t\t},\r\n\t\tsettype(target, room, user, connection, cmd) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tthis.checkCan('tournaments', null, room);\r\n\t\t\tconst tournament = this.requireGame(Tournament);\r\n\t\t\tif (!target) {\r\n\t\t\t\treturn this.sendReply(`Usage: /tour ${cmd} <type> [, <comma-separated arguments>]`);\r\n\t\t\t}\r\n\t\t\tconst [generatorType, cap, modifier] = target.split(',').map(item => item.trim());\r\n\t\t\tconst playerCap = parseInt(cap);\r\n\t\t\tconst generator = createTournamentGenerator(generatorType, modifier, this);\r\n\t\t\tif (generator && tournament.setGenerator(generator, this)) {\r\n\t\t\t\tif (playerCap && playerCap >= 2) {\r\n\t\t\t\t\ttournament.playerCap = playerCap;\r\n\t\t\t\t\tif (Config.tourdefaultplayercap && tournament.playerCap > Config.tourdefaultplayercap) {\r\n\t\t\t\t\t\tMonitor.log(`[TourMonitor] Room ${tournament.room.roomid} starting a tour over default cap (${tournament.playerCap})`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\troom.send(`|tournament|update|{\"playerCap\": \"${playerCap}\"}`);\r\n\t\t\t\t} else if (tournament.playerCap && !playerCap) {\r\n\t\t\t\t\ttournament.playerCap = 0;\r\n\t\t\t\t\troom.send(`|tournament|update|{\"playerCap\": \"${playerCap}\"}`);\r\n\t\t\t\t}\r\n\t\t\t\tconst capNote = (tournament.playerCap ? ' with a player cap of ' + tournament.playerCap : '');\r\n\t\t\t\tthis.privateModAction(`${user.name} set tournament type to ${generator.name}${capNote}.`);\r\n\t\t\t\tthis.modlog('TOUR SETTYPE', null, generator.name + capNote);\r\n\t\t\t\tthis.sendReply(`Tournament set to ${generator.name}${capNote}.`);\r\n\t\t\t}\r\n\t\t},\r\n\t\tcap: 'setplayercap',\r\n\t\tplayercap: 'setplayercap',\r\n\t\tsetcap: 'setplayercap',\r\n\t\tsetplayercap(target, room, user, connection, cmd) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tthis.checkCan('tournaments', null, room);\r\n\t\t\tconst tournament = this.requireGame(Tournament);\r\n\t\t\ttarget = target.trim();\r\n\t\t\tif (!target) {\r\n\t\t\t\tif (tournament.playerCap) {\r\n\t\t\t\t\treturn this.sendReply(`Usage: /tour ${cmd} <cap>; The current player cap is ${tournament.playerCap}`);\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn this.sendReply(`Usage: /tour ${cmd} <cap>`);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (tournament.isTournamentStarted) {\r\n\t\t\t\treturn this.errorReply(\"The player cap cannot be changed once the tournament has started.\");\r\n\t\t\t}\r\n\t\t\tconst option = target.toLowerCase();\r\n\t\t\tif (['0', 'infinity', 'off', 'false', 'stop', 'remove'].includes(option)) {\r\n\t\t\t\tif (!tournament.playerCap) return this.errorReply(\"The tournament does not have a player cap.\");\r\n\t\t\t\ttarget = '0';\r\n\t\t\t}\r\n\t\t\tconst playerCap = parseInt(target);\r\n\t\t\tif (playerCap === 0) {\r\n\t\t\t\ttournament.playerCap = 0;\r\n\t\t\t\tthis.privateModAction(`${user.name} removed the tournament's player cap.`);\r\n\t\t\t\tthis.modlog('TOUR PLAYERCAP', null, 'removed');\r\n\t\t\t\tthis.sendReply(\"Tournament cap removed.\");\r\n\t\t\t} else {\r\n\t\t\t\tif (isNaN(playerCap) || playerCap < 2) {\r\n\t\t\t\t\treturn this.errorReply(\"The tournament cannot have a player cap less than 2.\");\r\n\t\t\t\t}\r\n\t\t\t\tif (playerCap === tournament.playerCap) {\r\n\t\t\t\t\treturn this.errorReply(`The tournament's player cap is already ${playerCap}.`);\r\n\t\t\t\t}\r\n\t\t\t\ttournament.playerCap = playerCap;\r\n\t\t\t\tif (Config.tourdefaultplayercap && tournament.playerCap > Config.tourdefaultplayercap) {\r\n\t\t\t\t\tMonitor.log(`[TourMonitor] Room ${tournament.room.roomid} starting a tour over default cap (${tournament.playerCap})`);\r\n\t\t\t\t}\r\n\t\t\t\tthis.privateModAction(`${user.name} set the tournament's player cap to ${tournament.playerCap}.`);\r\n\t\t\t\tthis.modlog('TOUR PLAYERCAP', null, tournament.playerCap.toString());\r\n\t\t\t\tthis.sendReply(`Tournament cap set to ${tournament.playerCap}.`);\r\n\t\t\t}\r\n\t\t\troom.send(`|tournament|update|{\"playerCap\": \"${tournament.playerCap}\"}`);\r\n\t\t},\r\n\t\tend: 'delete',\r\n\t\tstop: 'delete',\r\n\t\tdelete(target, room, user) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tthis.checkCan('tournaments', null, room);\r\n\t\t\tconst tournament = this.requireGame(Tournament);\r\n\t\t\ttournament.forceEnd();\r\n\t\t\tthis.privateModAction(`${user.name} forcibly ended a tournament.`);\r\n\t\t\tthis.modlog('TOUR END');\r\n\t\t},\r\n\t\truleset: 'customrules',\r\n\t\tbanlist: 'customrules',\r\n\t\trules: 'customrules',\r\n\t\tcustomrules(target, room, user, connection, cmd) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tconst tournament = this.requireGame(Tournament);\r\n\t\t\tif (cmd === 'banlist') {\r\n\t\t\t\treturn this.errorReply('The new syntax is: /tour rules -bannedthing, +un[banned|restricted]thing, *restrictedthing, !removedrule, addedrule');\r\n\t\t\t}\r\n\t\t\tif (!target) {\r\n\t\t\t\tthis.sendReply(\"Usage: /tour rules <list of rules>\");\r\n\t\t\t\tthis.sendReply(\"Rules can be: -bannedthing, +un[banned|restricted]thing, *restrictedthing, !removedrule, addedrule\");\r\n\t\t\t\tthis.parse('/tour viewrules');\r\n\t\t\t\tif (tournament.customRules.length) {\r\n\t\t\t\t\treturn this.sendReplyBox(`<details><summary>Source</summary><code style=\"white-space: pre-wrap; display: table; tab-size: 3\">/tour rules ${tournament.customRules}</code></details>`);\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis.checkCan('tournaments', null, room);\r\n\t\t\tif (tournament.isTournamentStarted) {\r\n\t\t\t\treturn this.errorReply(\"The custom rules cannot be changed once the tournament has started.\");\r\n\t\t\t}\r\n\t\t\tif (tournament.setCustomRules(target)) {\r\n\t\t\t\troom.addRaw(\r\n\t\t\t\t\t`<div class=\"infobox infobox-limited\">This tournament includes:<br />${tournament.getCustomRules()}</div>`\r\n\t\t\t\t);\r\n\t\t\t\tthis.privateModAction(`${user.name} updated the tournament's custom rules.`);\r\n\t\t\t\tthis.modlog('TOUR RULES', null, tournament.customRules.join(', '));\r\n\t\t\t\tthis.sendReplyBox(`<details><summary>Source</summary><code style=\"white-space: pre-wrap; display: table; tab-size: 3\">/tour rules ${tournament.customRules}</code></details>`);\r\n\t\t\t}\r\n\t\t},\r\n\t\tclearruleset: 'clearcustomrules',\r\n\t\tclearbanlist: 'clearcustomrules',\r\n\t\tclearrules: 'clearcustomrules',\r\n\t\tclearcustomrules(target, room, user) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tthis.checkCan('tournaments', null, room);\r\n\t\t\tconst tournament = this.requireGame(Tournament);\r\n\t\t\tif (tournament.isTournamentStarted) {\r\n\t\t\t\treturn this.errorReply(\"The custom rules cannot be changed once the tournament has started.\");\r\n\t\t\t}\r\n\t\t\tif (tournament.customRules.length < 1) {\r\n\t\t\t\treturn this.errorReply(\"The tournament does not have any custom rules.\");\r\n\t\t\t}\r\n\t\t\ttournament.customRules = [];\r\n\t\t\ttournament.fullFormat = tournament.baseFormat;\r\n\t\t\tif (tournament.name === tournament.getDefaultCustomName()) {\r\n\t\t\t\ttournament.name = tournament.baseFormat;\r\n\t\t\t\troom.send(`|tournament|update|${JSON.stringify({format: tournament.name})}`);\r\n\t\t\t\ttournament.update();\r\n\t\t\t}\r\n\t\t\troom.addRaw(`<b>The tournament's custom rules were cleared.</b>`);\r\n\t\t\tthis.privateModAction(`${user.name} cleared the tournament's custom rules.`);\r\n\t\t\tthis.modlog('TOUR CLEARRULES');\r\n\t\t},\r\n\t\tname: 'setname',\r\n\t\tcustomname: 'setname',\r\n\t\tsetname(target, room, user, connection, cmd) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tthis.checkCan('tournaments', null, room);\r\n\t\t\tconst tournament = this.requireGame(Tournament);\r\n\t\t\tconst name = target.trim();\r\n\t\t\tif (!name) {\r\n\t\t\t\treturn this.sendReply(`Usage: /tour ${cmd} <comma-separated arguments>`);\r\n\t\t\t}\r\n\t\t\tthis.checkChat(name);\r\n\t\t\tif (!name || typeof name !== 'string') return;\r\n\r\n\t\t\tif (name.length > MAX_CUSTOM_NAME_LENGTH) {\r\n\t\t\t\treturn this.errorReply(`The tournament's name cannot exceed ${MAX_CUSTOM_NAME_LENGTH} characters.`);\r\n\t\t\t}\r\n\t\t\tif (name.includes('|')) return this.errorReply(\"The tournament's name cannot include the | symbol.\");\r\n\t\t\ttournament.name = name;\r\n\t\t\troom.send(`|tournament|update|${JSON.stringify({format: tournament.name})}`);\r\n\t\t\tthis.privateModAction(`${user.name} set the tournament's name to ${tournament.name}.`);\r\n\t\t\tthis.modlog('TOUR NAME', null, tournament.name);\r\n\t\t\ttournament.update();\r\n\t\t},\r\n\t\tresetname: 'clearname',\r\n\t\tclearname(target, room, user) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tthis.checkCan('tournaments', null, room);\r\n\t\t\tconst tournament = this.requireGame(Tournament);\r\n\t\t\tif (tournament.name === tournament.baseFormat) return this.errorReply(\"The tournament does not have a name.\");\r\n\t\t\ttournament.name = tournament.baseFormat;\r\n\t\t\troom.send(`|tournament|update|${JSON.stringify({format: tournament.name})}`);\r\n\t\t\tthis.privateModAction(`${user.name} cleared the tournament's name.`);\r\n\t\t\tthis.modlog('TOUR CLEARNAME');\r\n\t\t\ttournament.update();\r\n\t\t},\r\n\t\tbegin: 'start',\r\n\t\tstart(target, room, user) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tthis.checkCan('tournaments', null, room);\r\n\t\t\tconst tournament = this.requireGame(Tournament);\r\n\t\t\tif (tournament.startTournament(this)) {\r\n\t\t\t\troom.sendMods(`(${user.name} started the tournament.)`);\r\n\t\t\t}\r\n\t\t},\r\n\t\tdq: 'disqualify',\r\n\t\tdisqualify(target, room, user, connection, cmd) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tthis.checkCan('tournaments', null, room);\r\n\t\t\tconst tournament = this.requireGame(Tournament);\r\n\t\t\tif (!target) {\r\n\t\t\t\treturn this.sendReply(`Usage: /tour ${cmd} <user>`);\r\n\t\t\t}\r\n\t\t\tconst [userid, reason] = target.split(',').map(item => item.trim());\r\n\t\t\tconst targetUser = Users.get(userid);\r\n\t\t\tconst targetUserid = toID(targetUser || userid);\r\n\t\t\tif (reason?.length > MAX_REASON_LENGTH) {\r\n\t\t\t\treturn this.errorReply(`The reason is too long. It cannot exceed ${MAX_REASON_LENGTH} characters.`);\r\n\t\t\t}\r\n\t\t\tif (tournament.disqualifyUser(targetUserid, this, reason)) {\r\n\t\t\t\tthis.privateModAction(`${(targetUser ? targetUser.name : targetUserid)} was disqualified from the tournament by ${user.name}${(reason ? ' (' + reason + ')' : '')}`);\r\n\t\t\t\tthis.modlog('TOUR DQ', targetUserid, reason);\r\n\t\t\t}\r\n\t\t},\r\n\t\tsub: 'replace',\r\n\t\treplace(target, room, user) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tthis.checkCan('tournaments', null, room);\r\n\t\t\tconst tournament = this.requireGame(Tournament);\r\n\t\t\tconst [oldUser, newUser] = target.split(',').map(item => Users.get(item.trim()));\r\n\t\t\tif (!oldUser) return this.errorReply(`User ${oldUser} not found.`);\r\n\t\t\tif (!newUser) return this.errorReply(`User ${newUser} not found.`);\r\n\r\n\t\t\ttournament.replaceUser(oldUser, newUser, this);\r\n\t\t},\r\n\t\tautostart: 'setautostart',\r\n\t\tsetautostart(target, room, user, connection, cmd) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tthis.checkCan('tournaments', null, room);\r\n\t\t\tconst tournament = this.requireGame(Tournament);\r\n\t\t\ttarget = target.trim();\r\n\t\t\tif (!target) {\r\n\t\t\t\treturn this.sendReply(`Usage: /tour ${cmd} <on|minutes|off>`);\r\n\t\t\t}\r\n\t\t\tconst option = target.toLowerCase();\r\n\t\t\tif ((this.meansYes(option) && option !== '1') || option === 'start') {\r\n\t\t\t\tif (tournament.isTournamentStarted) {\r\n\t\t\t\t\treturn this.errorReply(\"The tournament has already started.\");\r\n\t\t\t\t} else if (!tournament.playerCap) {\r\n\t\t\t\t\treturn this.errorReply(\"The tournament does not have a player cap set.\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (tournament.autostartcap) {\r\n\t\t\t\t\t\treturn this.errorReply(\"The tournament is already set to autostart when the player cap is reached.\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttournament.setAutostartAtCap(true);\r\n\t\t\t\t\tthis.privateModAction(`The tournament was set to autostart when the player cap is reached by ${user.name}`);\r\n\t\t\t\t\tthis.modlog('TOUR AUTOSTART', null, 'when playercap is reached');\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (option === '0' || option === 'infinity' || this.meansNo(option) || option === 'stop' || option === 'remove') {\r\n\t\t\t\t\tif (!tournament.autostartcap && tournament.autoStartTimeout === Infinity) {\r\n\t\t\t\t\t\treturn this.errorReply(\"The automatic tournament start timer is already off.\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttarget = 'off';\r\n\t\t\t\t\ttournament.autostartcap = false;\r\n\t\t\t\t}\r\n\t\t\t\tconst timeout = target.toLowerCase() === 'off' ? Infinity : Number(target) * 60 * 1000;\r\n\t\t\t\tif (timeout <= 0 || (timeout !== Infinity && timeout > Chat.MAX_TIMEOUT_DURATION)) {\r\n\t\t\t\t\treturn this.errorReply(`The automatic tournament start timer must be set to a positive number.`);\r\n\t\t\t\t}\r\n\t\t\t\tif (tournament.setAutoStartTimeout(timeout, this)) {\r\n\t\t\t\t\tthis.privateModAction(`The tournament auto start timer was set to ${target} by ${user.name}`);\r\n\t\t\t\t\tthis.modlog('TOUR AUTOSTART', null, timeout === Infinity ? 'off' : target);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tautodq: 'setautodq',\r\n\t\tsetautodq(target, room, user, connection, cmd) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tthis.checkCan('tournaments', null, room);\r\n\t\t\tconst tournament = this.requireGame(Tournament);\r\n\t\t\ttarget = target.trim();\r\n\t\t\tif (!target) {\r\n\t\t\t\tif (tournament.autoDisqualifyTimeout !== Infinity) {\r\n\t\t\t\t\treturn this.sendReply(`Usage: /tour ${cmd} <minutes|off>; The current automatic disqualify timer is set to ${(tournament.autoDisqualifyTimeout / 1000 / 60)} minute(s)`);\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn this.sendReply(`Usage: /tour ${cmd} <minutes|off>`);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (target.toLowerCase() === 'infinity' || target === '0') target = 'off';\r\n\t\t\tconst timeout = target.toLowerCase() === 'off' ? Infinity : Number(target) * 60 * 1000;\r\n\t\t\tif (timeout <= 0 || (timeout !== Infinity && timeout > Chat.MAX_TIMEOUT_DURATION)) {\r\n\t\t\t\treturn this.errorReply(`The automatic disqualification timer must be set to a positive number.`);\r\n\t\t\t}\r\n\t\t\tif (timeout === tournament.autoDisqualifyTimeout) {\r\n\t\t\t\treturn this.errorReply(`The automatic tournament disqualify timer is already set to ${target} minute(s).`);\r\n\t\t\t}\r\n\t\t\tif (tournament.setAutoDisqualifyTimeout(timeout, this)) {\r\n\t\t\t\tthis.privateModAction(`The tournament auto disqualify timer was set to ${target} by ${user.name}`);\r\n\t\t\t\tthis.modlog('TOUR AUTODQ', null, timeout === Infinity ? 'off' : target);\r\n\t\t\t}\r\n\t\t},\r\n\t\trunautodq(target, room, user) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tthis.checkCan('tournaments', null, room);\r\n\t\t\tconst tournament = this.requireGame(Tournament);\r\n\t\t\tif (tournament.autoDisqualifyTimeout === Infinity) {\r\n\t\t\t\treturn this.errorReply(\"The automatic tournament disqualify timer is not set.\");\r\n\t\t\t}\r\n\t\t\ttournament.runAutoDisqualify(this);\r\n\t\t\tthis.roomlog(`${user.name} used /tour runautodq`);\r\n\t\t},\r\n\t\tscout: 'setscouting',\r\n\t\tscouting: 'setscouting',\r\n\t\tsetscout: 'setscouting',\r\n\t\tsetscouting(target, room, user, connection, cmd) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tthis.checkCan('tournaments', null, room);\r\n\t\t\tconst tournament = this.requireGame(Tournament);\r\n\t\t\ttarget = target.trim();\r\n\t\t\tif (!target) {\r\n\t\t\t\tif (tournament.allowScouting) {\r\n\t\t\t\t\treturn this.sendReply(\"This tournament allows spectating other battles while in a tournament.\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn this.sendReply(\"This tournament disallows spectating other battles while in a tournament.\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst option = target.toLowerCase();\r\n\t\t\tif (this.meansYes(option) || option === 'allow' || option === 'allowed') {\r\n\t\t\t\tif (tournament.allowScouting) return this.errorReply(\"Scouting for this tournament is already set to allowed.\");\r\n\t\t\t\ttournament.setScouting(true);\r\n\t\t\t\tthis.privateModAction(`The tournament was set to allow scouting by ${user.name}`);\r\n\t\t\t\tthis.modlog('TOUR SCOUT', null, 'allow');\r\n\t\t\t} else if (this.meansNo(option) || option === 'disallow' || option === 'disallowed') {\r\n\t\t\t\tif (!tournament.allowScouting) return this.errorReply(\"Scouting for this tournament is already disabled.\");\r\n\t\t\t\ttournament.setScouting(false);\r\n\t\t\t\tthis.privateModAction(`The tournament was set to disallow scouting by ${user.name}`);\r\n\t\t\t\tthis.modlog('TOUR SCOUT', null, 'disallow');\r\n\t\t\t} else {\r\n\t\t\t\treturn this.sendReply(`Usage: /tour ${cmd}<allow|disallow>`);\r\n\t\t\t}\r\n\t\t},\r\n\t\tmodjoin: 'setmodjoin',\r\n\t\tsetmodjoin(target, room, user, connection, cmd) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tthis.checkCan('tournaments', null, room);\r\n\t\t\tconst tournament = this.requireGame(Tournament);\r\n\t\t\ttarget = target.trim();\r\n\t\t\tif (!target) {\r\n\t\t\t\tif (tournament.allowModjoin) {\r\n\t\t\t\t\treturn this.sendReply(\"This tournament allows players to modjoin their battles.\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn this.sendReply(\"This tournament does not allow players to modjoin their battles.\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst option = target.toLowerCase();\r\n\t\t\tif (this.meansYes(option) || option === 'allowed') {\r\n\t\t\t\tif (tournament.allowModjoin) return this.errorReply(\"Modjoining is already allowed for this tournament.\");\r\n\t\t\t\ttournament.setModjoin(true);\r\n\t\t\t\tthis.privateModAction(`The tournament was set to allow modjoin by ${user.name}`);\r\n\t\t\t\tthis.modlog('TOUR MODJOIN', null, option);\r\n\t\t\t} else if (this.meansNo(option) || option === 'disallowed') {\r\n\t\t\t\tif (!tournament.allowModjoin) return this.errorReply(\"Modjoining is already not allowed for this tournament.\");\r\n\t\t\t\ttournament.setModjoin(false);\r\n\t\t\t\tthis.privateModAction(`The tournament was set to disallow modjoin by ${user.name}`);\r\n\t\t\t\tthis.modlog('TOUR MODJOIN', null, option);\r\n\t\t\t} else {\r\n\t\t\t\treturn this.sendReply(`Usage: /tour ${cmd} <allow|disallow>`);\r\n\t\t\t}\r\n\t\t},\r\n\t\taconly: 'autoconfirmedonly',\r\n\t\tonlyac: 'autoconfirmedonly',\r\n\t\tonlyautoconfirmed: 'autoconfirmedonly',\r\n\t\tautoconfirmedonly(target, room, user, connection, cmd) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tthis.checkCan('tournaments', null, room);\r\n\t\t\tconst tournament = this.requireGame(Tournament);\r\n\t\t\ttarget = target.trim();\r\n\t\t\tif (!target) {\r\n\t\t\t\treturn this.sendReply(\r\n\t\t\t\t\t`This tournament ${tournament.autoconfirmedOnly ? 'does not allow' : 'allows'} non-autoconfirmed users to join a tournament.`\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tconst value = this.meansYes(target) ? true : this.meansNo(target) ? false : null;\r\n\t\t\ttarget = value ? 'ON' : 'OFF';\r\n\t\t\tif (value === null || !toID(target)) {\r\n\t\t\t\treturn this.parse(`/help tour`);\r\n\t\t\t}\r\n\t\t\tif (tournament.autoconfirmedOnly === value) {\r\n\t\t\t\treturn this.errorReply(`This tournament is already set to ${value ? 'disallow' : 'allow'} non-autoconfirmed users.`);\r\n\t\t\t}\r\n\t\t\ttournament.setAutoconfirmedOnly(value);\r\n\t\t\tthis.privateModAction(`${user.name} set this tournament to ${value ? 'disallow' : 'allow'} non-autoconfirmed users.`);\r\n\t\t\tthis.modlog('TOUR AUTOCONFIRMEDONLY', null, target);\r\n\t\t},\r\n\t\tforcepublic(target, room, user, connection, cmd) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tthis.checkCan('tournaments', null, room);\r\n\t\t\tconst tournament = this.requireGame(Tournament);\r\n\t\t\ttarget = target.trim();\r\n\t\t\tconst option = target || 'on';\r\n\t\t\tif (this.meansYes(option)) {\r\n\t\t\t\tif (tournament.forcePublic) {\r\n\t\t\t\t\tthrow new Chat.ErrorMessage(`Tournament battles are already being forced public.`);\r\n\t\t\t\t}\r\n\t\t\t\ttournament.setForcePublic(true);\r\n\t\t\t\tthis.privateModAction(`Tournament public battles were turned ON by ${user.name}`);\r\n\t\t\t\tthis.modlog('TOUR FORCEPUBLIC', null, 'ON');\r\n\t\t\t} else if (this.meansNo(option) || option === 'stop') {\r\n\t\t\t\tif (!tournament.forcePublic) {\r\n\t\t\t\t\tthrow new Chat.ErrorMessage(`Tournament battles are not being forced public.`);\r\n\t\t\t\t}\r\n\t\t\t\ttournament.setForcePublic(false);\r\n\t\t\t\tthis.privateModAction(`Tournament public battles were turned OFF by ${user.name}`);\r\n\t\t\t\tthis.modlog('TOUR FORCEPUBLIC', null, 'OFF');\r\n\t\t\t} else {\r\n\t\t\t\treturn this.sendReply(`Usage: /tour ${cmd} <on|off>`);\r\n\t\t\t}\r\n\t\t},\r\n\t\tforcetimer(target, room, user, connection, cmd) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tthis.checkCan('tournaments', null, room);\r\n\t\t\tconst tournament = this.requireGame(Tournament);\r\n\t\t\ttarget = target.trim();\r\n\t\t\tconst option = target ? target.toLowerCase() : 'on';\r\n\t\t\tif (this.meansYes(option)) {\r\n\t\t\t\ttournament.setForceTimer(true);\r\n\t\t\t\tfor (const player of tournament.players) {\r\n\t\t\t\t\tplayer.inProgressMatch?.room.game?.startTimer();\r\n\t\t\t\t}\r\n\t\t\t\tthis.privateModAction(`The timer was turned on for the tournament by ${user.name}`);\r\n\t\t\t\tthis.modlog('TOUR FORCETIMER', null, 'ON');\r\n\t\t\t} else if (this.meansNo(option) || option === 'stop') {\r\n\t\t\t\ttournament.setForceTimer(false);\r\n\t\t\t\tthis.privateModAction(`The timer was turned off for the tournament by ${user.name}`);\r\n\t\t\t\tthis.modlog('TOUR FORCETIMER', null, 'OFF');\r\n\t\t\t} else {\r\n\t\t\t\treturn this.sendReply(`Usage: /tour ${cmd} <on|off>`);\r\n\t\t\t}\r\n\t\t},\r\n\t\tsettings: {\r\n\t\t\tmodjoin(target, room, user) {\r\n\t\t\t\troom = this.requireRoom();\r\n\t\t\t\tthis.checkCan('declare', null, room);\r\n\t\t\t\tif (!target || (!this.meansYes(target) && !this.meansNo(target))) {\r\n\t\t\t\t\treturn this.parse(`/help tour settings`);\r\n\t\t\t\t}\r\n\t\t\t\tconst tour = room.getGame(Tournament);\r\n\t\t\t\troom.settings.tournaments ||= {};\r\n\t\t\t\tif (this.meansYes(target)) {\r\n\t\t\t\t\tif (room.settings.tournaments.allowModjoin) {\r\n\t\t\t\t\t\tthrow new Chat.ErrorMessage(`Modjoin is already enabled for every tournament.`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (tour && !tour.allowModjoin) this.parse(`/tour modjoin allow`);\r\n\t\t\t\t\troom.settings.tournaments.allowModjoin = true;\r\n\t\t\t\t\troom.saveSettings();\r\n\t\t\t\t\tthis.privateModAction(`Modjoin was enabled for every tournament by ${user.name}`);\r\n\t\t\t\t\tthis.modlog('TOUR SETTINGS', null, 'modjoin: ALLOW');\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (!room.settings.tournaments.allowModjoin) {\r\n\t\t\t\t\t\tthrow new Chat.ErrorMessage(`Modjoin is already disabled for every tournament.`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (tour?.allowModjoin) this.parse(`/tour modjoin disallow`);\r\n\t\t\t\t\troom.settings.tournaments.allowModjoin = false;\r\n\t\t\t\t\troom.saveSettings();\r\n\t\t\t\t\tthis.privateModAction(`Modjoin was disabled for every tournament by ${user.name}`);\r\n\t\t\t\t\tthis.modlog('TOUR SETTINGS', null, 'modjoin: DISALLOW');\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tscouting(target, room, user) {\r\n\t\t\t\troom = this.requireRoom();\r\n\t\t\t\tthis.checkCan('declare', null, room);\r\n\t\t\t\tif (!target || (!this.meansYes(target) && !this.meansNo(target))) return this.parse(`/help tour settings`);\r\n\t\t\t\tconst tour = room.getGame(Tournament);\r\n\t\t\t\troom.settings.tournaments ||= {};\r\n\t\t\t\tif (this.meansYes(target)) {\r\n\t\t\t\t\tif (room.settings.tournaments.allowScouting) {\r\n\t\t\t\t\t\tthrow new Chat.ErrorMessage(`Scouting is already enabled for every tournament.`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (tour && !tour.allowScouting) this.parse(`/tour scouting allow`);\r\n\t\t\t\t\troom.settings.tournaments.allowScouting = true;\r\n\t\t\t\t\troom.saveSettings();\r\n\t\t\t\t\tthis.privateModAction(`Scouting was enabled for every tournament by ${user.name}`);\r\n\t\t\t\t\tthis.modlog('TOUR SETTINGS', null, 'scouting: ALLOW');\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (!room.settings.tournaments.allowScouting) {\r\n\t\t\t\t\t\tthrow new Chat.ErrorMessage(`Scouting is already disabled for every tournament.`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (tour?.allowScouting) this.parse(`/tour scouting disallow`);\r\n\t\t\t\t\troom.settings.tournaments.allowScouting = false;\r\n\t\t\t\t\troom.saveSettings();\r\n\t\t\t\t\tthis.privateModAction(`Scouting was disabled for every tournament by ${user.name}`);\r\n\t\t\t\t\tthis.modlog('TOUR SETTINGS', null, 'scouting: DISALLOW');\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\taconly: 'autoconfirmedonly',\r\n\t\t\tonlyac: 'autoconfirmedonly',\r\n\t\t\tonlyautoconfirmed: 'autoconfirmedonly',\r\n\t\t\tautoconfirmedonly(target, room, user) {\r\n\t\t\t\troom = this.requireRoom();\r\n\t\t\t\tthis.checkCan('declare', null, room);\r\n\t\t\t\tconst tour = room.getGame(Tournament);\r\n\t\t\t\troom.settings.tournaments ||= {};\r\n\t\t\t\tconst value = this.meansYes(target) ? true : this.meansNo(target) ? false : null;\r\n\t\t\t\tif (!target || value === null) return this.parse(`/help tour settings`);\r\n\t\t\t\tif (room.settings.tournaments.autoconfirmedOnly === value) {\r\n\t\t\t\t\treturn this.errorReply(`All tournaments are already set to ${value ? 'disallow' : 'allow'} non-autoconfimed users.`);\r\n\t\t\t\t}\r\n\t\t\t\troom.settings.tournaments.autoconfirmedOnly = value;\r\n\t\t\t\troom.saveSettings();\r\n\t\t\t\ttarget = value ? 'ON' : 'OFF';\r\n\t\t\t\tthis.modlog('TOUR SETTINGS', null, `autoconfirmed only: ${target}`);\r\n\t\t\t\tif (tour) this.parse(`/tour autoconfirmedonly ${target}`);\r\n\t\t\t\tthis.privateModAction(`${user.name} set all tournaments to ${value ? 'disallow' : 'allow'} non-autoconfirmed users.`);\r\n\t\t\t},\r\n\t\t\tforcepublic(target, room, user) {\r\n\t\t\t\troom = this.requireRoom();\r\n\t\t\t\tthis.checkCan('declare', null, room);\r\n\t\t\t\tif (!target || (!this.meansNo(target) && !this.meansYes(target))) return this.parse(`/help tour settings`);\r\n\t\t\t\tconst tour = room.getGame(Tournament);\r\n\t\t\t\troom.settings.tournaments ||= {};\r\n\t\t\t\tif (this.meansNo(target)) {\r\n\t\t\t\t\tif (!room.settings.tournaments.forcePublic) {\r\n\t\t\t\t\t\tthrow new Chat.ErrorMessage(`Forced public battles are already disabled for every tournament.`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (tour?.forcePublic) this.parse(`/tour forcepublic off`);\r\n\t\t\t\t\troom.settings.tournaments.forcePublic = false;\r\n\t\t\t\t\troom.saveSettings();\r\n\t\t\t\t\tthis.privateModAction(`Forced public battles were disabled for every tournament by ${user.name}`);\r\n\t\t\t\t\tthis.modlog('TOUR SETTINGS', null, 'forcepublic: DISABLE');\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (room.settings.tournaments.forcePublic) {\r\n\t\t\t\t\t\tthrow new Chat.ErrorMessage(`Forced public battles are already enabled for every tournament.`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (tour && !tour.forcePublic) this.parse(`/tour forcepublic on`);\r\n\t\t\t\t\troom.settings.tournaments.forcePublic = true;\r\n\t\t\t\t\troom.saveSettings();\r\n\t\t\t\t\tthis.privateModAction(`Forced public battles were enabled for every tournament by ${user.name}`);\r\n\t\t\t\t\tthis.modlog('TOUR SETTINGS', null, 'forcepublic: ENABLE');\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tforcetimer(target, room, user) {\r\n\t\t\t\troom = this.requireRoom();\r\n\t\t\t\tthis.checkCan('declare', null, room);\r\n\t\t\t\tif (!target || (!this.meansNo(target) && !this.meansYes(target))) return this.parse(`/help tour settings`);\r\n\t\t\t\tconst tour = room.getGame(Tournament);\r\n\t\t\t\troom.settings.tournaments ||= {};\r\n\t\t\t\tif (this.meansNo(target)) {\r\n\t\t\t\t\tif (!room.settings.tournaments.forceTimer) {\r\n\t\t\t\t\t\tthrow new Chat.ErrorMessage(`Forced timer is already disabled for every tournament.`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (tour?.forceTimer) this.parse(`/tour forcetimer off`);\r\n\t\t\t\t\troom.settings.tournaments.forceTimer = false;\r\n\t\t\t\t\troom.saveSettings();\r\n\t\t\t\t\tthis.privateModAction(`Forced timer was disabled for every tournament by ${user.name}`);\r\n\t\t\t\t\tthis.modlog('TOUR SETTINGS', null, 'forcetimer: DISABLE');\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (room.settings.tournaments.forceTimer) {\r\n\t\t\t\t\t\tthrow new Chat.ErrorMessage(`Forced timer is already enabled for every tournament.`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (tour && !tour.forceTimer) this.parse(`/tour forcetimer on`);\r\n\t\t\t\t\troom.settings.tournaments.forceTimer = true;\r\n\t\t\t\t\troom.saveSettings();\r\n\t\t\t\t\tthis.privateModAction(`Forced timer was enabled for every tournament by ${user.name}`);\r\n\t\t\t\t\tthis.modlog('TOUR SETTINGS', null, 'forcetimer: ENABLE');\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tautostart(target, room, user) {\r\n\t\t\t\troom = this.requireRoom();\r\n\t\t\t\tthis.checkCan('declare', null, room);\r\n\t\t\t\tconst num = Number(target);\r\n\t\t\t\tif (!target || (!this.meansYes(target) && !this.meansNo(target) && isNaN(num))) {\r\n\t\t\t\t\treturn this.parse(`/help tour settings`);\r\n\t\t\t\t}\r\n\t\t\t\tconst tour = room.getGame(Tournament);\r\n\t\t\t\troom.settings.tournaments ||= {};\r\n\t\t\t\tif (this.meansNo(target)) {\r\n\t\t\t\t\tif (!room.settings.tournaments.autostart) {\r\n\t\t\t\t\t\tthrow new Chat.ErrorMessage(`Autostart is already disabled for every tournament.`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (tour && !tour.isTournamentStarted && tour.autoDisqualifyTimeout !== Infinity) {\r\n\t\t\t\t\t\tthis.parse(`/tour setautojoin off`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\troom.settings.tournaments.autostart = false;\r\n\t\t\t\t\troom.saveSettings();\r\n\t\t\t\t\tthis.privateModAction(`Autostart was disabled for every tournament by ${user.name}`);\r\n\t\t\t\t\tthis.modlog('TOUR SETTINGS', null, 'autostart: DISABLE');\r\n\t\t\t\t} else if (this.meansYes(target) && target !== '1') {\r\n\t\t\t\t\tif (room.settings.tournaments.autostart === true) {\r\n\t\t\t\t\t\tthrow new Chat.ErrorMessage(`Autostart for every tournament is already set to true.`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\troom.settings.tournaments.autostart = true;\r\n\t\t\t\t\tif (tour && !tour.isTournamentStarted && tour.playerCap) this.parse(`/tour setautostart on`);\r\n\t\t\t\t\troom.saveSettings();\r\n\t\t\t\t\tthis.privateModAction(`Autostart was set to true for every tournament by ${user.name}`);\r\n\t\t\t\t\tthis.modlog('TOUR SETTINGS', null, `autostart: ON`);\r\n\t\t\t\t} else if (!isNaN(num)) {\r\n\t\t\t\t\tconst timeout = num * 60 * 1000;\r\n\t\t\t\t\tif (timeout < 0.5 * 60 * 1000 || timeout > Chat.MAX_TIMEOUT_DURATION) {\r\n\t\t\t\t\t\tthrow new Chat.ErrorMessage(`The autostart must be set to at least 0.5.`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (room.settings.tournaments.autostart === timeout) {\r\n\t\t\t\t\t\tthrow new Chat.ErrorMessage(`Autostart for every tournament is already set to ${num}.`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\troom.settings.tournaments.autostart = timeout;\r\n\t\t\t\t\tif (tour && !tour.isTournamentStarted && tour.autoStartTimeout === Infinity) {\r\n\t\t\t\t\t\tthis.parse(`/tour setautostart ${num}`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\troom.saveSettings();\r\n\t\t\t\t\tthis.privateModAction(`Autostart was set to ${num} minute(s) for every tournament by ${user.name}`);\r\n\t\t\t\t\tthis.modlog('TOUR SETTINGS', null, `autostart: ${num} minute(s)`);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tautodq(target, room, user) {\r\n\t\t\t\troom = this.requireRoom();\r\n\t\t\t\tthis.checkCan('declare', null, room);\r\n\t\t\t\tconst num = Number(target);\r\n\t\t\t\tif (!target || (!this.meansNo(target) && isNaN(num))) return this.parse(`/help tour settings`);\r\n\t\t\t\tconst tour = room.getGame(Tournament);\r\n\t\t\t\troom.settings.tournaments ||= {};\r\n\t\t\t\tif (this.meansNo(target)) {\r\n\t\t\t\t\tif (!room.settings.tournaments.autodq) {\r\n\t\t\t\t\t\tthrow new Chat.ErrorMessage(`Automatic disqualification is already disabled for every tournament.`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (tour && !tour.isTournamentStarted && tour.autoDisqualifyTimeout !== Infinity) {\r\n\t\t\t\t\t\tthis.parse(`/tour autodq off`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdelete room.settings.tournaments.autodq;\r\n\t\t\t\t\troom.saveSettings();\r\n\t\t\t\t\tthis.privateModAction(`Automatic disqualification was disabled for every tournament by ${user.name}`);\r\n\t\t\t\t\tthis.modlog('TOUR SETTINGS', null, 'autodq: DISABLE');\r\n\t\t\t\t} else if (!isNaN(num)) {\r\n\t\t\t\t\tconst timeout = num * 60 * 1000;\r\n\t\t\t\t\tif (timeout < 0.5 * 60 * 1000 || timeout > Chat.MAX_TIMEOUT_DURATION) {\r\n\t\t\t\t\t\tthrow new Chat.ErrorMessage(`The autodq must be set to a number greater than 1.`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (room.settings.tournaments.autodq === timeout) {\r\n\t\t\t\t\t\tthrow new Chat.ErrorMessage(`Automatic disqualification for every tournament is already set to ${num}.`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\troom.settings.tournaments.autodq = timeout;\r\n\t\t\t\t\tif (tour?.autoDisqualifyTimeout === Infinity) {\r\n\t\t\t\t\t\tthis.parse(`/tour autodq ${num}`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\troom.saveSettings();\r\n\t\t\t\t\tthis.privateModAction(`Automatic disqualification was set to ${num} minute(s) for every tournament by ${user.name}`);\r\n\t\t\t\t\tthis.modlog('TOUR SETTINGS', null, `autodq: ${num} minute(s)`);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tplayercap(target, room, user) {\r\n\t\t\t\troom = this.requireRoom();\r\n\t\t\t\tthis.checkCan('declare', null, room);\r\n\t\t\t\tconst num = parseInt(target);\r\n\t\t\t\tif (!target || (!this.meansNo(target) && isNaN(num))) return this.parse(`/help tour settings`);\r\n\t\t\t\tconst tour = room.getGame(Tournament);\r\n\t\t\t\troom.settings.tournaments ||= {};\r\n\t\t\t\tif (this.meansNo(target)) {\r\n\t\t\t\t\tif (!room.settings.tournaments.playerCap) {\r\n\t\t\t\t\t\tthrow new Chat.ErrorMessage(`Player Cap is already removed for every tournament.`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (tour && !tour.isTournamentStarted && tour.playerCap) {\r\n\t\t\t\t\t\tthis.parse(`/tour setplayercap off`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdelete room.settings.tournaments.playerCap;\r\n\t\t\t\t\troom.saveSettings();\r\n\t\t\t\t\tthis.privateModAction(`Player Cap was removed for every tournament by ${user.name}`);\r\n\t\t\t\t\tthis.modlog('TOUR SETTINGS', null, 'playercap: REMOVE');\r\n\t\t\t\t} else if (!isNaN(num)) {\r\n\t\t\t\t\tif (num < 2) {\r\n\t\t\t\t\t\tthrow new Chat.ErrorMessage(`The Player Cap must be at least 2.`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (room.settings.tournaments.playerCap === num) {\r\n\t\t\t\t\t\tthrow new Chat.ErrorMessage(`Player Cap for every tournament is already set to ${num}.`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\troom.settings.tournaments.playerCap = num;\r\n\t\t\t\t\tif (tour && !tour.isTournamentStarted && !tour.playerCap) {\r\n\t\t\t\t\t\tthis.parse(`/tour setplayercap ${num}`);\r\n\t\t\t\t\t\tif (room.settings.tournaments.autostart === true) this.parse(`/tour autostart on`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\troom.saveSettings();\r\n\t\t\t\t\tthis.privateModAction(`Player Cap was set to ${num} for every tournament by ${user.name}`);\r\n\t\t\t\t\tthis.modlog('TOUR SETTINGS', null, `playercap: ${num}`);\r\n\t\t\t\t\tif (Config.tourdefaultplayercap && room.settings.tournaments.playerCap > Config.tourdefaultplayercap) {\r\n\t\t\t\t\t\tMonitor.log(`[TourMonitor] Room ${room.roomid} setting cap for every tour over default cap (${room.settings.tournaments.playerCap})`);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn this.sendReply(`Usage: ${this.cmdToken}${this.fullCmd} <number|off>`);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\trecenttours(target, room, user) {\r\n\t\t\t\troom = this.requireRoom();\r\n\t\t\t\tthis.checkCan('declare', null, room);\r\n\t\t\t\tlet num = parseInt(target);\r\n\t\t\t\tconst forcedelete = toID(target) === 'forcedelete';\r\n\t\t\t\tif (this.meansNo(target) || forcedelete) num = 0;\r\n\t\t\t\tif (isNaN(num) || num > 15 || num < 0) {\r\n\t\t\t\t\treturn this.parse(`/help tour settings`);\r\n\t\t\t\t}\r\n\t\t\t\troom.settings.tournaments ||= {};\r\n\t\t\t\tif (num >= 1) {\r\n\t\t\t\t\tif (room.settings.tournaments.recentToursLength === num) {\r\n\t\t\t\t\t\tthrow new Chat.ErrorMessage(`Number of recent tournaments to record is already set to ${num}.`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\troom.settings.tournaments.recentToursLength = num;\r\n\t\t\t\t\tif (room.settings.tournaments.recentTours) {\r\n\t\t\t\t\t\twhile (room.settings.tournaments.recentTours.length > num) {\r\n\t\t\t\t\t\t\troom.settings.tournaments.recentTours.pop();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\troom.saveSettings();\r\n\t\t\t\t\tthis.privateModAction(`Number of recent tournaments to record was set to ${num} by ${user.name}.`);\r\n\t\t\t\t\tthis.modlog('TOUR SETTINGS', null, `recent tours: ${num} most recent`);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (forcedelete && room.settings.tournaments.recentTours) {\r\n\t\t\t\t\t\tdelete room.settings.tournaments.recentTours;\r\n\t\t\t\t\t\tthis.privateModAction(`Recent tournaments list was deleted by ${user.name}.`);\r\n\t\t\t\t\t\tthis.modlog('TOUR SETTINGS', null, `recent tours: delete`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!room.settings.tournaments.recentToursLength) {\r\n\t\t\t\t\t\tthrow new Chat.ErrorMessage(`Number of recent tournaments to record is already disabled.`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdelete room.settings.tournaments.recentToursLength;\r\n\t\t\t\t\troom.saveSettings();\r\n\t\t\t\t\tthis.privateModAction(`Number of recent tournaments to record was turned off by ${user.name}.`);\r\n\t\t\t\t\tthis.modlog('TOUR SETTINGS', null, `recent tours: off`);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tblockrecents(target, room, user) {\r\n\t\t\t\troom = this.requireRoom();\r\n\t\t\t\tthis.checkCan('declare', null, room);\r\n\t\t\t\ttarget = toID(target);\r\n\t\t\t\tif (!target || (!this.meansYes(target) && !this.meansNo(target))) {\r\n\t\t\t\t\tif (room.settings.tournaments?.blockRecents) {\r\n\t\t\t\t\t\tthis.sendReply(`Recent tournaments are currently ${room.settings.tournaments.blockRecents ? '' : 'NOT '} blocked from being made.`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn this.parse(`/help tour settings`);\r\n\t\t\t\t}\r\n\t\t\t\troom.settings.tournaments ||= {};\r\n\t\t\t\tif (this.meansYes(target)) {\r\n\t\t\t\t\tif (room.settings.tournaments.blockRecents) {\r\n\t\t\t\t\t\tthrow new Chat.ErrorMessage(`Recent tournaments are already blocked from being made.`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\troom.settings.tournaments.blockRecents = true;\r\n\t\t\t\t\troom.saveSettings();\r\n\t\t\t\t\tthis.privateModAction(`Recent tournaments were blocked from being made by ${user.name}.`);\r\n\t\t\t\t\tthis.modlog('TOUR SETTINGS', null, `recent tour block: on`);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (!room.settings.tournaments.blockRecents) {\r\n\t\t\t\t\t\tthrow new Chat.ErrorMessage(`Recent tournaments are already allowed to be remade.`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdelete room.settings.tournaments.blockRecents;\r\n\t\t\t\t\troom.saveSettings();\r\n\t\t\t\t\tthis.privateModAction(`Recent tournaments were allowed to be remade by ${user.name}.`);\r\n\t\t\t\t\tthis.modlog('TOUR SETTINGS', null, `recent tour block: off`);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'': 'help',\r\n\t\t\thelp() {\r\n\t\t\t\tthis.parse(`${this.cmdToken}help tour settings`);\r\n\t\t\t},\r\n\t\t},\r\n\t\tsettingshelp: [\r\n\t\t\t`/tour settings autodq <minutes|off> - Sets the automatic disqualification timeout for every tournament.`,\r\n\t\t\t`/tour settings autostart <on|minutes|off> - Sets the automatic start timeout for every tournament.`,\r\n\t\t\t`/tour settings forcepublic <on|off> - Specifies whether users can hide their battles for every tournament.`,\r\n\t\t\t`/tour settings forcetimer <on|off> - Specifies whether users can toggle the timer for every tournament.`,\r\n\t\t\t`/tour settings modjoin <on|off> - Specifies whether users can modjoin their battles for every tournament.`,\r\n\t\t\t`/tour settings autoconfirmedonly: <on|off> - Set requirement for signups for this tournament. If this is on, only autoconfirmed users can join a tournament.`,\r\n\t\t\t`/tour settings playercap <number> - Sets the playercap for every tournament.`,\r\n\t\t\t`/tour settings scouting <on|off> - Specifies whether users can spectate other participants for every tournament.`,\r\n\t\t\t`/tour settings recenttours <number|off|forcedelete> - Specifies the amount of recent tournaments to list in /recenttours.`,\r\n\t\t\t`/tour settings blockrecents <on|off> - Toggles blocking tours in /recenttours from being made.`,\r\n\t\t\t`Requires: # &`,\r\n\t\t],\r\n\t},\r\n\ttournamenthelp() {\r\n\t\tif (!this.runBroadcast()) return;\r\n\t\tthis.sendReplyBox(\r\n\t\t\t`Tournament Commands<br/>` +\r\n\t\t\t`- create/new &lt;format>, &lt;type>, [ &lt;comma-separated arguments>]: Creates a new tournament in the current room.<br />` +\r\n\t\t\t`- rules &lt;comma-separated arguments>: Sets the custom rules for the tournament before it has started. <a href=\"view-battlerules\">Custom rules help/list</a><br />` +\r\n\t\t\t`- end/stop/delete: Forcibly ends the tournament in the current room.<br />` +\r\n\t\t\t`- begin/start: Starts the tournament in the current room.<br /><br />` +\r\n\t\t\t`<details class=\"readmore\"><summary>Configuration Commands</summary>` +\r\n\t\t\t`- settype &lt;type> [, &lt;comma-separated arguments>]: Modifies the type of tournament after it's been created, but before it has started.<br />` +\r\n\t\t\t`- cap/playercap &lt;cap>: Sets the player cap of the tournament before it has started.<br />` +\r\n\t\t\t`- viewrules/viewbanlist: Shows the custom rules for the tournament.<br />` +\r\n\t\t\t`- clearrules/clearbanlist: Clears the custom rules for the tournament before it has started.<br />` +\r\n\t\t\t`- name &lt;name>: Sets a custom name for the tournament.<br />` +\r\n\t\t\t`- clearname: Clears the custom name of the tournament.<br />` +\r\n\t\t\t`- autostart/setautostart &lt;on|minutes|off>: Sets the automatic start timeout.<br />` +\r\n\t\t\t`- dq/disqualify &lt;user>: Disqualifies a user.<br />` +\r\n\t\t\t`- autodq/setautodq &lt;minutes|off>: Sets the automatic disqualification timeout.<br />` +\r\n\t\t\t`- runautodq: Manually run the automatic disqualifier.<br />` +\r\n\t\t\t`- autoconfirmedonly/onlyautoconfirmed/aconly/onlyac &lt;on|off>: Set requirement for signups for this tournament. If this is on, only autoconfirmed users can join a tournament.<br />` +\r\n\t\t\t`- scouting &lt;allow|disallow>: Specifies whether joining tournament matches while in a tournament is allowed.<br />` +\r\n\t\t\t`- modjoin &lt;allow|disallow>: Specifies whether players can modjoin their battles.<br />` +\r\n\t\t\t`- forcetimer &lt;on|off>: Turn on the timer for tournament battles.<br />` +\r\n\t\t\t`- forcepublic &lt;on|off>: Forces tournament battles and their replays to be public.<br />` +\r\n\t\t\t`- getusers: Lists the users in the current tournament.<br />` +\r\n\t\t\t`- announce/announcements &lt;on|off>: Enables/disables tournament announcements for the current room.<br />` +\r\n\t\t\t`- banuser/unbanuser &lt;user>: Bans/unbans a user from joining tournaments in this room. Lasts 2 weeks.<br />` +\r\n\t\t\t`- sub/replace &lt;olduser>, &lt;newuser>: Substitutes a new user for an old one<br />` +\r\n\t\t\t`- settings: Do <code>/help tour settings</code> for more information<br />` +\r\n\t\t\t`</details>` +\r\n\t\t\t`<br />` +\r\n\t\t\t`You can also consult <a href=\"https://www.smogon.com/forums/threads/3570628/#post-6777489\">more detailed help</a>.`\r\n\t\t);\r\n\t},\r\n};\r\n\r\nconst roomSettings: Chat.SettingsHandler[] = [\r\n\troom => ({\r\n\t\tlabel: \"Tournament Forced Public Battles\",\r\n\t\tpermission: \"editroom\",\r\n\t\toptions: [\r\n\t\t\t['on', room.settings.tournaments?.forcePublic || 'tour settings forcepublic on'],\r\n\t\t\t['off', !room.settings.tournaments?.forcePublic || 'tour settings forcepublic off'],\r\n\t\t],\r\n\t}),\r\n\troom => ({\r\n\t\tlabel: \"Tournament Forced Timer\",\r\n\t\tpermission: \"editroom\",\r\n\t\toptions: [\r\n\t\t\t['on', room.settings.tournaments?.forceTimer || 'tour settings forcetimer on'],\r\n\t\t\t['off', !room.settings.tournaments?.forceTimer || 'tour settings forcetimer off'],\r\n\t\t],\r\n\t}),\r\n\troom => ({\r\n\t\tlabel: \"Tournament Modjoin\",\r\n\t\tpermission: \"editroom\",\r\n\t\toptions: [\r\n\t\t\t['allow', room.settings.tournaments?.allowModjoin || 'tour settings modjoin allow'],\r\n\t\t\t['disallow', !room.settings.tournaments?.allowModjoin || 'tour settings modjoin disallow'],\r\n\t\t],\r\n\t}),\r\n\troom => ({\r\n\t\tlabel: \"Tournament Autoconfirmed Only\",\r\n\t\tpermission: \"editroom\",\r\n\t\toptions: [\r\n\t\t\t['on', room.settings.tournaments?.autoconfirmedOnly || 'tour settings aconly on'],\r\n\t\t\t['off', !room.settings.tournaments?.autoconfirmedOnly || 'tour settings aconly off'],\r\n\t\t],\r\n\t}),\r\n\troom => ({\r\n\t\tlabel: \"Tournament Scouting\",\r\n\t\tpermission: \"editroom\",\r\n\t\toptions: [\r\n\t\t\t['allow', room.settings.tournaments?.allowScouting || 'tour settings scouting allow'],\r\n\t\t\t['disallow', !room.settings.tournaments?.allowScouting || 'tour settings scouting disallow'],\r\n\t\t],\r\n\t}),\r\n\troom => ({\r\n\t\tlabel: \"Tournament Recent Tours\",\r\n\t\tpermission: \"editroom\",\r\n\t\toptions: ['off', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15].map(\r\n\t\t\tsetting => (\r\n\t\t\t\t[\r\n\t\t\t\t\t`${setting}`,\r\n\t\t\t\t\tsetting === (room.settings.tournaments?.recentToursLength || 'off') || `tour settings recenttours ${setting}`,\r\n\t\t\t\t]\r\n\t\t\t)\r\n\t\t),\r\n\t}),\r\n\troom => ({\r\n\t\tlabel: \"Tournament Block Recent Tours\",\r\n\t\tpermission: \"editroom\",\r\n\t\toptions: [\r\n\t\t\t['on', room.settings.tournaments?.blockRecents || 'tour settings blockrecents on'],\r\n\t\t\t['off', !room.settings.tournaments?.blockRecents || 'tour settings blockrecents off'],\r\n\t\t],\r\n\t}),\r\n];\r\n\r\nexport const Tournaments = {\r\n\tTournamentGenerators,\r\n\tTournamentPlayer,\r\n\tTournament,\r\n\tcreateTournament,\r\n\tcommands,\r\n\troomSettings,\r\n};\r\n\r\nfor (const room of Rooms.rooms.values()) {\r\n\tconst announcements = (room.settings as any).tourAnnouncements;\r\n\tdelete (room.settings as any).tourAnnouncements;\r\n\tif (!announcements) {\r\n\t\troom.saveSettings();\r\n\t\tcontinue;\r\n\t}\r\n\tif (!room.settings.tournaments) room.settings.tournaments = {};\r\n\troom.settings.tournaments.announcements = announcements;\r\n\troom.saveSettings();\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
