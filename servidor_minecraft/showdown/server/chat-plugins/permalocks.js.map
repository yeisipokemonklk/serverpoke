{
  "version": 3,
  "sources": ["../../../../server/chat-plugins/permalocks.ts"],
  "sourcesContent": ["/**\r\n * Wrapper to facilitate posting / interacting with Smogon.\r\n * By Mia.\r\n * @author mia-pi-git\r\n */\r\nimport {Net, FS, Utils} from '../../lib';\r\n\r\nexport interface Nomination {\r\n\tby: ID;\r\n\tips: string[];\r\n\tinfo: string;\r\n\tdate: number;\r\n\tstanding: string;\r\n\talts: string[];\r\n\tprimaryID: ID;\r\n\tclaimed?: ID;\r\n\tpost?: string;\r\n}\r\n\r\ninterface IPData {\r\n\tcountry: string;\r\n\tisp: string;\r\n\tcity: string;\r\n\tregionName: string;\r\n\tlat: number;\r\n\tlon: number;\r\n}\r\n\r\nexport function getIPData(ip: string) {\r\n\ttry {\r\n\t\treturn Net(\"https://miapi.dev/api/ip/\" + ip).get().then(JSON.parse) as Promise<IPData>;\r\n\t} catch {\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\nexport const Smogon = new class {\r\n\tasync post(threadNum: string, postText: string) {\r\n\t\tif (!Config.smogon) return null;\r\n\t\ttry {\r\n\t\t\tconst raw = await Net(`https://www.smogon.com/forums/api/posts`).get({\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\tbody: new URLSearchParams({\r\n\t\t\t\t\tthread_id: threadNum,\r\n\t\t\t\t\tmessage: postText,\r\n\t\t\t\t}).toString(),\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'XF-Api-Key': Config.smogon,\r\n\t\t\t\t\t'Content-Type': 'application/x-www-form-urlencoded',\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t\t// todo return URL of post\r\n\t\t\tconst data = JSON.parse(raw);\r\n\t\t\tif (data.errors?.length) {\r\n\t\t\t\tconst errData = data.errors.pop();\r\n\t\t\t\tthrow new Error(errData.message);\r\n\t\t\t}\r\n\t\t\treturn data;\r\n\t\t} catch (e: any) {\r\n\t\t\tif (e.message.includes('Not Found')) {\r\n\t\t\t\t// special case to be loud\r\n\t\t\t\tthrow new Error(\"WHO DELETED THE PERMA THREAD\");\r\n\t\t\t}\r\n\t\t\treturn {error: e.message};\r\n\t\t}\r\n\t}\r\n};\r\n\r\nexport const Nominations = new class {\r\n\tnoms: Nomination[] = [];\r\n\ticons: Record<string, string> = {};\r\n\tconstructor() {\r\n\t\tthis.load();\r\n\t}\r\n\tload() {\r\n\t\ttry {\r\n\t\t\tlet data = JSON.parse(FS('config/chat-plugins/permas.json').readSync());\r\n\t\t\tif (Array.isArray(data)) {\r\n\t\t\t\tdata = {noms: data, icons: {}};\r\n\t\t\t\tFS('config/chat-plugins/permas.json').writeSync(JSON.stringify(data));\r\n\t\t\t}\r\n\t\t\tthis.noms = data.noms;\r\n\t\t\tthis.icons = data.icons;\r\n\t\t} catch {}\r\n\t}\r\n\tfetchModlog(id: string) {\r\n\t\treturn Rooms.Modlog.search('global', {\r\n\t\t\tuser: [{search: id, isExact: true}],\r\n\t\t\tnote: [],\r\n\t\t\tip: [],\r\n\t\t\taction: [],\r\n\t\t\tactionTaker: [],\r\n\t\t}, undefined, true);\r\n\t}\r\n\tsave() {\r\n\t\tFS('config/chat-plugins/permas.json').writeUpdate(() => JSON.stringify({noms: this.noms, icons: this.icons}));\r\n\t}\r\n\tnotifyStaff() {\r\n\t\tconst usRoom = Rooms.get('upperstaff');\r\n\t\tif (!usRoom) return;\r\n\t\tusRoom.send(`|uhtml|permanoms|${this.getDisplayButton()}`);\r\n\t\tChat.refreshPageFor('permalocks', usRoom);\r\n\t}\r\n\tasync add(target: string, connection: Connection) {\r\n\t\tconst user = connection.user;\r\n\t\tconst [primary, rawAlts, rawIps, type, details] = Utils.splitFirst(target, '|', 4).map(f => f.trim());\r\n\t\tconst primaryID = toID(primary);\r\n\t\tconst alts = rawAlts.split(',').map(toID).filter(Boolean);\r\n\t\tconst ips = rawIps.split(',').map(f => f.trim()).filter(Boolean);\r\n\t\tfor (const ip of ips) {\r\n\t\t\tif (!IPTools.ipRegex.test(ip)) this.error(`Invalid IP: ${ip}`, connection);\r\n\t\t}\r\n\t\tconst standings = this.getStandings();\r\n\t\tif (!standings[type]) {\r\n\t\t\tthis.error(`Invalid standing: ${type}.`, connection);\r\n\t\t}\r\n\t\tif (!details) {\r\n\t\t\tthis.error(\"Details must be provided. Explain why this user should be permalocked.\", connection);\r\n\t\t}\r\n\t\tif (!primaryID) {\r\n\t\t\tthis.error(\"A primary username must be provided. Use one of their alts if necessary.\", connection);\r\n\t\t}\r\n\t\tfor (const nom of this.noms) {\r\n\t\t\tif (nom.primaryID === primaryID) {\r\n\t\t\t\tthis.error(`'${primaryID}' was already nominated for permalock by ${nom.by}.`, connection);\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst ipTable = new Set<string>(ips);\r\n\t\tconst altTable = new Set<string>([...alts]);\r\n\t\tfor (const alt of [primaryID, ...alts]) {\r\n\t\t\tconst modlog = await this.fetchModlog(alt);\r\n\t\t\tif (!modlog || !modlog.results.length) continue;\r\n\t\t\tfor (const entry of modlog.results) {\r\n\t\t\t\tif (entry.ip) ipTable.add(entry.ip);\r\n\t\t\t\tif (entry.autoconfirmedID) altTable.add(entry.autoconfirmedID);\r\n\t\t\t\tif (entry.alts) {\r\n\t\t\t\t\tfor (const id of entry.alts) altTable.add(id);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\taltTable.delete(primaryID);\r\n\t\tthis.noms.push({\r\n\t\t\tby: user.id,\r\n\t\t\talts: [...altTable],\r\n\t\t\tips: Utils.sortBy([...ipTable], z => -(IPTools.ipToNumber(z) || Infinity)),\r\n\t\t\tinfo: details,\r\n\t\t\tprimaryID,\r\n\t\t\tstanding: type,\r\n\t\t\tdate: Date.now(),\r\n\t\t});\r\n\t\tUtils.sortBy(this.noms, nom => -nom.date);\r\n\t\tthis.save();\r\n\t\tthis.notifyStaff();\r\n\t\tRooms.get('staff')?.addByUser(user, `${user.name} submitted a perma nomination for ${primaryID}`);\r\n\t}\r\n\tfind(id: string) {\r\n\t\treturn this.noms.find(f => f.primaryID === id);\r\n\t}\r\n\terror(message: string, conn: Connection): never {\r\n\t\tconn.popup(message);\r\n\t\tthrow new Chat.Interruption();\r\n\t}\r\n\tclose(target: string, context: Chat.CommandContext) {\r\n\t\tconst entry = this.find(target);\r\n\t\tif (!entry) {\r\n\t\t\tthis.error(`There is no nomination pending for '${toID(target)}'.`, context.connection);\r\n\t\t}\r\n\t\tthis.noms.splice(this.noms.findIndex(f => f.primaryID === entry.primaryID), 1);\r\n\t\tthis.save();\r\n\t\tthis.notifyStaff();\r\n\t\t// todo fix when on good comp\r\n\t\treturn context.closePage(`permalocks-view-${entry.primaryID}`);\r\n\t}\r\n\tdisplay(nom: Nomination, canEdit?: boolean) {\r\n\t\tlet buf = `<div class=\"infobox\">`;\r\n\t\tlet title = nom.primaryID as string;\r\n\t\tif (canEdit) {\r\n\t\t\ttitle = `<a href=\"/view-permalocks-view-${nom.primaryID}\" target=\"_replace\">${nom.primaryID}</a>`;\r\n\t\t}\r\n\t\tbuf += `<strong>${title}</strong> (submitted by ${nom.by})<br />`;\r\n\t\tbuf += `Submitted ${Chat.toTimestamp(new Date(nom.date), {human: true})}<br />`;\r\n\t\tbuf += `${Chat.count(nom.alts, 'alts')}, ${Chat.count(nom.ips, 'IPs')}`;\r\n\t\tbuf += `</div>`;\r\n\t\treturn buf;\r\n\t}\r\n\tdisplayModlog(results: import('../modlog').ModlogEntry[] | null) {\r\n\t\tif (!results) return '';\r\n\t\tlet curDate = '';\r\n\t\treturn results.map(result => {\r\n\t\t\tconst date = new Date(result.time || Date.now());\r\n\t\t\tconst entryRoom = result.visualRoomID || result.roomID || 'global';\r\n\t\t\tlet [dateString, timestamp] = Chat.toTimestamp(date, {human: true}).split(' ');\r\n\t\t\tlet line = `<small>[${timestamp}] (${entryRoom})</small> ${result.action}`;\r\n\t\t\tif (result.userid) {\r\n\t\t\t\tline += `: [${result.userid}]`;\r\n\t\t\t\tif (result.autoconfirmedID) line += ` ac: [${result.autoconfirmedID}]`;\r\n\t\t\t\tif (result.alts.length) line += ` alts: [${result.alts.join('], [')}]`;\r\n\t\t\t\tif (result.ip) line += ` [<a href=\"https://whatismyipaddress.com/ip/${result.ip}\" target=\"_blank\">${result.ip}</a>]`;\r\n\t\t\t}\r\n\r\n\t\t\tif (result.loggedBy) line += `: by ${result.loggedBy}`;\r\n\t\t\tif (result.note) line += Utils.html`: ${result.note}`;\r\n\r\n\t\t\tif (dateString !== curDate) {\r\n\t\t\t\tcurDate = dateString;\r\n\t\t\t\tdateString = `</p><p>[${dateString}]<br />`;\r\n\t\t\t} else {\r\n\t\t\t\tdateString = ``;\r\n\t\t\t}\r\n\t\t\tconst thisRoomID = entryRoom?.split(' ')[0];\r\n\t\t\tif (thisRoomID.startsWith('battle-')) {\r\n\t\t\t\ttimestamp = `<a href=\"/${thisRoomID}\">${timestamp}</a>`;\r\n\t\t\t} else {\r\n\t\t\t\tconst [day, time] = Chat.toTimestamp(date).split(' ');\r\n\t\t\t\ttimestamp = `<a href=\"/view-chatlog-${thisRoomID}--${day}--time-${toID(time)}\">${timestamp}</a>`;\r\n\t\t\t}\r\n\t\t\treturn `${dateString}${line}`;\r\n\t\t}).join(`<br />`);\r\n\t}\r\n\tasync displayActionPage(nom: Nomination) {\r\n\t\tlet buf = `<div class=\"pad\">`;\r\n\t\tconst standings = this.getStandings();\r\n\t\tbuf += `<button class=\"button\" name=\"send\" value=\"/perma viewnom ${nom.primaryID}\" style=\"float:right\">`;\r\n\t\tbuf += `<i class=\"fa fa-refresh\"></i> Refresh</button>`;\r\n\t\tbuf += `<h3>Nomination: ${nom.primaryID}</h3><hr />`;\r\n\t\tbuf += `<strong>By:</strong> ${nom.by} (on ${Chat.toTimestamp(new Date(nom.date))})<br />`;\r\n\t\tbuf += `<strong>Recommended punishment:</strong> ${standings[nom.standing]}<br />`;\r\n\t\tbuf += `<details class=\"readmore\"><summary><strong>Modlog</strong></summary>`;\r\n\t\tbuf += `<div class=\"infobox limited\">`;\r\n\t\tconst modlog = await this.fetchModlog(nom.primaryID);\r\n\t\tif (!modlog) {\r\n\t\t\tbuf += `None found.`;\r\n\t\t} else {\r\n\t\t\tbuf += this.displayModlog(modlog.results);\r\n\t\t}\r\n\t\tbuf += `</div></details>`;\r\n\t\tif (nom.alts.length) {\r\n\t\t\tbuf += `<details class=\"readmore\"><summary><strong>Listed alts</strong></summary>`;\r\n\t\t\tfor (const [i, alt] of nom.alts.entries()) {\r\n\t\t\t\tbuf += `- ${alt}: `;\r\n\t\t\t\tbuf += `<form data-submitsend=\"/perma standing ${alt},{standing},{reason}\">`;\r\n\t\t\t\tbuf += this.standingDropdown(\"standing\");\r\n\t\t\t\tbuf += ` <button class=\"button notifying\" type=\"submit\">Change standing</button>`;\r\n\t\t\t\tbuf += ` <input name=\"reason\" placeholder=\"Reason\" />`;\r\n\t\t\t\tbuf += `</form>`;\r\n\t\t\t\tif (nom.alts[i + 1]) buf += `<br />`;\r\n\t\t\t}\r\n\t\t\tbuf += `</details>`;\r\n\t\t}\r\n\t\tif (nom.ips.length) {\r\n\t\t\tbuf += `<details class=\"readmore\"><summary><strong>Listed IPs</strong></summary>`;\r\n\t\t\tfor (const [i, ip] of nom.ips.entries()) {\r\n\t\t\t\tconst ipData = await getIPData(ip);\r\n\t\t\t\tbuf += `- <a href=\"https://whatismyipaddress.com/ip/${ip}\">${ip}</a>`;\r\n\t\t\t\tif (ipData) {\r\n\t\t\t\t\tbuf += `(ISP: ${ipData.isp}, loc: ${ipData.city}, ${ipData.regionName} in ${ipData.country})`;\r\n\t\t\t\t}\r\n\t\t\t\tbuf += `: `;\r\n\t\t\t\tbuf += `<form data-submitsend=\"/perma ipstanding ${ip},{standing},{reason}\">`;\r\n\t\t\t\tbuf += this.standingDropdown(\"standing\");\r\n\t\t\t\tbuf += ` <button class=\"button notifying\" type=\"submit\">Change standing for all users on IP</button>`;\r\n\t\t\t\tbuf += ` <input name=\"reason\" placeholder=\"Reason\" />`;\r\n\t\t\t\tbuf += `</form>`;\r\n\t\t\t\tif (nom.ips[i + 1]) buf += `<br />`;\r\n\t\t\t}\r\n\t\t\tbuf += `</details>`;\r\n\t\t}\r\n\t\tconst [matches] = await LoginServer.request('ipmatches', {\r\n\t\t\tid: nom.primaryID,\r\n\t\t});\r\n\t\tif (matches?.results?.length) {\r\n\t\t\tbuf += `<details class=\"readmore\"><summary><strong>Registration IP matches</strong></summary>`;\r\n\t\t\tfor (const [i, {userid, banstate}] of matches.results.entries()) {\r\n\t\t\t\tbuf += `- ${userid}: `;\r\n\t\t\t\tbuf += `<form data-submitsend=\"/perma standing ${userid},{standing}\">`;\r\n\t\t\t\tbuf += this.standingDropdown(\"standing\", banstate + \"\");\r\n\t\t\t\tbuf += ` <button class=\"button notifying\" type=\"submit\">Change standing</button></form>`;\r\n\t\t\t\tif (matches.results[i + 1]) buf += `<br />`;\r\n\t\t\t}\r\n\t\t\tbuf += `</details>`;\r\n\t\t}\r\n\t\tbuf += `<p><strong>Staff notes:</strong></p>`;\r\n\t\tbuf += `<p><div class=\"infobox\">${Chat.formatText(nom.info).replace(/\\n/ig, '<br />')}</div></p>`;\r\n\t\tbuf += `<details class=\"readmore\"><summary><strong>Act on primary:</strong></summary>`;\r\n\t\tbuf += `<form data-submitsend=\"/perma actmain ${nom.primaryID},{standing},{note}\">`;\r\n\t\tbuf += `Standing: ${this.standingDropdown('standing')}`;\r\n\t\tbuf += `<br />Notes:<br />`;\r\n\t\tbuf += `<textarea name=\"note\" style=\"width: 100%\" cols=\"50\" rows=\"10\"></textarea><br />`;\r\n\t\tbuf += `<button class=\"button notifying\" type=\"submit\">Change standing and make post</button>`;\r\n\t\tbuf += `</form></details><br />`;\r\n\t\tbuf += `<button class=\"button notifying\" name=\"send\" value=\"/perma resolve ${nom.primaryID}\">Mark resolved</button>`;\r\n\t\treturn buf;\r\n\t}\r\n\tstandingDropdown(elemName: string, curStanding: string | null = null) {\r\n\t\tlet buf = `<select name=\"${elemName}\">`;\r\n\t\tconst standings = this.getStandings();\r\n\t\tfor (const k in standings) {\r\n\t\t\tbuf += `<option ${curStanding === k ? \"disabled\" : \"\"} value=\"${k}\">${standings[k]}</option>`;\r\n\t\t}\r\n\t\tbuf += `</select>`;\r\n\t\treturn buf;\r\n\t}\r\n\tgetStandings() {\r\n\t\tif (Config.standings) return Config.standings;\r\n\t\tConfig.standings = {\r\n\t\t\t'-20': \"Confirmed\",\r\n\t\t\t'-10': \"Autoconfirmed\",\r\n\t\t\t'0': \"New\",\r\n\t\t\t\"20\": \"Permalock\",\r\n\t\t\t\"30\": \"Permaban\",\r\n\t\t\t\"100\": \"Disabled\",\r\n\t\t};\r\n\t\treturn Config.standings;\r\n\t}\r\n\tdisplayAll(canEdit: boolean) {\r\n\t\tlet buf = `<div class=\"pad\">`;\r\n\t\tbuf += `<button class=\"button\" name=\"send\" value=\"/perma noms\" style=\"float:right\"><i class=\"fa fa-refresh\"></i> Refresh</button>`;\r\n\t\tbuf += `<h3>Pending perma nominations</h3><hr />`;\r\n\t\tif (!this.noms.length) {\r\n\t\t\tbuf += `None found.`;\r\n\t\t\treturn buf;\r\n\t\t}\r\n\t\tfor (const nom of this.noms) {\r\n\t\t\tbuf += this.display(nom, canEdit);\r\n\t\t\tbuf += `<br />`;\r\n\t\t}\r\n\t\treturn buf;\r\n\t}\r\n\tdisplayNomPage() {\r\n\t\tlet buf = `<div class=\"pad\"><h3>Make a nomination for a permanent punishment.</h3><hr />`;\r\n\t\t// const [primary, rawAlts, rawIps, details] = Utils.splitFirst(target, '|', 3).map(f => f.trim());\r\n\t\tbuf += `<form data-submitsend=\"/perma submit {primary}|{alts}|{ips}|{type}|{details}\">`;\r\n\t\tbuf += `<div class=\"infobox\">`;\r\n\t\tbuf += `<strong>Primary userid:</strong> <input name=\"primary\" /><br />`;\r\n\t\tbuf += `<strong>Alts:</strong><br /><textarea name=\"alts\"></textarea><br /><small>(Separated by commas)</small><br />`;\r\n\t\tbuf += `<strong>Static IPs:</strong><br /><textarea name=\"ips\"></textarea><br /><small>(Separated by commas)</small></div><br />`;\r\n\t\tbuf += `<strong>Punishment:</strong> `;\r\n\t\tbuf += `<select name=\"type\"><option value=\"20\">Permalock</option><option value=\"30\">Permaban</option></select>`;\r\n\t\tbuf += `<div class=\"infobox\">`;\r\n\t\tbuf += `<strong>Please explain why this user deserves a permanent punishment</strong><br />`;\r\n\t\tbuf += `<small>Note: Modlogs are automatically included in review and do not need to be added here.</small><br />`;\r\n\t\tbuf += `<textarea style=\"width: 100%\" name=\"details\" cols=\"50\" rows=\"10\"></textarea></div>`;\r\n\t\tbuf += `<button class=\"button notifying\" type=\"submit\">Submit nomination</button>`;\r\n\t\treturn buf;\r\n\t}\r\n\tgetDisplayButton() {\r\n\t\tconst unclaimed = this.noms.filter(f => !f.claimed);\r\n\t\tlet buf = `<div class=\"infobox\">`;\r\n\t\tif (!this.noms.length) {\r\n\t\t\tbuf += `No permalock nominations active.`;\r\n\t\t} else {\r\n\t\t\tlet className = 'button';\r\n\t\t\tif (unclaimed.length) className += ' notifying';\r\n\t\t\tbuf += `<button class=\"${className}\" name=\"send\" value=\"/j view-permalocks-list\">`;\r\n\t\t\tbuf += `${Chat.count(this.noms.length, 'nominations')}`;\r\n\t\t\tif (unclaimed.length !== this.noms.length) {\r\n\t\t\t\tbuf += ` (${unclaimed.length} unclaimed)`;\r\n\t\t\t}\r\n\t\t\tbuf += `</button>`;\r\n\t\t}\r\n\t\tbuf += `</div>`;\r\n\t\treturn buf;\r\n\t}\r\n};\r\n\r\nexport const commands: Chat.ChatCommands = {\r\n\tperma: {\r\n\t\t''(target, room, user) {\r\n\t\t\tthis.checkCan('lock');\r\n\t\t\tif (!user.can('rangeban')) {\r\n\t\t\t\treturn this.parse(`/j view-permalocks-submit`);\r\n\t\t\t} else {\r\n\t\t\t\treturn this.parse(`/j view-permalocks-list`);\r\n\t\t\t}\r\n\t\t},\r\n\t\tviewnom(target) {\r\n\t\t\tthis.checkCan('rangeban');\r\n\t\t\treturn this.parse(`/j view-permalocks-view-${toID(target)}`);\r\n\t\t},\r\n\t\tsubmit(target, room, user) {\r\n\t\t\tthis.checkCan('lock');\r\n\t\t\treturn Nominations.add(target, this.connection);\r\n\t\t},\r\n\t\tlist() {\r\n\t\t\tthis.checkCan('lock');\r\n\t\t\treturn this.parse(`/j view-permalocks-list`);\r\n\t\t},\r\n\t\tnom() {\r\n\t\t\tthis.checkCan('lock');\r\n\t\t\treturn this.parse(`/j view-permalocks-submit`);\r\n\t\t},\r\n\t\tasync actmain(target, room, user) {\r\n\t\t\tthis.checkCan('rangeban');\r\n\t\t\tconst [primaryName, standingName, postReason] = Utils.splitFirst(target, ',', 2).map(f => f.trim());\r\n\t\t\tconst primary = toID(primaryName);\r\n\t\t\tif (!primary) return this.popupReply(`Invalid primary username.`);\r\n\t\t\tconst nom = Nominations.find(primary);\r\n\t\t\tif (!nom) return this.popupReply(`No permalock nomination found for ${primary}.`);\r\n\t\t\tconst standing = parseInt(standingName);\r\n\t\t\tconst standings = Nominations.getStandings();\r\n\t\t\tif (!standings[standing]) return this.popupReply(`Invalid standing.`);\r\n\t\t\tif (!toID(postReason)) return this.popupReply(`A reason must be given.`);\r\n\t\t\t// todo thread num\r\n\t\t\tconst threadNum = Config.permathread;\r\n\t\t\tif (!threadNum) {\r\n\t\t\t\tthrow new Chat.ErrorMessage(\"The link to the perma has not been set - the post could not be made.\");\r\n\t\t\t}\r\n\t\t\tlet postBuf = `[b][url=\"https://${Config.routes.root}/users/${primary}\"]${primary}[/url][/b]`;\r\n\t\t\tconst icon = Nominations.icons[user.id] ? `:${Nominations.icons[user.id]}: - ` : ``;\r\n\t\t\tpostBuf += ` was added to ${standings[standing]} by ${user.name} (${icon}${postReason}).\\n`;\r\n\t\t\tpostBuf += `Nominated by ${nom.by}.\\n[spoiler=Nomination notes]${nom.info}[/spoiler]\\n`;\r\n\t\t\tpostBuf += `${nom.alts.length ? `[spoiler=Alts]${nom.alts.join(', ')}[/spoiler]` : \"\"}\\n`;\r\n\t\t\tif (nom.ips.length) {\r\n\t\t\t\tpostBuf += `[spoiler=IPs]`;\r\n\t\t\t\tfor (const ip of nom.ips) {\r\n\t\t\t\t\tconst ipData = await getIPData(ip);\r\n\t\t\t\t\tpostBuf += `- [url=https://whatismyipaddress.com/ip/${ip}]${ip}[/url]`;\r\n\t\t\t\t\tif (ipData) {\r\n\t\t\t\t\t\tpostBuf += ` (ISP: ${ipData.isp}, loc: ${ipData.city}, ${ipData.regionName} in ${ipData.country})`;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tpostBuf += '\\n';\r\n\t\t\t\t}\r\n\t\t\t\tpostBuf += `[/spoiler]`;\r\n\t\t\t}\r\n\r\n\t\t\tconst modlog = await Nominations.fetchModlog(nom.primaryID);\r\n\t\t\tif (modlog?.results.length) {\r\n\t\t\t\tlet rawHTML = Nominations.displayModlog(modlog.results);\r\n\t\t\t\trawHTML = rawHTML.replace(/<br \\/>/g, '\\n');\r\n\t\t\t\trawHTML = Utils.stripHTML(rawHTML);\r\n\t\t\t\trawHTML = rawHTML.replace(/&#x2f;/g, '/');\r\n\t\t\t\tpostBuf += `\\n[spoiler=Modlog]${rawHTML}[/spoiler]`;\r\n\t\t\t}\r\n\r\n\t\t\tconst res = await Smogon.post(\r\n\t\t\t\tthreadNum,\r\n\t\t\t\tpostBuf,\r\n\t\t\t);\r\n\t\t\tif (!res || res.error) {\r\n\t\t\t\treturn this.popupReply(`Error making post: ${res?.error}`);\r\n\t\t\t}\r\n\t\t\tconst url = `https://smogon.com/forums/threads/${threadNum}/post-${res.post.post_id}`;\r\n\t\t\tconst result = await LoginServer.request('setstanding', {\r\n\t\t\t\tuser: primary,\r\n\t\t\t\tstanding,\r\n\t\t\t\treason: url,\r\n\t\t\t\tactor: user.id,\r\n\t\t\t});\r\n\t\t\tif (result[1]) {\r\n\t\t\t\treturn this.popupReply(`Error changing standing: ${result[1].message}`);\r\n\t\t\t}\r\n\t\t\tnom.post = url;\r\n\t\t\tthis.popupReply(`|html|Standing successfully changed. Smogon post can be found <a href=\"${url}\">at this link</a>.`);\r\n\t\t},\r\n\t\tasync standing(target) {\r\n\t\t\tthis.checkCan('rangeban');\r\n\t\t\tconst [name, rawStanding, reason] = Utils.splitFirst(target, ',', 2).map(f => f.trim());\r\n\t\t\tconst id = toID(name);\r\n\t\t\tif (!id || id.length > 18) {\r\n\t\t\t\treturn this.popupReply('Invalid username: ' + name);\r\n\t\t\t}\r\n\t\t\tconst standingNum = parseInt(rawStanding);\r\n\t\t\tif (!standingNum) {\r\n\t\t\t\treturn this.popupReply(`Invalid standing: ` + rawStanding);\r\n\t\t\t}\r\n\t\t\tif (!reason.length) {\r\n\t\t\t\treturn this.popupReply(`A reason must be given.`);\r\n\t\t\t}\r\n\t\t\tconst res = await LoginServer.request('setstanding', {\r\n\t\t\t\tuser: id,\r\n\t\t\t\tstanding: standingNum,\r\n\t\t\t\treason,\r\n\t\t\t\tactor: this.user.id,\r\n\t\t\t});\r\n\t\t\tif (res[1]) {\r\n\t\t\t\treturn this.popupReply(`Error in standing change: ` + res[1].message);\r\n\t\t\t}\r\n\t\t\tthis.popupReply(`Standing successfully changed to ${standingNum} for ${id}.`);\r\n\t\t\t// no need to modlog, is in usermodlog already\r\n\t\t},\r\n\t\tasync ipstanding(target) {\r\n\t\t\tthis.checkCan('rangeban');\r\n\t\t\tconst [ip, standingName, reason] = Utils.splitFirst(target, ',', 2).map(f => f.trim());\r\n\t\t\tif (!IPTools.ipToNumber(ip)) {\r\n\t\t\t\treturn this.popupReply(`Invalid IP: ${ip}`);\r\n\t\t\t}\r\n\t\t\tconst standingNum = parseInt(standingName);\r\n\t\t\tif (!Config.standings[`${standingNum}`]) {\r\n\t\t\t\treturn this.popupReply(`Invalid standing: ${standingName}.`);\r\n\t\t\t}\r\n\t\t\tif (!reason.length) {\r\n\t\t\t\treturn this.popupReply('Specify a reason.');\r\n\t\t\t}\r\n\t\t\tconst res = await LoginServer.request('ipstanding', {\r\n\t\t\t\treason,\r\n\t\t\t\tstanding: standingNum,\r\n\t\t\t\tip,\r\n\t\t\t\tactor: this.user.id,\r\n\t\t\t});\r\n\t\t\tif (res[1]) {\r\n\t\t\t\treturn this.popupReply(`Error changing standing: ${res[1].message}`);\r\n\t\t\t}\r\n\t\t\tthis.popupReply(`All standings on the IP ${ip} changed successfully to ${standingNum}.`);\r\n\t\t\tthis.globalModlog(`IPSTANDING`, null, `${standingNum}${reason ? ` (${reason})` : \"\"}`, ip);\r\n\t\t},\r\n\t\tresolve(target) {\r\n\t\t\tthis.checkCan('rangeban');\r\n\t\t\tNominations.close(target, this);\r\n\t\t},\r\n\t\tseticon(target, room, user) {\r\n\t\t\tthis.checkCan('rangeban');\r\n\t\t\tlet [monName, targetId] = target.split(',');\r\n\t\t\tif (!targetId) targetId = user.id;\r\n\t\t\tconst mon = Dex.species.get(monName);\r\n\t\t\tif (!mon.exists) {\r\n\t\t\t\treturn this.errorReply(`Species ${monName} does not exist.`);\r\n\t\t\t}\r\n\t\t\tNominations.icons[targetId] = mon.name.toLowerCase();\r\n\t\t\tNominations.save();\r\n\t\t\tthis.sendReply(\r\n\t\t\t\t`|html|Updated ${targetId === user.id ? 'your' : `${targetId}'s`} permalock post icon to ` +\r\n\t\t\t\t`<psicon pokemon='${mon.name.toLowerCase()}' />`\r\n\t\t\t);\r\n\t\t},\r\n\t\tdeleteicon(target, room, user) {\r\n\t\t\tthis.checkCan('rangeban');\r\n\t\t\tconst targetID = toID(target);\r\n\t\t\tif (!Nominations.icons[targetID]) {\r\n\t\t\t\treturn this.errorReply(`${targetID} does not have an icon set.`);\r\n\t\t\t}\r\n\t\t\tdelete Nominations.icons[targetID];\r\n\t\t\tNominations.save();\r\n\t\t\tthis.sendReply(`Removed ${targetID}'s permalock post icon.`);\r\n\t\t},\r\n\t\thelp: [\r\n\t\t\t'/perma nom OR /perma - Open the page to make a nomination for a permanent punishment. Requires: % @ &',\r\n\t\t\t'/perma list - View open nominations. Requires: &',\r\n\t\t\t'/perma viewnom [userid] - View a nomination for the given [userid]. Requires: &',\r\n\t\t],\r\n\t},\r\n};\r\n\r\nexport const pages: Chat.PageTable = {\r\n\tpermalocks: {\r\n\t\tlist(query, user, conn) {\r\n\t\t\tthis.checkCan('lock');\r\n\t\t\tthis.title = '[Permalock Nominations]';\r\n\t\t\treturn Nominations.displayAll(user.can('rangeban'));\r\n\t\t},\r\n\t\tview(query, user) {\r\n\t\t\tthis.checkCan('rangeban');\r\n\t\t\tconst id = toID(query.shift());\r\n\t\t\tif (!id) return this.errorReply(`Invalid userid.`);\r\n\t\t\tconst nom = Nominations.find(id);\r\n\t\t\tif (!nom) return this.errorReply(`No nomination found for '${id}'.`);\r\n\t\t\tthis.title = `[Perma Nom] ${nom.primaryID}`;\r\n\t\t\treturn Nominations.displayActionPage(nom);\r\n\t\t},\r\n\t\tsubmit() {\r\n\t\t\tthis.checkCan('lock');\r\n\t\t\tthis.title = '[Perma Nom] Create';\r\n\t\t\treturn Nominations.displayNomPage();\r\n\t\t},\r\n\t},\r\n};\r\n\r\nprocess.nextTick(() => {\r\n\tChat.multiLinePattern.register('/perma(noms?)? ');\r\n});\r\n"],
  "mappings": "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",
  "names": []
}
