{
  "version": 3,
  "sources": ["../../../../server/chat-plugins/repeats.ts"],
  "sourcesContent": ["/**\r\n * Chat plugin for repeating messages in chat\r\n * Based on bot functionality from Kid A and Expecto Botronum\r\n * @author Annika, Zarel\r\n */\r\n\r\nimport {roomFaqs, getAlias, visualizeFaq} from './room-faqs';\r\nimport type {MessageHandler} from '../rooms';\r\n\r\nexport interface RepeatedPhrase {\r\n\t/** Identifier for deleting */\r\n\tid: ID;\r\n\tphrase: string;\r\n\t/** interval in milliseconds */\r\n\tinterval: number;\r\n\tfaq?: boolean;\r\n\tisByMessages?: boolean;\r\n\tisHTML?: boolean;\r\n}\r\n\r\nexport const Repeats = new class {\r\n\t// keying to Room rather than RoomID will help us correctly handle room renames\r\n\t/** room:identifier:phrase:timeout map */\r\n\trepeats = new Map<BasicRoom, Map<ID, Map<string, NodeJS.Timeout | MessageHandler>>>();\r\n\r\n\tconstructor() {\r\n\t\tfor (const room of Rooms.rooms.values()) {\r\n\t\t\tif (!room.settings?.repeats?.length) continue;\r\n\t\t\tfor (const repeat of room.settings.repeats) {\r\n\t\t\t\tthis.runRepeat(room, repeat);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tremoveRepeatHandler(room: BasicRoom, handler?: NodeJS.Timeout | MessageHandler) {\r\n\t\tif (typeof handler === 'function') {\r\n\t\t\troom.nthMessageHandlers.delete(handler);\r\n\t\t} else if (typeof handler === 'object') {\r\n\t\t\tclearInterval(handler);\r\n\t\t}\r\n\t}\r\n\r\n\thasRepeat(room: BasicRoom, id: ID) {\r\n\t\treturn !!this.repeats.get(room)?.get(id);\r\n\t}\r\n\r\n\taddRepeat(room: BasicRoom, repeat: RepeatedPhrase) {\r\n\t\tthis.runRepeat(room, repeat);\r\n\t\tif (!room.settings.repeats) room.settings.repeats = [];\r\n\t\troom.settings.repeats.push(repeat);\r\n\t\troom.saveSettings();\r\n\t}\r\n\r\n\tremoveRepeat(room: BasicRoom, id: ID) {\r\n\t\tif (!room.settings.repeats) return;\r\n\t\tconst phrase = room.settings.repeats.find(x => x.id === id)?.phrase;\r\n\t\troom.settings.repeats = room.settings.repeats.filter(repeat => repeat.id !== id);\r\n\t\tif (!room.settings.repeats.length) delete room.settings.repeats;\r\n\t\troom.saveSettings();\r\n\r\n\t\tconst roomRepeats = this.repeats.get(room);\r\n\t\tif (!roomRepeats) return;\r\n\t\tconst oldInterval = roomRepeats.get(id)?.get(phrase!);\r\n\t\tthis.removeRepeatHandler(room, oldInterval);\r\n\t\troomRepeats.delete(id);\r\n\t}\r\n\r\n\tclearRepeats(room: BasicRoom) {\r\n\t\tconst roomRepeats = this.repeats.get(room);\r\n\t\tif (!roomRepeats) return;\r\n\t\tfor (const ids of roomRepeats.values()) {\r\n\t\t\tfor (const interval of ids.values()) {\r\n\t\t\t\tthis.removeRepeatHandler(room, interval);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.repeats.delete(room);\r\n\t}\r\n\r\n\trunRepeat(room: BasicRoom, repeat: RepeatedPhrase) {\r\n\t\tlet roomRepeats = this.repeats.get(room);\r\n\t\tif (!roomRepeats) {\r\n\t\t\troomRepeats = new Map();\r\n\t\t\tthis.repeats.set(room, roomRepeats);\r\n\t\t}\r\n\t\tconst {id, phrase, interval} = repeat;\r\n\r\n\t\tif (roomRepeats.has(id)) {\r\n\t\t\tthrow new Error(`Repeat already exists`);\r\n\t\t}\r\n\t\tconst repeater = (targetRoom: BasicRoom) => {\r\n\t\t\tif (targetRoom !== Rooms.get(targetRoom.roomid)) {\r\n\t\t\t\t// room was deleted\r\n\t\t\t\tthis.clearRepeats(targetRoom);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tconst repeatedPhrase = repeat.faq ?\r\n\t\t\t\tvisualizeFaq(roomFaqs[targetRoom.roomid][repeat.id]) : Chat.formatText(phrase, true);\r\n\t\t\tconst formattedText = repeat.isHTML ? phrase : repeatedPhrase;\r\n\t\t\ttargetRoom.add(`|uhtml|repeat-${repeat.id}|<div class=\"infobox\">${formattedText}</div>`);\r\n\t\t\ttargetRoom.update();\r\n\t\t};\r\n\r\n\t\tif (repeat.isByMessages) {\r\n\t\t\troom.nthMessageHandlers.set(repeater, interval);\r\n\t\t\troomRepeats.set(id, new Map().set(phrase, repeater));\r\n\t\t} else {\r\n\t\t\troomRepeats.set(id, new Map().set(phrase, setInterval(repeater, interval, room)));\r\n\t\t}\r\n\t}\r\n\r\n\tdestroy() {\r\n\t\tfor (const [room, roomRepeats] of this.repeats) {\r\n\t\t\tfor (const ids of roomRepeats.values()) {\r\n\t\t\t\tfor (const interval of ids.values()) {\r\n\t\t\t\t\tthis.removeRepeatHandler(room, interval);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n\r\nexport function destroy() {\r\n\tRepeats.destroy();\r\n}\r\n\r\nexport const pages: Chat.PageTable = {\r\n\trepeats(args, user) {\r\n\t\tconst room = this.requireRoom();\r\n\t\tthis.title = `[Repeats]`;\r\n\t\tthis.checkCan(\"mute\", null, room);\r\n\t\tlet html = `<div class=\"ladder pad\">`;\r\n\t\thtml += `<button class=\"button\" name=\"send\" value=\"/join view-repeats-${room.roomid}\" style=\"float: right\"><i class=\"fa fa-refresh\"></i> ${this.tr`Refresh`}</button>`;\r\n\t\tif (!room.settings.repeats?.length) {\r\n\t\t\treturn `${html}<h1>${this.tr`There are no repeated phrases in ${room.title}.`}</h1></div>`;\r\n\t\t}\r\n\t\thtml += `<h2>${this.tr`Repeated phrases in ${room.title}`}</h2>`;\r\n\t\thtml += `<table><tr><th>${this.tr`Identifier`}</th><th>${this.tr`Phrase`}</th><th>${this.tr`Raw text`}</th><th>${this.tr`Interval`}</th><th>${this.tr`Action`}</th>`;\r\n\t\tfor (const repeat of room.settings.repeats) {\r\n\t\t\tconst minutes = repeat.interval / (repeat.isByMessages ? 1 : 60 * 1000);\r\n\t\t\tconst repeatText = repeat.faq ? roomFaqs[room.roomid][repeat.id].source : repeat.phrase;\r\n\t\t\tconst phrase = repeat.faq ? visualizeFaq(roomFaqs[room.roomid][repeat.id]) :\r\n\t\t\t\trepeat.isHTML ? repeat.phrase : Chat.formatText(repeatText, true);\r\n\t\t\thtml += `<tr><td>${repeat.id}</td><td>${phrase}</td><td>${Chat.getReadmoreCodeBlock(repeatText)}</td><td>${repeat.isByMessages ? this.tr`every ${minutes} chat message(s)` : this.tr`every ${minutes} minute(s)`}</td>`;\r\n\t\t\thtml += `<td><button class=\"button\" name=\"send\" value=\"/msgroom ${room.roomid},/removerepeat ${repeat.id}\">${this.tr`Remove`}</button></td>`;\r\n\t\t}\r\n\t\thtml += `</table>`;\r\n\t\tif (user.can(\"editroom\", null, room)) {\r\n\t\t\thtml += `<br /><button class=\"button\" name=\"send\" value=\"/msgroom ${room.roomid},/removeallrepeats\">${this.tr`Remove all repeats`}</button>`;\r\n\t\t}\r\n\t\thtml += `</div>`;\r\n\t\treturn html;\r\n\t},\r\n};\r\n\r\nexport const commands: Chat.ChatCommands = {\r\n\trepeatbymessages: 'repeat',\r\n\trepeathtmlbymessages: 'repeat',\r\n\trepeathtml: 'repeat',\r\n\trepeat(target, room, user, connection, cmd) {\r\n\t\tconst isHTML = cmd.includes('html');\r\n\t\tconst isByMessages = cmd.includes('bymessages');\r\n\t\troom = this.requireRoom();\r\n\t\tthis.checkCan(isHTML ? 'addhtml' : 'mute', null, room);\r\n\t\tconst [intervalString, name, ...messageArray] = target.split(',');\r\n\t\tconst id = toID(name);\r\n\t\tif (!id) throw new Chat.ErrorMessage(this.tr`Repeat names must include at least one alphanumeric character.`);\r\n\r\n\t\tconst phrase = messageArray.join(',').trim();\r\n\t\tconst interval = parseInt(intervalString);\r\n\t\tif (isNaN(interval) || !/[0-9]{1,}/.test(intervalString) || interval < 1 || interval > 24 * 60) {\r\n\t\t\tthrow new Chat.ErrorMessage(this.tr`You must specify an interval as a number of minutes or chat messages between 1 and 1440.`);\r\n\t\t}\r\n\r\n\t\tif (Repeats.hasRepeat(room, id)) {\r\n\t\t\tthrow new Chat.ErrorMessage(this.tr`The phrase labeled with \"${id}\" is already being repeated in this room.`);\r\n\t\t}\r\n\r\n\t\tif (isHTML) this.checkHTML(phrase);\r\n\r\n\t\tRepeats.addRepeat(room, {\r\n\t\t\tid,\r\n\t\t\tphrase,\r\n\t\t\t// convert to milliseconds for time-based repeats\r\n\t\t\tinterval: interval * (isByMessages ? 1 : 60 * 1000),\r\n\t\t\tisHTML,\r\n\t\t\tisByMessages,\r\n\t\t});\r\n\r\n\t\tthis.modlog('REPEATPHRASE', null, `every ${interval} ${isByMessages ? `chat messages` : `minute`}${Chat.plural(interval)}: \"${phrase.replace(/\\n/g, ' ')}\"`);\r\n\t\tthis.privateModAction(\r\n\t\t\tisByMessages ?\r\n\t\t\t\troom.tr`${user.name} set the phrase labeled with \"${id}\" to be repeated every ${interval} chat message(s).` :\r\n\t\t\t\troom.tr`${user.name} set the phrase labeled with \"${id}\" to be repeated every ${interval} minute(s).`\r\n\t\t);\r\n\t},\r\n\trepeathelp() {\r\n\t\tthis.runBroadcast();\r\n\t\tthis.sendReplyBox(\r\n\t\t\t`<code>/repeat [minutes], [id], [phrase]</code>: repeats a given phrase every [minutes] minutes. Requires: % @ # &<br />` +\r\n\t\t\t`<code>/repeathtml [minutes], [id], [phrase]</code>: repeats a given phrase containing HTML every [minutes] minutes. Requires: # &<br />` +\r\n\t\t\t`<code>/repeatfaq [minutes], [FAQ name/alias]</code>: repeats a given Room FAQ every [minutes] minutes. Requires: % @ # &<br />` +\r\n\t\t\t`<code>/removerepeat [id]</code>: removes a repeated phrase. Requires: % @ # &<br />` +\r\n\t\t\t`<code>/viewrepeats [optional room]</code>: Displays all repeated phrases in a room. Requires: % @ # &<br />` +\r\n\t\t\t`You can append <code>bymessages</code> to a <code>/repeat</code> command to repeat a phrase based on how many messages have been sent in chat. For example, <code>/repeatfaqbymessages ...</code><br />` +\r\n\t\t\t`Phrases for <code>/repeat</code> can include normal chat formatting, but not commands.`\r\n\t\t);\r\n\t},\r\n\r\n\trepeatfaqbymessages: 'repeatfaq',\r\n\trepeatfaq(target, room, user, connection, cmd) {\r\n\t\troom = this.requireRoom();\r\n\t\tthis.checkCan('mute', null, room);\r\n\t\tconst isByMessages = cmd.includes('bymessages');\r\n\r\n\t\tlet [intervalString, topic] = target.split(',');\r\n\t\tconst interval = parseInt(intervalString);\r\n\t\tif (isNaN(interval) || !/[0-9]{1,}/.test(intervalString) || interval < 1 || interval > 24 * 60) {\r\n\t\t\tthrow new Chat.ErrorMessage(this.tr`You must specify an interval as a number of minutes or chat messages between 1 and 1440.`);\r\n\t\t}\r\n\t\tif (!roomFaqs[room.roomid]) {\r\n\t\t\tthrow new Chat.ErrorMessage(`This room has no FAQs.`);\r\n\t\t}\r\n\t\ttopic = toID(getAlias(room.roomid, topic) || topic);\r\n\t\tconst faq = roomFaqs[room.roomid][topic];\r\n\t\tif (!faq) {\r\n\t\t\tthrow new Chat.ErrorMessage(`Invalid topic.`);\r\n\t\t}\r\n\r\n\t\tif (Repeats.hasRepeat(room, topic as ID)) {\r\n\t\t\tthrow new Chat.ErrorMessage(this.tr`The text for the Room FAQ \"${topic}\" is already being repeated.`);\r\n\t\t}\r\n\r\n\t\tRepeats.addRepeat(room, {\r\n\t\t\tid: topic as ID,\r\n\t\t\tphrase: faq.source,\r\n\t\t\tinterval: interval * (isByMessages ? 1 : 60 * 1000),\r\n\t\t\tfaq: true,\r\n\t\t\tisByMessages,\r\n\t\t});\r\n\r\n\t\tthis.modlog('REPEATPHRASE', null, `every ${interval} ${isByMessages ? 'chat message' : 'minute'}${Chat.plural(interval)}: the Room FAQ for \"${topic}\"`);\r\n\t\tthis.privateModAction(\r\n\t\t\tisByMessages ?\r\n\t\t\t\troom.tr`${user.name} set the Room FAQ \"${topic}\" to be repeated every ${interval} chat message(s).` :\r\n\t\t\t\troom.tr`${user.name} set the Room FAQ \"${topic}\" to be repeated every ${interval} minute(s).`\r\n\t\t);\r\n\t},\r\n\r\n\tdeleterepeat: 'removerepeat',\r\n\tremoverepeat(target, room, user) {\r\n\t\troom = this.requireRoom();\r\n\t\tconst id = toID(target);\r\n\t\tif (!id) {\r\n\t\t\treturn this.parse(`/help repeat`);\r\n\t\t}\r\n\t\tthis.checkCan('mute', null, room);\r\n\t\tif (!room.settings.repeats?.length) {\r\n\t\t\treturn this.errorReply(this.tr`There are no repeated phrases in this room.`);\r\n\t\t}\r\n\r\n\t\tif (!Repeats.hasRepeat(room, id)) {\r\n\t\t\treturn this.errorReply(this.tr`The phrase labeled with \"${id}\" is not being repeated in this room.`);\r\n\t\t}\r\n\r\n\t\tRepeats.removeRepeat(room, id);\r\n\r\n\t\tthis.modlog('REMOVE REPEATPHRASE', null, `\"${id}\"`);\r\n\t\tthis.privateModAction(room.tr`${user.name} removed the repeated phrase labeled with \"${id}\".`);\r\n\t\tthis.refreshPage(`repeats-${room.roomid}`);\r\n\t},\r\n\r\n\tremoveallrepeats(target, room, user) {\r\n\t\troom = this.requireRoom();\r\n\t\tthis.checkCan('declare', null, room);\r\n\t\tif (!room.settings.repeats?.length) {\r\n\t\t\treturn this.errorReply(this.tr`There are no repeated phrases in this room.`);\r\n\t\t}\r\n\r\n\t\tfor (const {id} of room.settings.repeats) {\r\n\t\t\tRepeats.removeRepeat(room, id);\r\n\t\t}\r\n\r\n\t\tthis.modlog('REMOVE REPEATPHRASE', null, 'all repeated phrases');\r\n\t\tthis.privateModAction(room.tr`${user.name} removed all repeated phrases.`);\r\n\t},\r\n\r\n\trepeats: 'viewrepeats',\r\n\tviewrepeats(target, room, user) {\r\n\t\tconst roomid = toID(target) || room?.roomid;\r\n\t\tif (!roomid) return this.errorReply(this.tr`You must specify a room when using this command in PMs.`);\r\n\t\tthis.parse(`/j view-repeats-${roomid}`);\r\n\t},\r\n};\r\n\r\nprocess.nextTick(() => {\r\n\tChat.multiLinePattern.register('/repeat(html|faq)?(bymessages)? ');\r\n});\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,uBAA+C;AAcxC,MAAM,UAAU,IAAI,MAAM;AAAA,EAKhC,cAAc;AAFd;AAAA;AAAA,mBAAU,oBAAI,IAAsE;AAGnF,eAAW,QAAQ,MAAM,MAAM,OAAO,GAAG;AACxC,UAAI,CAAC,KAAK,UAAU,SAAS;AAAQ;AACrC,iBAAW,UAAU,KAAK,SAAS,SAAS;AAC3C,aAAK,UAAU,MAAM,MAAM;AAAA,MAC5B;AAAA,IACD;AAAA,EACD;AAAA,EAEA,oBAAoB,MAAiB,SAA2C;AAC/E,QAAI,OAAO,YAAY,YAAY;AAClC,WAAK,mBAAmB,OAAO,OAAO;AAAA,IACvC,WAAW,OAAO,YAAY,UAAU;AACvC,oBAAc,OAAO;AAAA,IACtB;AAAA,EACD;AAAA,EAEA,UAAU,MAAiB,IAAQ;AAClC,WAAO,CAAC,CAAC,KAAK,QAAQ,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA,EACxC;AAAA,EAEA,UAAU,MAAiB,QAAwB;AAClD,SAAK,UAAU,MAAM,MAAM;AAC3B,QAAI,CAAC,KAAK,SAAS;AAAS,WAAK,SAAS,UAAU,CAAC;AACrD,SAAK,SAAS,QAAQ,KAAK,MAAM;AACjC,SAAK,aAAa;AAAA,EACnB;AAAA,EAEA,aAAa,MAAiB,IAAQ;AACrC,QAAI,CAAC,KAAK,SAAS;AAAS;AAC5B,UAAM,SAAS,KAAK,SAAS,QAAQ,KAAK,OAAK,EAAE,OAAO,EAAE,GAAG;AAC7D,SAAK,SAAS,UAAU,KAAK,SAAS,QAAQ,OAAO,YAAU,OAAO,OAAO,EAAE;AAC/E,QAAI,CAAC,KAAK,SAAS,QAAQ;AAAQ,aAAO,KAAK,SAAS;AACxD,SAAK,aAAa;AAElB,UAAM,cAAc,KAAK,QAAQ,IAAI,IAAI;AACzC,QAAI,CAAC;AAAa;AAClB,UAAM,cAAc,YAAY,IAAI,EAAE,GAAG,IAAI,MAAO;AACpD,SAAK,oBAAoB,MAAM,WAAW;AAC1C,gBAAY,OAAO,EAAE;AAAA,EACtB;AAAA,EAEA,aAAa,MAAiB;AAC7B,UAAM,cAAc,KAAK,QAAQ,IAAI,IAAI;AACzC,QAAI,CAAC;AAAa;AAClB,eAAW,OAAO,YAAY,OAAO,GAAG;AACvC,iBAAW,YAAY,IAAI,OAAO,GAAG;AACpC,aAAK,oBAAoB,MAAM,QAAQ;AAAA,MACxC;AAAA,IACD;AACA,SAAK,QAAQ,OAAO,IAAI;AAAA,EACzB;AAAA,EAEA,UAAU,MAAiB,QAAwB;AAClD,QAAI,cAAc,KAAK,QAAQ,IAAI,IAAI;AACvC,QAAI,CAAC,aAAa;AACjB,oBAAc,oBAAI,IAAI;AACtB,WAAK,QAAQ,IAAI,MAAM,WAAW;AAAA,IACnC;AACA,UAAM,EAAC,IAAI,QAAQ,SAAQ,IAAI;AAE/B,QAAI,YAAY,IAAI,EAAE,GAAG;AACxB,YAAM,IAAI,MAAM,uBAAuB;AAAA,IACxC;AACA,UAAM,WAAW,CAAC,eAA0B;AAC3C,UAAI,eAAe,MAAM,IAAI,WAAW,MAAM,GAAG;AAEhD,aAAK,aAAa,UAAU;AAC5B;AAAA,MACD;AACA,YAAM,iBAAiB,OAAO,UAC7B,+BAAa,0BAAS,WAAW,MAAM,EAAE,OAAO,EAAE,CAAC,IAAI,KAAK,WAAW,QAAQ,IAAI;AACpF,YAAM,gBAAgB,OAAO,SAAS,SAAS;AAC/C,iBAAW,IAAI,iBAAiB,OAAO,2BAA2B,qBAAqB;AACvF,iBAAW,OAAO;AAAA,IACnB;AAEA,QAAI,OAAO,cAAc;AACxB,WAAK,mBAAmB,IAAI,UAAU,QAAQ;AAC9C,kBAAY,IAAI,KAAI,oBAAI,IAAI,GAAE,IAAI,QAAQ,QAAQ,CAAC;AAAA,IACpD,OAAO;AACN,kBAAY,IAAI,KAAI,oBAAI,IAAI,GAAE,IAAI,QAAQ,YAAY,UAAU,UAAU,IAAI,CAAC,CAAC;AAAA,IACjF;AAAA,EACD;AAAA,EAEA,UAAU;AACT,eAAW,CAAC,MAAM,WAAW,KAAK,KAAK,SAAS;AAC/C,iBAAW,OAAO,YAAY,OAAO,GAAG;AACvC,mBAAW,YAAY,IAAI,OAAO,GAAG;AACpC,eAAK,oBAAoB,MAAM,QAAQ;AAAA,QACxC;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;AAEO,SAAS,UAAU;AACzB,UAAQ,QAAQ;AACjB;AAEO,MAAM,QAAwB;AAAA,EACpC,QAAQ,MAAM,MAAM;AACnB,UAAM,OAAO,KAAK,YAAY;AAC9B,SAAK,QAAQ;AACb,SAAK,SAAS,QAAQ,MAAM,IAAI;AAChC,QAAI,OAAO;AACX,YAAQ,gEAAgE,KAAK,8DAA8D,KAAK;AAChJ,QAAI,CAAC,KAAK,SAAS,SAAS,QAAQ;AACnC,aAAO,GAAG,WAAW,KAAK,sCAAsC,KAAK;AAAA,IACtE;AACA,YAAQ,OAAO,KAAK,yBAAyB,KAAK;AAClD,YAAQ,kBAAkB,KAAK,0BAA0B,KAAK,sBAAsB,KAAK,wBAAwB,KAAK,wBAAwB,KAAK;AACnJ,eAAW,UAAU,KAAK,SAAS,SAAS;AAC3C,YAAM,UAAU,OAAO,YAAY,OAAO,eAAe,IAAI,KAAK;AAClE,YAAM,aAAa,OAAO,MAAM,0BAAS,KAAK,MAAM,EAAE,OAAO,EAAE,EAAE,SAAS,OAAO;AACjF,YAAM,SAAS,OAAO,UAAM,+BAAa,0BAAS,KAAK,MAAM,EAAE,OAAO,EAAE,CAAC,IACxE,OAAO,SAAS,OAAO,SAAS,KAAK,WAAW,YAAY,IAAI;AACjE,cAAQ,WAAW,OAAO,cAAc,kBAAkB,KAAK,qBAAqB,UAAU,aAAa,OAAO,eAAe,KAAK,WAAW,4BAA4B,KAAK,WAAW;AAC7L,cAAQ,0DAA0D,KAAK,wBAAwB,OAAO,OAAO,KAAK;AAAA,IACnH;AACA,YAAQ;AACR,QAAI,KAAK,IAAI,YAAY,MAAM,IAAI,GAAG;AACrC,cAAQ,4DAA4D,KAAK,6BAA6B,KAAK;AAAA,IAC5G;AACA,YAAQ;AACR,WAAO;AAAA,EACR;AACD;AAEO,MAAM,WAA8B;AAAA,EAC1C,kBAAkB;AAAA,EAClB,sBAAsB;AAAA,EACtB,YAAY;AAAA,EACZ,OAAO,QAAQ,MAAM,MAAM,YAAY,KAAK;AAC3C,UAAM,SAAS,IAAI,SAAS,MAAM;AAClC,UAAM,eAAe,IAAI,SAAS,YAAY;AAC9C,WAAO,KAAK,YAAY;AACxB,SAAK,SAAS,SAAS,YAAY,QAAQ,MAAM,IAAI;AACrD,UAAM,CAAC,gBAAgB,MAAM,GAAG,YAAY,IAAI,OAAO,MAAM,GAAG;AAChE,UAAM,KAAK,KAAK,IAAI;AACpB,QAAI,CAAC;AAAI,YAAM,IAAI,KAAK,aAAa,KAAK,kEAAkE;AAE5G,UAAM,SAAS,aAAa,KAAK,GAAG,EAAE,KAAK;AAC3C,UAAM,WAAW,SAAS,cAAc;AACxC,QAAI,MAAM,QAAQ,KAAK,CAAC,YAAY,KAAK,cAAc,KAAK,WAAW,KAAK,WAAW,KAAK,IAAI;AAC/F,YAAM,IAAI,KAAK,aAAa,KAAK,4FAA4F;AAAA,IAC9H;AAEA,QAAI,QAAQ,UAAU,MAAM,EAAE,GAAG;AAChC,YAAM,IAAI,KAAK,aAAa,KAAK,8BAA8B,6CAA6C;AAAA,IAC7G;AAEA,QAAI;AAAQ,WAAK,UAAU,MAAM;AAEjC,YAAQ,UAAU,MAAM;AAAA,MACvB;AAAA,MACA;AAAA;AAAA,MAEA,UAAU,YAAY,eAAe,IAAI,KAAK;AAAA,MAC9C;AAAA,MACA;AAAA,IACD,CAAC;AAED,SAAK,OAAO,gBAAgB,MAAM,SAAS,YAAY,eAAe,kBAAkB,WAAW,KAAK,OAAO,QAAQ,OAAO,OAAO,QAAQ,OAAO,GAAG,IAAI;AAC3J,SAAK;AAAA,MACJ,eACC,KAAK,KAAK,KAAK,qCAAqC,4BAA4B,8BAChF,KAAK,KAAK,KAAK,qCAAqC,4BAA4B;AAAA,IAClF;AAAA,EACD;AAAA,EACA,aAAa;AACZ,SAAK,aAAa;AAClB,SAAK;AAAA,MACJ;AAAA,IAOD;AAAA,EACD;AAAA,EAEA,qBAAqB;AAAA,EACrB,UAAU,QAAQ,MAAM,MAAM,YAAY,KAAK;AAC9C,WAAO,KAAK,YAAY;AACxB,SAAK,SAAS,QAAQ,MAAM,IAAI;AAChC,UAAM,eAAe,IAAI,SAAS,YAAY;AAE9C,QAAI,CAAC,gBAAgB,KAAK,IAAI,OAAO,MAAM,GAAG;AAC9C,UAAM,WAAW,SAAS,cAAc;AACxC,QAAI,MAAM,QAAQ,KAAK,CAAC,YAAY,KAAK,cAAc,KAAK,WAAW,KAAK,WAAW,KAAK,IAAI;AAC/F,YAAM,IAAI,KAAK,aAAa,KAAK,4FAA4F;AAAA,IAC9H;AACA,QAAI,CAAC,0BAAS,KAAK,MAAM,GAAG;AAC3B,YAAM,IAAI,KAAK,aAAa,wBAAwB;AAAA,IACrD;AACA,YAAQ,SAAK,2BAAS,KAAK,QAAQ,KAAK,KAAK,KAAK;AAClD,UAAM,MAAM,0BAAS,KAAK,MAAM,EAAE,KAAK;AACvC,QAAI,CAAC,KAAK;AACT,YAAM,IAAI,KAAK,aAAa,gBAAgB;AAAA,IAC7C;AAEA,QAAI,QAAQ,UAAU,MAAM,KAAW,GAAG;AACzC,YAAM,IAAI,KAAK,aAAa,KAAK,gCAAgC,mCAAmC;AAAA,IACrG;AAEA,YAAQ,UAAU,MAAM;AAAA,MACvB,IAAI;AAAA,MACJ,QAAQ,IAAI;AAAA,MACZ,UAAU,YAAY,eAAe,IAAI,KAAK;AAAA,MAC9C,KAAK;AAAA,MACL;AAAA,IACD,CAAC;AAED,SAAK,OAAO,gBAAgB,MAAM,SAAS,YAAY,eAAe,iBAAiB,WAAW,KAAK,OAAO,QAAQ,wBAAwB,QAAQ;AACtJ,SAAK;AAAA,MACJ,eACC,KAAK,KAAK,KAAK,0BAA0B,+BAA+B,8BACxE,KAAK,KAAK,KAAK,0BAA0B,+BAA+B;AAAA,IAC1E;AAAA,EACD;AAAA,EAEA,cAAc;AAAA,EACd,aAAa,QAAQ,MAAM,MAAM;AAChC,WAAO,KAAK,YAAY;AACxB,UAAM,KAAK,KAAK,MAAM;AACtB,QAAI,CAAC,IAAI;AACR,aAAO,KAAK,MAAM,cAAc;AAAA,IACjC;AACA,SAAK,SAAS,QAAQ,MAAM,IAAI;AAChC,QAAI,CAAC,KAAK,SAAS,SAAS,QAAQ;AACnC,aAAO,KAAK,WAAW,KAAK,+CAA+C;AAAA,IAC5E;AAEA,QAAI,CAAC,QAAQ,UAAU,MAAM,EAAE,GAAG;AACjC,aAAO,KAAK,WAAW,KAAK,8BAA8B,yCAAyC;AAAA,IACpG;AAEA,YAAQ,aAAa,MAAM,EAAE;AAE7B,SAAK,OAAO,uBAAuB,MAAM,IAAI,KAAK;AAClD,SAAK,iBAAiB,KAAK,KAAK,KAAK,kDAAkD,MAAM;AAC7F,SAAK,YAAY,WAAW,KAAK,QAAQ;AAAA,EAC1C;AAAA,EAEA,iBAAiB,QAAQ,MAAM,MAAM;AACpC,WAAO,KAAK,YAAY;AACxB,SAAK,SAAS,WAAW,MAAM,IAAI;AACnC,QAAI,CAAC,KAAK,SAAS,SAAS,QAAQ;AACnC,aAAO,KAAK,WAAW,KAAK,+CAA+C;AAAA,IAC5E;AAEA,eAAW,EAAC,GAAE,KAAK,KAAK,SAAS,SAAS;AACzC,cAAQ,aAAa,MAAM,EAAE;AAAA,IAC9B;AAEA,SAAK,OAAO,uBAAuB,MAAM,sBAAsB;AAC/D,SAAK,iBAAiB,KAAK,KAAK,KAAK,oCAAoC;AAAA,EAC1E;AAAA,EAEA,SAAS;AAAA,EACT,YAAY,QAAQ,MAAM,MAAM;AAC/B,UAAM,SAAS,KAAK,MAAM,KAAK,MAAM;AACrC,QAAI,CAAC;AAAQ,aAAO,KAAK,WAAW,KAAK,2DAA2D;AACpG,SAAK,MAAM,mBAAmB,QAAQ;AAAA,EACvC;AACD;AAEA,QAAQ,SAAS,MAAM;AACtB,OAAK,iBAAiB,SAAS,kCAAkC;AAClE,CAAC;",
  "names": []
}
