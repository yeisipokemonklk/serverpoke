{
  "version": 3,
  "sources": ["../../../../server/chat-plugins/youtube.ts"],
  "sourcesContent": ["/**\r\n * Youtube room chat-plugin.\r\n * Supports adding channels and selecting a random channel.\r\n * Also supports showing video data on request.\r\n * Written by Mia, with some design concepts from bumbadadabum.\r\n * @author mia-pi-git\r\n */\r\n\r\nimport {Utils, FS, Net} from '../../lib';\r\n\r\nconst ROOT = 'https://www.googleapis.com/youtube/v3/';\r\nconst STORAGE_PATH = 'config/chat-plugins/youtube.json';\r\nconst GROUPWATCH_ROOMS = ['youtube', 'pokemongames', 'videogames', 'smashbros', 'pokemongo', 'hindi'];\r\n\r\nexport const videoDataCache: Map<string, VideoData> = Chat.oldPlugins.youtube?.videoDataCache || new Map();\r\nexport const searchDataCache: Map<string, string[]> = Chat.oldPlugins.youtube?.searchDataCache || new Map();\r\n\r\ninterface ChannelEntry {\r\n\tname: string;\r\n\tdescription: string;\r\n\turl: string;\r\n\ticon: string;\r\n\tvideos: number;\r\n\tsubs: number;\r\n\tviews: number;\r\n\tusername?: string;\r\n\tcategory?: string;\r\n}\r\n\r\nexport interface VideoData {\r\n\tid: string;\r\n\ttitle: string;\r\n\tdate: string;\r\n\tdescription: string;\r\n\tchannelTitle: string;\r\n\tchannelUrl: string;\r\n\tviews: number;\r\n\tthumbnail: string;\r\n\tlikes: number;\r\n\tdislikes: number;\r\n}\r\n\r\ninterface TwitchChannel {\r\n\tstatus: string;\r\n\tdisplay_name: string;\r\n\tname: string;\r\n\tlanguage: string;\r\n\tcreated_at: string;\r\n\tlogo: string;\r\n\tviews: number;\r\n\tfollowers: number;\r\n\tvideo_banner: string;\r\n\turl: string;\r\n\tgame: string;\r\n\tdescription: string;\r\n\tupdated_at: string;\r\n}\r\n\r\ninterface ChannelData {\r\n\tchannels: {[k: string]: ChannelEntry};\r\n\tcategories: string[];\r\n\tintervalTime?: number;\r\n}\r\n\r\nfunction loadData() {\r\n\tconst raw: AnyObject = JSON.parse(FS(STORAGE_PATH).readIfExistsSync() || \"{}\");\r\n\tif (!(raw.channels && raw.categories)) { // hasn't been converted to new format\r\n\t\tconst data: Partial<ChannelData> = {};\r\n\t\tdata.channels = raw;\r\n\t\tdata.categories = [];\r\n\t\t// re-save into new format\r\n\t\tFS(STORAGE_PATH).writeUpdate(() => JSON.stringify(data));\r\n\t\treturn data as ChannelData;\r\n\t}\r\n\treturn raw as ChannelData;\r\n}\r\n\r\nconst channelData: ChannelData = loadData();\r\n\r\nexport class YoutubeInterface {\r\n\tinterval: NodeJS.Timer | null;\r\n\tintervalTime: number;\r\n\tdata: ChannelData;\r\n\tlinkRegex = /^(https?:\\/\\/)?(www\\.)?(youtube\\.com|youtu\\.be)(\\/|$)/i;\r\n\tconstructor(data?: ChannelData) {\r\n\t\tthis.data = data ? data : {categories: [], channels: {}};\r\n\t\tthis.interval = null;\r\n\t\tthis.intervalTime = 0;\r\n\t\tif (data?.intervalTime) {\r\n\t\t\tthis.runInterval(`${data.intervalTime}`);\r\n\t\t}\r\n\t}\r\n\tasync getChannelData(link: string, username?: string) {\r\n\t\tif (!Config.youtubeKey) {\r\n\t\t\tthrow new Chat.ErrorMessage(`This server does not support YouTube commands. If you're the owner, you can enable them by setting up Config.youtubekey.`);\r\n\t\t}\r\n\t\tconst id = this.getId(link);\r\n\t\tconst raw = await Net(`${ROOT}channels`).get({\r\n\t\t\tquery: {part: 'snippet,statistics', id, key: Config.youtubeKey},\r\n\t\t});\r\n\t\tconst res = JSON.parse(raw);\r\n\t\tif (!res?.items || res.items.length < 1) {\r\n\t\t\tthrow new Chat.ErrorMessage(`Channel not found.`);\r\n\t\t}\r\n\t\tconst data = res.items[0];\r\n\t\tconst cache: ChannelEntry = {\r\n\t\t\tname: data.snippet.title,\r\n\t\t\tdescription: data.snippet.description,\r\n\t\t\turl: data.snippet.customUrl,\r\n\t\t\ticon: data.snippet.thumbnails.medium.url,\r\n\t\t\tvideos: Number(data.statistics.videoCount),\r\n\t\t\tsubs: Number(data.statistics.subscriberCount),\r\n\t\t\tviews: Number(data.statistics.viewCount),\r\n\t\t\tusername: username,\r\n\t\t};\r\n\t\tthis.data.channels[id] = {...cache};\r\n\t\tthis.save();\r\n\t\treturn cache;\r\n\t}\r\n\tasync generateChannelDisplay(link: string) {\r\n\t\tconst id = this.getId(link);\r\n\t\tconst {name, description, icon, videos, subs, views, username} = await this.get(id);\r\n\t\t// credits bumbadadabum for most of the html\r\n\t\tlet buf = `<div class=\"infobox\"><table style=\"margin:0px;\"><tr>`;\r\n\t\tbuf += `<td style=\"margin:5px;padding:5px;min-width:175px;max-width:160px;text-align:center;border-bottom:0px;\">`;\r\n\t\tbuf += `<div style=\"padding:5px;background:white;border:1px solid black;margin:auto;max-width:100px;max-height:100px;\">`;\r\n\t\tbuf += `<a href=\"${ROOT}channel/${id}\"><img src=\"${icon}\" width=100px height=100px/></a>`;\r\n\t\tbuf += `</div><p style=\"margin:5px 0px 4px 0px;word-wrap:break-word;\">`;\r\n\t\tbuf += `<a style=\"font-weight:bold;color:#c70000;font-size:12pt;\" href=\"https://www.youtube.com/channel/${id}\">${name}</a>`;\r\n\t\tbuf += `</p></td><td style=\"padding: 0px 25px;font-size:10pt;background:rgb(220,20,60);width:100%;border-bottom:0px;vertical-align:top;\">`;\r\n\t\tbuf += `<p style=\"padding: 5px;border-radius:8px;color:white;font-weight:bold;text-align:center;\">`;\r\n\t\tbuf += `${videos} videos | ${subs} subscribers | ${views} video views</p>`;\r\n\t\tbuf += `<p style=\"margin-left: 5px; font-size:9pt;color:white;\">`;\r\n\t\tbuf += `${description.slice(0, 400).replace(/\\n/g, ' ')}${description.length > 400 ? '(...)' : ''}</p>`;\r\n\t\tif (username) {\r\n\t\t\tbuf += `<p style=\"text-align:left;font-style:italic;color:white;\">PS username: ${username}</p></td></tr></table></div>`;\r\n\t\t} else {\r\n\t\t\tbuf += '</td></tr></table></div>';\r\n\t\t}\r\n\t\treturn buf;\r\n\t}\r\n\trandChannel(cat?: string) {\r\n\t\tlet channels = Object.keys(this.data.channels);\r\n\t\tif (channels.length < 1) {\r\n\t\t\tthrow new Chat.ErrorMessage(`There are no channels in the database.`);\r\n\t\t}\r\n\t\tif (cat) {\r\n\t\t\tcat = toID(cat);\r\n\t\t\tconst categoryIDs = this.data.categories.map(toID);\r\n\t\t\tif (!categoryIDs.includes(cat as ID)) {\r\n\t\t\t\tthrow new Chat.ErrorMessage(`Invalid category.`);\r\n\t\t\t}\r\n\t\t\tchannels = channels.filter(id => {\r\n\t\t\t\tconst channel = this.data.channels[id];\r\n\t\t\t\treturn channel.category && toID(channel.category) === cat;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tconst id = Utils.shuffle(channels)[0];\r\n\t\treturn this.generateChannelDisplay(id);\r\n\t}\r\n\tget(id: string, username?: string): Promise<ChannelEntry> {\r\n\t\tif (!(id in this.data.channels)) return this.getChannelData(id, username);\r\n\t\treturn Promise.resolve({...this.data.channels[id]});\r\n\t}\r\n\tasync getVideoData(id: string): Promise<VideoData | null> {\r\n\t\tconst cached = videoDataCache.get(id);\r\n\t\tif (cached) return cached;\r\n\t\tlet raw;\r\n\t\ttry {\r\n\t\t\traw = await Net(`${ROOT}videos`).get({\r\n\t\t\t\tquery: {part: 'snippet,statistics', id, key: Config.youtubeKey},\r\n\t\t\t});\r\n\t\t} catch (e: any) {\r\n\t\t\tthrow new Chat.ErrorMessage(`Failed to retrieve video data: ${e.message}.`);\r\n\t\t}\r\n\t\tconst res = JSON.parse(raw);\r\n\t\tif (!res?.items || res.items.length < 1) return null;\r\n\t\tconst video = res.items[0];\r\n\t\tconst data: VideoData = {\r\n\t\t\ttitle: video.snippet.title,\r\n\t\t\tid,\r\n\t\t\tdate: new Date(video.snippet.publishedAt).toString(),\r\n\t\t\tdescription: video.snippet.description,\r\n\t\t\tchannelTitle: video.snippet.channelTitle,\r\n\t\t\tchannelUrl: video.snippet.channelId,\r\n\t\t\tviews: video.statistics.viewCount,\r\n\t\t\tthumbnail: video.snippet.thumbnails.default.url,\r\n\t\t\tlikes: video.statistics.likeCount,\r\n\t\t\tdislikes: video.statistics.dislikeCount,\r\n\t\t};\r\n\t\tvideoDataCache.set(id, data);\r\n\t\treturn data;\r\n\t}\r\n\tchannelSearch(search: string) {\r\n\t\tlet channel;\r\n\t\tif (this.data.channels[search]) {\r\n\t\t\tchannel = search;\r\n\t\t} else {\r\n\t\t\tfor (const id of Object.keys(this.data.channels)) {\r\n\t\t\t\tconst name = toID(this.data.channels[id].name);\r\n\t\t\t\tconst username = this.data.channels[id].username;\r\n\t\t\t\tif (name === toID(search) || username && toID(username) === toID(search)) {\r\n\t\t\t\t\tchannel = id;\r\n\t\t\t\t\tbreak; // don't iterate through everything once a match is found\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn channel;\r\n\t}\r\n\tgetId(link: string) {\r\n\t\tlet id = '';\r\n\t\tif (!link) throw new Chat.ErrorMessage('You must provide a YouTube link.');\r\n\t\tif (this.data.channels[link]) return link;\r\n\t\tif (!link.includes('channel/')) {\r\n\t\t\tif (link.includes('youtube')) {\r\n\t\t\t\tid = link.split('v=')[1] || '';\r\n\t\t\t} else if (link.includes('youtu.be')) {\r\n\t\t\t\tid = link.split('/')[3] || '';\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Chat.ErrorMessage('Invalid YouTube channel link.');\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tid = link.split('channel/')[1] || '';\r\n\t\t}\r\n\t\tif (id.includes('&')) id = id.split('&')[0];\r\n\t\tif (id.includes('?')) id = id.split('?')[0];\r\n\t\treturn id;\r\n\t}\r\n\tasync generateVideoDisplay(link: string, fullInfo = false, broadcasting = false) {\r\n\t\tif (!Config.youtubeKey) {\r\n\t\t\tthrow new Chat.ErrorMessage(`This server does not support YouTube commands. If you're the owner, you can enable them by setting up Config.youtubekey.`);\r\n\t\t}\r\n\t\tconst id = this.getId(link);\r\n\t\tconst info = await this.getVideoData(id);\r\n\t\tif (!info) throw new Chat.ErrorMessage(`Video not found.`);\r\n\t\tif (!fullInfo) {\r\n\t\t\tlet buf = `<b>${info.title}</b> `;\r\n\t\t\tbuf += `(<a class=\"subtle\" href=\"https://youtube.com/channel/${info.channelUrl}\">${info.channelTitle}</a>)<br />`;\r\n\t\t\tif (broadcasting) {\r\n\t\t\t\tbuf += `<button class=\"button\" name=\"send\" value=\"/show https://www.youtube.com/watch?v=${id}\">`;\r\n\t\t\t\tbuf += `Click to view \"${info.title}\"</button>`;\r\n\t\t\t} else {\r\n\t\t\t\tbuf += `<youtube src=\"https://www.youtube.com/embed/${id}\" />`;\r\n\t\t\t}\r\n\t\t\treturn buf;\r\n\t\t}\r\n\t\tlet buf = `<table style=\"margin:0px;\"><tr>`;\r\n\t\tbuf += `<td style=\"margin:5px;padding:5px;min-width:175px;max-width:160px;text-align:center;border-bottom:0px;\">`;\r\n\t\tbuf += `<div style=\"padding:5px;background:#b0b0b0;border:1px solid black;margin:auto;max-width:100px;max-height:100px;\">`;\r\n\t\tbuf += `<a href=\"${ROOT}channel/${id}\"><img src=\"${info.thumbnail}\" width=100px height=100px/></a>`;\r\n\t\tbuf += `</div><p style=\"margin:5px 0px 4px 0px;word-wrap:break-word;\">`;\r\n\t\tbuf += `<a style=\"font-weight:bold;color:#c70000;font-size:12pt;\" href=\"https://www.youtube.com/watch?v=${id}\">${info.title}</a>`;\r\n\t\tbuf += `</p></td><td style=\"padding: 0px 25px;font-size:10pt;max-width:100px;background:`;\r\n\t\tbuf += `#white;width:100%;border-bottom:0px;vertical-align:top;\">`;\r\n\t\tbuf += `<p style=\"background: #e22828; padding: 5px;border-radius:8px;color:white;font-weight:bold;text-align:center;\">`;\r\n\t\tbuf += `${info.likes} likes | ${info.dislikes} dislikes | ${info.views} video views<br><br>`;\r\n\t\tbuf += `<small>Published on ${info.date} | ID: ${id}</small><br>Uploaded by: ${info.channelTitle}</p>`;\r\n\t\tbuf += `<br><details><summary>Video Description</p></summary>`;\r\n\t\tbuf += `<p style=\"background: #e22828;max-width:500px;padding: 5px;border-radius:8px;color:white;font-weight:bold;text-align:center;\">`;\r\n\t\tbuf += `<i>${info.description.slice(0, 400).replace(/\\n/g, ' ')}${info.description.length > 400 ? '(...)' : ''}</p><i></details></td>`;\r\n\t\treturn buf;\r\n\t}\r\n\tsave() {\r\n\t\treturn FS(STORAGE_PATH).writeUpdate(() => JSON.stringify(this.data));\r\n\t}\r\n\tasync searchVideo(name: string, limit?: number): Promise<string[] | undefined> {\r\n\t\tconst cached = searchDataCache.get(toID(name));\r\n\t\tif (cached) {\r\n\t\t\treturn cached.slice(0, limit);\r\n\t\t}\r\n\t\tconst raw = await Net(`${ROOT}search`).get({\r\n\t\t\tquery: {\r\n\t\t\t\tpart: 'snippet', q: name,\r\n\t\t\t\tkey: Config.youtubeKey, order: 'relevance',\r\n\t\t\t},\r\n\t\t});\r\n\t\tconst result = JSON.parse(raw);\r\n\t\tconst resultArray = result.items?.map((item: AnyObject) => item?.id?.videoId).filter(Boolean);\r\n\t\tsearchDataCache.set(toID(name), resultArray);\r\n\t\treturn resultArray.slice(0, limit);\r\n\t}\r\n\tasync searchChannel(name: string, limit = 10): Promise<string[] | undefined> {\r\n\t\tconst raw = await Net(`${ROOT}search`).get({\r\n\t\t\tquery: {\r\n\t\t\t\tpart: 'snippet', q: name, type: 'channel',\r\n\t\t\t\tkey: Config.youtubeKey, order: 'relevance', maxResults: limit,\r\n\t\t\t},\r\n\t\t});\r\n\t\tconst result = JSON.parse(raw);\r\n\t\treturn result?.items.map((item: AnyObject) => item?.snippet?.channelId);\r\n\t}\r\n\trunInterval(time: string) {\r\n\t\tlet interval = Number(time);\r\n\t\tif (interval < 10) throw new Chat.ErrorMessage(`${interval} is too low - set it above 10 minutes.`);\r\n\t\tthis.intervalTime = interval;\r\n\t\tthis.data.intervalTime = interval;\r\n\t\tinterval = interval * 60 * 1000;\r\n\t\tif (this.interval) clearInterval(this.interval);\r\n\t\tthis.interval = setInterval(() => {\r\n\t\t\tvoid (async () => {\r\n\t\t\t\tconst room = Rooms.get('youtube');\r\n\t\t\t\tif (!room) return; // do nothing if the room doesn't exist anymore\r\n\t\t\t\tconst res = await YouTube.randChannel();\r\n\t\t\t\troom.add(`|html|${res}`).update();\r\n\t\t\t})();\r\n\t\t}, interval);\r\n\t\treturn this.interval;\r\n\t}\r\n\tasync createGroupWatch(url: string, baseRoom: Room, title: string) {\r\n\t\tconst videoInfo = await this.getGroupwatchData(url);\r\n\t\tconst num = baseRoom.nextGameNumber();\r\n\t\tbaseRoom.saveSettings();\r\n\t\treturn new GroupWatch(baseRoom, num, url, title, videoInfo);\r\n\t}\r\n\tasync getGroupwatchData(url: string) {\r\n\t\tif (!Chat.isLink(url)) {\r\n\t\t\tthrow new Chat.ErrorMessage(\"Invalid URL: \" + url);\r\n\t\t}\r\n\t\tconst urlData = new URL(url);\r\n\t\tconst host = urlData.hostname;\r\n\t\tlet videoInfo: GroupwatchData;\r\n\t\tif (['youtu.be', 'www.youtube.com'].includes(host)) {\r\n\t\t\tconst id = this.getId(url);\r\n\t\t\tconst data = await this.getVideoData(id);\r\n\t\t\tif (!data) throw new Chat.ErrorMessage(`Video not found.`);\r\n\t\t\tvideoInfo = Object.assign(data, {groupwatchType: 'youtube'}) as GroupwatchData;\r\n\t\t} else if (host === 'www.twitch.tv') {\r\n\t\t\tconst data = await Twitch.getChannel(urlData.pathname.slice(1));\r\n\t\t\tif (!data) throw new Chat.ErrorMessage(`Channel not found`);\r\n\t\t\tvideoInfo = Object.assign(data, {groupwatchType: 'twitch'}) as GroupwatchData;\r\n\t\t} else {\r\n\t\t\tthrow new Chat.ErrorMessage(`Invalid URL: must be either a Youtube or Twitch link.`);\r\n\t\t}\r\n\t\treturn videoInfo;\r\n\t}\r\n}\r\n\r\nexport const Twitch = new class {\r\n\tlinkRegex = /(https?:\\/\\/)?twitch.tv\\/([A-Za-z0-9]+)/i;\r\n\tasync getChannel(channel: string): Promise<TwitchChannel | undefined> {\r\n\t\tif (!Config.twitchKey || typeof Config.twitchKey !== 'object') {\r\n\t\t\tthrow new Chat.ErrorMessage(`Twitch is not enabled.`);\r\n\t\t}\r\n\t\tchannel = toID(channel);\r\n\t\tlet res;\r\n\t\ttry {\r\n\t\t\tres = await Net(`https://api.twitch.tv/helix/search/channels`).get({\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Authorization': `Bearer ${Config.twitchKey.key}`,\r\n\t\t\t\t\t'Client-Id': Config.twitchKey.id,\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t'Accept': \"application/vnd.twitchtv.v5+json\",\r\n\t\t\t\t},\r\n\t\t\t\tquery: {query: channel},\r\n\t\t\t});\r\n\t\t} catch (e: any) {\r\n\t\t\tthrow new Chat.ErrorMessage(`Error retrieving twitch channel: ${e.message}`);\r\n\t\t}\r\n\t\tconst data = JSON.parse(res);\r\n\t\tUtils.sortBy(data.channels as AnyObject[], c => -c.followers);\r\n\t\treturn data?.channels?.[0] as TwitchChannel | undefined;\r\n\t}\r\n\tvisualizeChannel(info: TwitchChannel) {\r\n\t\tlet buf = `<div class=\"infobox\"><table style=\"margin:0px;\"><tr>`;\r\n\t\tbuf += `<td style=\"margin:5px;padding:5px;min-width:175px;max-width:160px;text-align:center;border-bottom:0px;\">`;\r\n\t\tbuf += `<div style=\"padding:5px;background:white;border:1px solid black;margin:auto;max-width:100px;max-height:100px;\">`;\r\n\t\tbuf += `<a href=\"${info.url}\"><img src=\"${info.logo}\" width=100px height=100px/></a>`;\r\n\t\tbuf += `</div><p style=\"margin:5px 0px 4px 0px;word-wrap:break-word;\">`;\r\n\t\tbuf += `<a style=\"font-weight:bold;color:#6441a5;font-size:12pt;\" href=\"${info.logo}\">${info.display_name}</a>`;\r\n\t\tbuf += `</p></td><td style=\"padding: 0px 25px;font-size:10pt;background:rgb(100, 65, 164);width:100%;border-bottom:0px;vertical-align:top;\">`;\r\n\t\tbuf += `<p style=\"padding: 5px;border-radius:8px;color:white;font-size:15px;font-weight:bold;text-align:center;\">`;\r\n\t\tconst created = new Date(info.created_at);\r\n\t\tbuf += `${info.followers} subscribers | ${info.views} stream views | created ${Chat.toTimestamp(created).split(' ')[0]}</p>`;\r\n\t\tbuf += `<p style=\"color:white;font-size:10px\">Last seen playing ${info.game} (Status: ${info.status})</p>`;\r\n\t\tbuf += `<hr /><p style=\"margin-left: 5px; font-size:9pt;color:white;\">`;\r\n\t\tbuf += `${info.description.slice(0, 400).replace(/\\n/g, ' ')}${info.description.length > 400 ? '...' : ''}</p>`;\r\n\t\tbuf += '</td></tr></table></div>';\r\n\t\treturn buf;\r\n\t}\r\n};\r\n\r\ntype GroupwatchData = VideoData & {groupwatchType: 'youtube'} | TwitchChannel & {groupwatchType: 'twitch'};\r\nexport class GroupWatch extends Rooms.SimpleRoomGame {\r\n\toverride readonly gameid = 'groupwatch' as ID;\r\n\turl: string;\r\n\tinfo: GroupwatchData;\r\n\tstarted: number | null = null;\r\n\tid: string;\r\n\tstatic groupwatches = new Map<string, GroupWatch>();\r\n\tconstructor(room: Room, num: number, url: string, title: string, videoInfo: GroupwatchData) {\r\n\t\tsuper(room);\r\n\t\tthis.title = title;\r\n\t\tthis.id = `${room.roomid}-${num}`;\r\n\t\tGroupWatch.groupwatches.set(this.id, this);\r\n\t\tthis.url = url;\r\n\t\tthis.info = videoInfo;\r\n\t}\r\n\tonJoin(user: User) {\r\n\t\tconst hints = this.hints();\r\n\t\tfor (const hint of hints) {\r\n\t\t\tuser.sendTo(this.room.roomid, `|html|${hint}`);\r\n\t\t}\r\n\t}\r\n\tstart() {\r\n\t\tif (this.started) throw new Chat.ErrorMessage(`We've already started.`);\r\n\t\tthis.started = Date.now();\r\n\t\tthis.update();\r\n\t}\r\n\thints() {\r\n\t\tconst title = this.info.groupwatchType === 'youtube' ? this.info.title : this.info.display_name;\r\n\t\tconst hints = [\r\n\t\t\t`To watch, all you need to do is click play on the video once staff have started it!`,\r\n\t\t\t`We are currently watching: <a href=\"${this.url}\">${title}</a>`,\r\n\t\t];\r\n\t\tif (this.started && this.info.groupwatchType === 'youtube') {\r\n\t\t\tconst diff = Date.now() - this.started;\r\n\t\t\thints.push(`Video is currently at ${Chat.toDurationString(diff)} (${Math.floor(diff / 1000)} seconds)`);\r\n\t\t}\r\n\t\treturn hints;\r\n\t}\r\n\tgetStatsDisplay() {\r\n\t\tif (this.info.groupwatchType === 'twitch') {\r\n\t\t\tlet buf = `<p style=\"background: #6441a5; padding: 5px;border-radius:8px;color:white;font-weight:bold;text-align:center;\">`;\r\n\t\t\tbuf += `<strong>Watching <a href=\"${this.info.url}\" class=\"subtle\">${this.info.display_name}</strong><br />`;\r\n\t\t\tbuf += `${Chat.count(Object.keys(this.room.users).length, 'users')} watching<br />`;\r\n\t\t\tbuf += `<strong>Playing: ${this.info.game}`;\r\n\t\t\treturn buf;\r\n\t\t}\r\n\t\tlet controlsHTML = `<h3>${this.info.title}</h3>`;\r\n\t\tcontrolsHTML += `<div class=\"infobox\"><b>Channel:</b> `;\r\n\t\tcontrolsHTML += `<a href=\"https://www.youtube.com/channel/${this.info.channelUrl}\">${this.info.channelTitle}</a><br />`;\r\n\t\tcontrolsHTML += `<b>Likes:</b> ${this.info.likes} | <b>Dislikes:</b> ${this.info.dislikes}<br />`;\r\n\t\tcontrolsHTML += `<b>Uploaded:</b> <time>${new Date(this.info.date).toISOString()}</time><br />`;\r\n\t\tcontrolsHTML += `<details><summary>Description</summary>${this.info.description.replace(/\\n/ig, '<br />')}</details>`;\r\n\t\tcontrolsHTML += `</div>`;\r\n\t\treturn controlsHTML;\r\n\t}\r\n\tgetVideoDisplay() {\r\n\t\tif (this.info.groupwatchType === 'twitch') {\r\n\t\t\tlet buf = `<p style=\"background: #6441a5; padding: 5px;border-radius:8px;color:white;font-weight:bold;text-align:center;\">`;\r\n\t\t\tbuf += `<twitch src=\"${this.info.url}\" width=\"600\" height=\"330\" />`;\r\n\t\t\treturn buf;\r\n\t\t}\r\n\t\tlet buf = `<p style=\"background: #e22828; padding: 5px;border-radius:8px;color:white;font-weight:bold;text-align:center;\">`;\r\n\t\tbuf += `<br /><br /><b>${this.info.title}</b><br />`;\r\n\t\tconst id = YouTube.getId(this.url);\r\n\t\tconst url = `https://youtube.com/watch?v=${id}`;\r\n\t\tlet addendum = '';\r\n\t\tif (this.started) {\r\n\t\t\tconst diff = Date.now() - this.started;\r\n\t\t\taddendum = `&start=${Math.floor(diff / 1000)}`;\r\n\t\t}\r\n\t\tbuf += `<youtube src=\"${url}${addendum}\"></youtube>`;\r\n\t\tbuf += `<br />`.repeat(4);\r\n\t\tbuf += `</p>`;\r\n\t\treturn buf;\r\n\t}\r\n\tdisplay() {\r\n\t\treturn (\r\n\t\t\tUtils.html`<center><div class=\"pad\"><strong>${this.room.title} Groupwatch - ${this.title}</strong><br /><br />` +\r\n\t\t\t`<p>${this.started ? this.getVideoDisplay() : \"\"}</p><hr />` +\r\n\t\t\t`<p>${this.started ? this.getStatsDisplay() : \"<i>Waiting to start the video...</i>\"}</p>` +\r\n\t\t\t`<p>${this.hints().join('<br />')}</p>`\r\n\t\t);\r\n\t}\r\n\tupdate() {\r\n\t\tfor (const user of Object.values(this.room.users)) {\r\n\t\t\tfor (const conn of user.connections) {\r\n\t\t\t\tif (conn.openPages?.has(`groupwatch-${this.id}`)) {\r\n\t\t\t\t\tvoid Chat.parse(`/j view-groupwatch-${this.id}`, this.room, user, conn);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tasync changeVideo(url: string) {\r\n\t\tconst info = await YouTube.getGroupwatchData(url);\r\n\t\tif (!info) throw new Chat.ErrorMessage(`Could not retrieve data for URL ${url}`);\r\n\t\tthis.url = url;\r\n\t\tthis.started = Date.now();\r\n\t\tthis.info = info;\r\n\t\tthis.update();\r\n\t}\r\n\tdestroy() {\r\n\t\tGroupWatch.groupwatches.delete(this.id);\r\n\t\tthis.room.game = null;\r\n\t\tthis.room = null!;\r\n\t}\r\n}\r\n\r\nexport const YouTube = new YoutubeInterface(channelData);\r\n\r\nexport function destroy() {\r\n\tif (YouTube.interval) clearInterval(YouTube.interval);\r\n}\r\n\r\nexport const commands: Chat.ChatCommands = {\r\n\tasync randchannel(target, room, user) {\r\n\t\troom = this.requireRoom('youtube' as RoomID);\r\n\t\tif (Object.keys(YouTube.data.channels).length < 1) return this.errorReply(`No channels in the database.`);\r\n\t\ttarget = toID(target);\r\n\t\tthis.runBroadcast();\r\n\t\tconst data = await YouTube.randChannel(target);\r\n\t\treturn this.sendReply(`|html|${data}`);\r\n\t},\r\n\trandchannelhelp: [`/randchannel - View data of a random channel from the YouTube database.`],\r\n\r\n\tyt: 'youtube',\r\n\tyoutube: {\r\n\t\tasync addchannel(target, room, user) {\r\n\t\t\troom = this.requireRoom('youtube' as RoomID);\r\n\t\t\tthis.checkCan('mute', null, room);\r\n\t\t\tconst [id, name] = target.split(',').map(t => t.trim());\r\n\t\t\tif (!id) return this.errorReply('Specify a channel ID.');\r\n\t\t\tawait YouTube.getChannelData(id, name);\r\n\t\t\tthis.modlog('ADDCHANNEL', null, `${id} ${name ? `username: ${name}` : ''}`);\r\n\t\t\treturn this.privateModAction(\r\n\t\t\t\t`${user.name} added channel with id ${id} ${name ? `and username (${name}) ` : ''} to the random channel pool.`\r\n\t\t\t);\r\n\t\t},\r\n\t\taddchannelhelp: [`/addchannel - Add channel data to the YouTube database. Requires: % @ #`],\r\n\r\n\t\tremovechannel(target, room, user) {\r\n\t\t\troom = this.requireRoom('youtube' as RoomID);\r\n\t\t\tthis.checkCan('mute', null, room);\r\n\t\t\tconst id = YouTube.channelSearch(target);\r\n\t\t\tif (!id) return this.errorReply(`Channel with ID or name ${target} not found.`);\r\n\t\t\tdelete YouTube.data.channels[id];\r\n\t\t\tYouTube.save();\r\n\t\t\tthis.privateModAction(`${user.name} deleted channel with ID or name ${target}.`);\r\n\t\t\treturn this.modlog(`REMOVECHANNEL`, null, id);\r\n\t\t},\r\n\t\tremovechannelhelp: [`/youtube removechannel - Delete channel data from the YouTube database. Requires: % @ #`],\r\n\r\n\t\tasync channel(target, room, user) {\r\n\t\t\troom = this.requireRoom('youtube' as RoomID);\r\n\t\t\tconst channel = YouTube.channelSearch(target);\r\n\t\t\tif (!channel) return this.errorReply(`No channels with ID or name ${target} found.`);\r\n\t\t\tconst data = await YouTube.generateChannelDisplay(channel);\r\n\t\t\tthis.runBroadcast();\r\n\t\t\treturn this.sendReply(`|html|${data}`);\r\n\t\t},\r\n\t\tchannelhelp: [\r\n\t\t\t'/youtube channel - View the data of a specified channel. Can be either channel ID or channel name.',\r\n\t\t],\r\n\t\tasync video(target, room, user) {\r\n\t\t\troom = this.requireRoom('youtube' as RoomID);\r\n\t\t\tthis.checkCan('mute', null, room);\r\n\t\t\tconst buffer = await YouTube.generateVideoDisplay(target, true);\r\n\t\t\tthis.runBroadcast();\r\n\t\t\tthis.sendReplyBox(buffer);\r\n\t\t},\r\n\r\n\t\tchannels(target, room, user) {\r\n\t\t\ttarget = toID(target);\r\n\t\t\treturn this.parse(`/j view-channels${target ? `-${target}` : ''}`);\r\n\t\t},\r\n\t\thelp(target, room, user) {\r\n\t\t\treturn this.parse('/help youtube');\r\n\t\t},\r\n\r\n\t\tcategories() {\r\n\t\t\treturn this.parse(`/j view-channels-categories`);\r\n\t\t},\r\n\r\n\t\tupdate(target, room, user) {\r\n\t\t\troom = this.requireRoom('youtube' as RoomID);\r\n\t\t\tthis.checkCan('mute', null, room);\r\n\t\t\tconst [channel, name] = target.split(',');\r\n\t\t\tconst id = YouTube.channelSearch(channel);\r\n\t\t\tif (!id) return this.errorReply(`Channel ${channel} is not in the database.`);\r\n\t\t\tYouTube.data.channels[id].username = name;\r\n\t\t\tthis.modlog(`UPDATECHANNEL`, null, name);\r\n\t\t\tthis.privateModAction(`${user.name} updated channel ${id}'s username to ${name}.`);\r\n\t\t\tYouTube.save();\r\n\t\t},\r\n\t\tinterval: 'repeat',\r\n\t\trepeat(target, room, user) {\r\n\t\t\troom = this.requireRoom('youtube' as RoomID);\r\n\t\t\tthis.checkCan('declare', null, room);\r\n\t\t\tif (!target) {\r\n\t\t\t\tif (!YouTube.interval) return this.errorReply(`The YouTube plugin is not currently running an interval.`);\r\n\t\t\t\treturn this.sendReply(`Interval is currently set to ${Chat.toDurationString(YouTube.intervalTime * 60 * 1000)}.`);\r\n\t\t\t}\r\n\t\t\tif (this.meansNo(target)) {\r\n\t\t\t\tif (!YouTube.interval) return this.errorReply(`The interval is not currently running`);\r\n\t\t\t\tclearInterval(YouTube.interval);\r\n\t\t\t\tdelete YouTube.data.intervalTime;\r\n\t\t\t\tYouTube.save();\r\n\t\t\t\tthis.privateModAction(`${user.name} turned off the YouTube interval`);\r\n\t\t\t\treturn this.modlog(`YOUTUBE INTERVAL`, null, 'OFF');\r\n\t\t\t}\r\n\t\t\tif (Object.keys(channelData).length < 1) return this.errorReply(`No channels in the database.`);\r\n\t\t\tif (isNaN(parseInt(target))) return this.errorReply(`Specify a number (in minutes) for the interval.`);\r\n\t\t\tYouTube.runInterval(target);\r\n\t\t\tYouTube.save();\r\n\t\t\tthis.privateModAction(`${user.name} set a randchannel interval to ${target} minutes`);\r\n\t\t\treturn this.modlog(`CHANNELINTERVAL`, null, `${target} minutes`);\r\n\t\t},\r\n\t\taddcategory(target, room, user) {\r\n\t\t\troom = this.requireRoom('youtube' as RoomID);\r\n\t\t\tthis.checkCan('mute', null, room);\r\n\t\t\tconst categoryID = toID(target);\r\n\t\t\tif (!categoryID) return this.parse(`/help youtube`);\r\n\t\t\tif (YouTube.data.categories.map(toID).includes(categoryID)) {\r\n\t\t\t\treturn this.errorReply(`This category is already added. To change it, remove it and re-add it.`);\r\n\t\t\t}\r\n\t\t\tYouTube.data.categories.push(target);\r\n\t\t\tthis.modlog(`YOUTUBE ADDCATEGORY`, null, target);\r\n\t\t\tthis.privateModAction(`${user.name} added category '${target}' to the categories list.`);\r\n\t\t\tYouTube.save();\r\n\t\t},\r\n\t\tremovecategory(target, room, user) {\r\n\t\t\troom = this.requireRoom('youtube' as RoomID);\r\n\t\t\tthis.checkCan('mute', null, room);\r\n\t\t\tconst categoryID = toID(target);\r\n\t\t\tif (!categoryID) return this.parse(`/help youtube`);\r\n\t\t\tconst index = YouTube.data.categories.indexOf(target);\r\n\t\t\tif (index < 0) {\r\n\t\t\t\treturn this.errorReply(`${target} is not a valid category.`);\r\n\t\t\t}\r\n\t\t\tfor (const id in YouTube.data.channels) {\r\n\t\t\t\tconst channel = YouTube.data.channels[id];\r\n\t\t\t\tif (channel.category === target) delete YouTube.data.channels[id].category;\r\n\t\t\t}\r\n\t\t\tYouTube.save();\r\n\t\t\tthis.privateModAction(`${user.name} removed the category '${target}' from the category list.`);\r\n\t\t\tthis.modlog(`YOUTUBE REMOVECATEGORY`, null, target);\r\n\t\t},\r\n\t\tsetcategory(target, room, user) {\r\n\t\t\troom = this.requireRoom('youtube' as RoomID);\r\n\t\t\tthis.checkCan('mute', null, room);\r\n\t\t\ttarget = target.trim();\r\n\t\t\tconst [category, id] = Utils.splitFirst(target, ',').map(item => item.trim());\r\n\t\t\tif (!target || !category || !id) {\r\n\t\t\t\treturn this.parse('/help youtube');\r\n\t\t\t}\r\n\t\t\tif (!YouTube.data.categories.includes(category)) {\r\n\t\t\t\treturn this.errorReply(`Invalid category.`);\r\n\t\t\t}\r\n\t\t\tconst name = YouTube.channelSearch(id);\r\n\t\t\tif (!name) return this.errorReply(`Invalid channel.`);\r\n\t\t\tconst channel = YouTube.data.channels[name];\r\n\t\t\tYouTube.data.channels[name].category = category;\r\n\t\t\tYouTube.save();\r\n\t\t\tthis.modlog(`YOUTUBE SETCATEGORY`, null, `${id}: to category ${category}`);\r\n\t\t\tthis.privateModAction(`${user.name} set the channel ${channel.name}'s category to '${category}'.`);\r\n\t\t},\r\n\t\tdecategorize(target, room, user) {\r\n\t\t\troom = this.requireRoom('youtube' as RoomID);\r\n\t\t\tthis.checkCan('mute', null, room);\r\n\t\t\ttarget = target.trim();\r\n\t\t\tif (!target) {\r\n\t\t\t\treturn this.parse('/help youtube');\r\n\t\t\t}\r\n\t\t\tconst name = YouTube.channelSearch(target);\r\n\t\t\tif (!name) return this.errorReply(`Invalid channel.`);\r\n\t\t\tconst channel = YouTube.data.channels[name];\r\n\t\t\tconst category = channel.category;\r\n\t\t\tif (!category) return this.errorReply(`That channel does not have a category.`);\r\n\t\t\tdelete channel.category;\r\n\t\t\tYouTube.save();\r\n\t\t\tthis.modlog(`YOUTUBE DECATEGORIZE`, null, target);\r\n\t\t\tthis.privateModAction(`${user.name} removed the channel ${channel.name} from the category ${category}.`);\r\n\t\t},\r\n\t},\r\n\tyoutubehelp: [\r\n\t\t`YouTube commands:`,\r\n\t\t`/randchannel [optional category]- View data of a random channel from the YouTube database.` +\r\n\t\t\t` If a category is given, the random channel will be in the  given category.`,\r\n\t\t`/youtube addchannel [channel] - Add channel data to the YouTube database. Requires: % @ #`,\r\n\t\t`/youtube removechannel [channel]- Delete channel data from the YouTube database. Requires: % @ #`,\r\n\t\t`/youtube channel [channel] - View the data of a specified channel. Can be either channel ID or channel name.`,\r\n\t\t`/youtube video [video] - View data of a specified video. Can be either channel ID or channel name.`,\r\n\t\t`/youtube update [channel], [name] - sets a channel's PS username to [name]. Requires: % @ #`,\r\n\t\t`/youtube repeat [time] - Sets an interval for [time] minutes, showing a random channel each time. Requires: # &`,\r\n\t\t`/youtube addcategory [name] - Adds the [category] to the channel category list. Requires: @ # &`,\r\n\t\t`/youtube removecategory [name] - Removes the [category] from the channel category list. Requires: @ # &`,\r\n\t\t`/youtube setcategory [category], [channel name] - Sets the category for [channel] to [category]. Requires: @ # &`,\r\n\t\t`/youtube decategorize [channel name] - Removes the category for the [channel], if there is one. Requires: @ # &`,\r\n\t\t`/youtube categores - View all channels sorted by category.`,\r\n\t],\r\n\tgroupwatch: {\r\n\t\tasync create(target, room, user) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tif (!GROUPWATCH_ROOMS.includes(room.roomid)) {\r\n\t\t\t\treturn this.errorReply(`This room is not allowed to use the groupwatch function.`);\r\n\t\t\t}\r\n\t\t\tthis.checkCan('mute', null, room);\r\n\t\t\tconst [url, title] = Utils.splitFirst(target, ',').map(p => p.trim());\r\n\t\t\tif (!url || !title) return this.errorReply(`You must specify a video to watch and a title for the group watch.`);\r\n\t\t\tconst game = await YouTube.createGroupWatch(url, room, title);\r\n\t\t\tthis.modlog(`YOUTUBE GROUPWATCH`, null, `${url} (${title})`);\r\n\t\t\troom.add(\r\n\t\t\t\t`|uhtml|${game.id}|` +\r\n\t\t\t\t`<button class=\"button\" name=\"send\" value=\"/j view-groupwatch-${game.id}\">Join the ongoing group watch!</button>`\r\n\t\t\t);\r\n\t\t\troom.send(`|tempnotify|youtube|New groupwatch - ${title}!`);\r\n\t\t\tthis.update();\r\n\t\t},\r\n\t\tend(target, room, user) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tthis.checkCan('mute', null, room);\r\n\t\t\tconst game = this.requireGame(GroupWatch);\r\n\t\t\tthis.modlog(`GROUPWATCH END`);\r\n\t\t\tthis.add(`|uhtmlchange|${game.id}|`);\r\n\t\t\tgame.destroy();\r\n\t\t},\r\n\t\tstart(target, room, user) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tthis.checkCan('mute', null, room);\r\n\t\t\tconst game = this.requireGame(GroupWatch);\r\n\t\t\tgame.start();\r\n\t\t\tgame.update();\r\n\t\t},\r\n\t\tasync edit(target, room, user) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tthis.checkCan('mute', null, room);\r\n\t\t\tconst game = this.requireGame(GroupWatch);\r\n\t\t\tawait game.changeVideo(target);\r\n\t\t},\r\n\t\tlist() {\r\n\t\t\tlet buf = `<strong>Ongoing groupwatches:</strong><br />`;\r\n\t\t\tfor (const curRoom of Rooms.rooms.values()) {\r\n\t\t\t\tif (!curRoom.getGame(GroupWatch)) continue;\r\n\t\t\t\tbuf += `<button class=\"button\" name=\"send\" value=\"/j ${curRoom.roomid}\">${curRoom.title}</button>`;\r\n\t\t\t}\r\n\t\t\tthis.runBroadcast();\r\n\t\t\tthis.sendReplyBox(buf);\r\n\t\t},\r\n\t},\r\n\tgroupwatchhelp: [\r\n\t\t`/groupwatch create [link],[title] - create a groupwatch for the given Youtube or Twitch [link] with the [title]. Requires: % @ & #`,\r\n\t\t`/groupwatch end - End the current room's groupwatch, if one exists. Requires: % @ & #`,\r\n\t\t`/groupwatch start - Begin playback for the current groupwatch. Requires: % @ & #`,\r\n\t\t`/groupwatch edit [link] - Change the current groupwatch, if one exists, to be viewing the given [link]. Requires: % @ & #`,\r\n\t],\r\n\ttwitch: {\r\n\t\tasync channel(target, room, user) {\r\n\t\t\troom = this.requireRoom('youtube' as RoomID);\r\n\t\t\tif (!Config.twitchKey) return this.errorReply(`Twitch is not configured`);\r\n\t\t\tconst data = await Twitch.getChannel(target);\r\n\t\t\tif (!data) return this.errorReply(`Channel not found`);\r\n\t\t\tconst html = Twitch.visualizeChannel(data);\r\n\t\t\tthis.runBroadcast();\r\n\t\t\treturn this.sendReplyBox(html);\r\n\t\t},\r\n\t},\r\n};\r\n\r\nexport const pages: Chat.PageTable = {\r\n\tasync channels(args, user) {\r\n\t\tconst [type] = args;\r\n\t\tif (!Config.youtubeKey) return `<h2>Youtube is not configured.</h2>`;\r\n\t\tconst titles: {[k: string]: string} = {\r\n\t\t\tall: 'All channels',\r\n\t\t\tcategories: 'by category',\r\n\t\t};\r\n\t\tconst title = titles[type] || 'Usernames only';\r\n\t\tthis.title = `[Channels] ${title}`;\r\n\t\tlet buffer = `<div class=\"pad\"><h4>Channels in the YouTube database: (${title})`;\r\n\t\tbuffer += ` <button class=\"button\" name=\"send\" value=\"/join view-channels-${type}\" style=\"float: right\">Refresh</button>`;\r\n\t\tbuffer += `</h4><hr />`;\r\n\t\tswitch (toID(type)) {\r\n\t\tcase 'categories':\r\n\t\t\tif (!YouTube.data.categories.length) {\r\n\t\t\t\treturn this.errorReply(`There are currently no categories in the Youtube channel database.`);\r\n\t\t\t}\r\n\t\t\tconst sorted: {[k: string]: string[]} = {};\r\n\t\t\tconst channels = YouTube.data.channels;\r\n\t\t\tfor (const [id, channel] of Object.entries(channels)) {\r\n\t\t\t\tconst category = channel.category || \"No category\";\r\n\t\t\t\tif (!sorted[category]) {\r\n\t\t\t\t\tsorted[category] = [];\r\n\t\t\t\t}\r\n\t\t\t\tsorted[category].push(id);\r\n\t\t\t}\r\n\t\t\tfor (const cat in sorted) {\r\n\t\t\t\tbuffer += `<h3>${cat}:</h3>`;\r\n\t\t\t\tfor (const id of sorted[cat]) {\r\n\t\t\t\t\tconst channel = channels[id];\r\n\t\t\t\t\tbuffer += `<details><summary>${channel.name}</summary>`;\r\n\t\t\t\t\tbuffer += await YouTube.generateChannelDisplay(id);\r\n\t\t\t\t\tbuffer += `</details><br />`;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tfor (const id of Utils.shuffle(Object.keys(YouTube.data.channels))) {\r\n\t\t\t\tconst {name, username} = await YouTube.get(id);\r\n\t\t\t\tif (toID(type) !== 'all' && !username) continue;\r\n\t\t\t\tbuffer += `<details><summary>${name}`;\r\n\t\t\t\tbuffer += `<small><i> (Channel ID: ${id})</i></small>`;\r\n\t\t\t\tif (username) buffer += ` <small>(PS name: ${username})</small>`;\r\n\t\t\t\tbuffer += `</summary>`;\r\n\t\t\t\tbuffer += await YouTube.generateChannelDisplay(id);\r\n\t\t\t\tbuffer += `</details><hr/ >`;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tbuffer += `</div>`;\r\n\t\treturn buffer;\r\n\t},\r\n\tgroupwatch(query, user, connection) {\r\n\t\tif (!user.named) return Rooms.RETRY_AFTER_LOGIN;\r\n\t\tconst [roomid, num] = query;\r\n\t\tconst watch = GroupWatch.groupwatches.get(`${roomid}-${num}`);\r\n\t\tif (!watch) return this.errorReply(`Groupwatch ${roomid}-${num} not found.`);\r\n\t\tthis.title = `[Groupwatch] ${watch.title}`;\r\n\t\treturn watch.display();\r\n\t},\r\n};\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,iBAA6B;AAE7B,MAAM,OAAO;AACb,MAAM,eAAe;AACrB,MAAM,mBAAmB,CAAC,WAAW,gBAAgB,cAAc,aAAa,aAAa,OAAO;AAE7F,MAAM,iBAAyC,KAAK,WAAW,SAAS,kBAAkB,oBAAI,IAAI;AAClG,MAAM,kBAAyC,KAAK,WAAW,SAAS,mBAAmB,oBAAI,IAAI;AAiD1G,SAAS,WAAW;AACnB,QAAM,MAAiB,KAAK,UAAM,eAAG,YAAY,EAAE,iBAAiB,KAAK,IAAI;AAC7E,MAAI,EAAE,IAAI,YAAY,IAAI,aAAa;AACtC,UAAM,OAA6B,CAAC;AACpC,SAAK,WAAW;AAChB,SAAK,aAAa,CAAC;AAEnB,uBAAG,YAAY,EAAE,YAAY,MAAM,KAAK,UAAU,IAAI,CAAC;AACvD,WAAO;AAAA,EACR;AACA,SAAO;AACR;AAEA,MAAM,cAA2B,SAAS;AAEnC,MAAM,iBAAiB;AAAA,EAK7B,YAAY,MAAoB;AADhC,qBAAY;AAEX,SAAK,OAAO,OAAO,OAAO,EAAC,YAAY,CAAC,GAAG,UAAU,CAAC,EAAC;AACvD,SAAK,WAAW;AAChB,SAAK,eAAe;AACpB,QAAI,MAAM,cAAc;AACvB,WAAK,YAAY,GAAG,KAAK,cAAc;AAAA,IACxC;AAAA,EACD;AAAA,EACA,MAAM,eAAe,MAAc,UAAmB;AACrD,QAAI,CAAC,OAAO,YAAY;AACvB,YAAM,IAAI,KAAK,aAAa,0HAA0H;AAAA,IACvJ;AACA,UAAM,KAAK,KAAK,MAAM,IAAI;AAC1B,UAAM,MAAM,UAAM,gBAAI,GAAG,cAAc,EAAE,IAAI;AAAA,MAC5C,OAAO,EAAC,MAAM,sBAAsB,IAAI,KAAK,OAAO,WAAU;AAAA,IAC/D,CAAC;AACD,UAAM,MAAM,KAAK,MAAM,GAAG;AAC1B,QAAI,CAAC,KAAK,SAAS,IAAI,MAAM,SAAS,GAAG;AACxC,YAAM,IAAI,KAAK,aAAa,oBAAoB;AAAA,IACjD;AACA,UAAM,OAAO,IAAI,MAAM,CAAC;AACxB,UAAM,QAAsB;AAAA,MAC3B,MAAM,KAAK,QAAQ;AAAA,MACnB,aAAa,KAAK,QAAQ;AAAA,MAC1B,KAAK,KAAK,QAAQ;AAAA,MAClB,MAAM,KAAK,QAAQ,WAAW,OAAO;AAAA,MACrC,QAAQ,OAAO,KAAK,WAAW,UAAU;AAAA,MACzC,MAAM,OAAO,KAAK,WAAW,eAAe;AAAA,MAC5C,OAAO,OAAO,KAAK,WAAW,SAAS;AAAA,MACvC;AAAA,IACD;AACA,SAAK,KAAK,SAAS,EAAE,IAAI,EAAC,GAAG,MAAK;AAClC,SAAK,KAAK;AACV,WAAO;AAAA,EACR;AAAA,EACA,MAAM,uBAAuB,MAAc;AAC1C,UAAM,KAAK,KAAK,MAAM,IAAI;AAC1B,UAAM,EAAC,MAAM,aAAa,MAAM,QAAQ,MAAM,OAAO,SAAQ,IAAI,MAAM,KAAK,IAAI,EAAE;AAElF,QAAI,MAAM;AACV,WAAO;AACP,WAAO;AACP,WAAO,YAAY,eAAe,iBAAiB;AACnD,WAAO;AACP,WAAO,mGAAmG,OAAO;AACjH,WAAO;AACP,WAAO;AACP,WAAO,GAAG,mBAAmB,sBAAsB;AACnD,WAAO;AACP,WAAO,GAAG,YAAY,MAAM,GAAG,GAAG,EAAE,QAAQ,OAAO,GAAG,IAAI,YAAY,SAAS,MAAM,UAAU;AAC/F,QAAI,UAAU;AACb,aAAO,0EAA0E;AAAA,IAClF,OAAO;AACN,aAAO;AAAA,IACR;AACA,WAAO;AAAA,EACR;AAAA,EACA,YAAY,KAAc;AACzB,QAAI,WAAW,OAAO,KAAK,KAAK,KAAK,QAAQ;AAC7C,QAAI,SAAS,SAAS,GAAG;AACxB,YAAM,IAAI,KAAK,aAAa,wCAAwC;AAAA,IACrE;AACA,QAAI,KAAK;AACR,YAAM,KAAK,GAAG;AACd,YAAM,cAAc,KAAK,KAAK,WAAW,IAAI,IAAI;AACjD,UAAI,CAAC,YAAY,SAAS,GAAS,GAAG;AACrC,cAAM,IAAI,KAAK,aAAa,mBAAmB;AAAA,MAChD;AACA,iBAAW,SAAS,OAAO,CAAAA,QAAM;AAChC,cAAM,UAAU,KAAK,KAAK,SAASA,GAAE;AACrC,eAAO,QAAQ,YAAY,KAAK,QAAQ,QAAQ,MAAM;AAAA,MACvD,CAAC;AAAA,IACF;AAEA,UAAM,KAAK,iBAAM,QAAQ,QAAQ,EAAE,CAAC;AACpC,WAAO,KAAK,uBAAuB,EAAE;AAAA,EACtC;AAAA,EACA,IAAI,IAAY,UAA0C;AACzD,QAAI,EAAE,MAAM,KAAK,KAAK;AAAW,aAAO,KAAK,eAAe,IAAI,QAAQ;AACxE,WAAO,QAAQ,QAAQ,EAAC,GAAG,KAAK,KAAK,SAAS,EAAE,EAAC,CAAC;AAAA,EACnD;AAAA,EACA,MAAM,aAAa,IAAuC;AACzD,UAAM,SAAS,eAAe,IAAI,EAAE;AACpC,QAAI;AAAQ,aAAO;AACnB,QAAI;AACJ,QAAI;AACH,YAAM,UAAM,gBAAI,GAAG,YAAY,EAAE,IAAI;AAAA,QACpC,OAAO,EAAC,MAAM,sBAAsB,IAAI,KAAK,OAAO,WAAU;AAAA,MAC/D,CAAC;AAAA,IACF,SAAS,GAAP;AACD,YAAM,IAAI,KAAK,aAAa,kCAAkC,EAAE,UAAU;AAAA,IAC3E;AACA,UAAM,MAAM,KAAK,MAAM,GAAG;AAC1B,QAAI,CAAC,KAAK,SAAS,IAAI,MAAM,SAAS;AAAG,aAAO;AAChD,UAAM,QAAQ,IAAI,MAAM,CAAC;AACzB,UAAM,OAAkB;AAAA,MACvB,OAAO,MAAM,QAAQ;AAAA,MACrB;AAAA,MACA,MAAM,IAAI,KAAK,MAAM,QAAQ,WAAW,EAAE,SAAS;AAAA,MACnD,aAAa,MAAM,QAAQ;AAAA,MAC3B,cAAc,MAAM,QAAQ;AAAA,MAC5B,YAAY,MAAM,QAAQ;AAAA,MAC1B,OAAO,MAAM,WAAW;AAAA,MACxB,WAAW,MAAM,QAAQ,WAAW,QAAQ;AAAA,MAC5C,OAAO,MAAM,WAAW;AAAA,MACxB,UAAU,MAAM,WAAW;AAAA,IAC5B;AACA,mBAAe,IAAI,IAAI,IAAI;AAC3B,WAAO;AAAA,EACR;AAAA,EACA,cAAc,QAAgB;AAC7B,QAAI;AACJ,QAAI,KAAK,KAAK,SAAS,MAAM,GAAG;AAC/B,gBAAU;AAAA,IACX,OAAO;AACN,iBAAW,MAAM,OAAO,KAAK,KAAK,KAAK,QAAQ,GAAG;AACjD,cAAM,OAAO,KAAK,KAAK,KAAK,SAAS,EAAE,EAAE,IAAI;AAC7C,cAAM,WAAW,KAAK,KAAK,SAAS,EAAE,EAAE;AACxC,YAAI,SAAS,KAAK,MAAM,KAAK,YAAY,KAAK,QAAQ,MAAM,KAAK,MAAM,GAAG;AACzE,oBAAU;AACV;AAAA,QACD;AAAA,MACD;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,MAAM,MAAc;AACnB,QAAI,KAAK;AACT,QAAI,CAAC;AAAM,YAAM,IAAI,KAAK,aAAa,kCAAkC;AACzE,QAAI,KAAK,KAAK,SAAS,IAAI;AAAG,aAAO;AACrC,QAAI,CAAC,KAAK,SAAS,UAAU,GAAG;AAC/B,UAAI,KAAK,SAAS,SAAS,GAAG;AAC7B,aAAK,KAAK,MAAM,IAAI,EAAE,CAAC,KAAK;AAAA,MAC7B,WAAW,KAAK,SAAS,UAAU,GAAG;AACrC,aAAK,KAAK,MAAM,GAAG,EAAE,CAAC,KAAK;AAAA,MAC5B,OAAO;AACN,cAAM,IAAI,KAAK,aAAa,+BAA+B;AAAA,MAC5D;AAAA,IACD,OAAO;AACN,WAAK,KAAK,MAAM,UAAU,EAAE,CAAC,KAAK;AAAA,IACnC;AACA,QAAI,GAAG,SAAS,GAAG;AAAG,WAAK,GAAG,MAAM,GAAG,EAAE,CAAC;AAC1C,QAAI,GAAG,SAAS,GAAG;AAAG,WAAK,GAAG,MAAM,GAAG,EAAE,CAAC;AAC1C,WAAO;AAAA,EACR;AAAA,EACA,MAAM,qBAAqB,MAAc,WAAW,OAAO,eAAe,OAAO;AAChF,QAAI,CAAC,OAAO,YAAY;AACvB,YAAM,IAAI,KAAK,aAAa,0HAA0H;AAAA,IACvJ;AACA,UAAM,KAAK,KAAK,MAAM,IAAI;AAC1B,UAAM,OAAO,MAAM,KAAK,aAAa,EAAE;AACvC,QAAI,CAAC;AAAM,YAAM,IAAI,KAAK,aAAa,kBAAkB;AACzD,QAAI,CAAC,UAAU;AACd,UAAIC,OAAM,MAAM,KAAK;AACrB,MAAAA,QAAO,wDAAwD,KAAK,eAAe,KAAK;AACxF,UAAI,cAAc;AACjB,QAAAA,QAAO,mFAAmF;AAC1F,QAAAA,QAAO,kBAAkB,KAAK;AAAA,MAC/B,OAAO;AACN,QAAAA,QAAO,+CAA+C;AAAA,MACvD;AACA,aAAOA;AAAA,IACR;AACA,QAAI,MAAM;AACV,WAAO;AACP,WAAO;AACP,WAAO,YAAY,eAAe,iBAAiB,KAAK;AACxD,WAAO;AACP,WAAO,mGAAmG,OAAO,KAAK;AACtH,WAAO;AACP,WAAO;AACP,WAAO;AACP,WAAO,GAAG,KAAK,iBAAiB,KAAK,uBAAuB,KAAK;AACjE,WAAO,uBAAuB,KAAK,cAAc,8BAA8B,KAAK;AACpF,WAAO;AACP,WAAO;AACP,WAAO,MAAM,KAAK,YAAY,MAAM,GAAG,GAAG,EAAE,QAAQ,OAAO,GAAG,IAAI,KAAK,YAAY,SAAS,MAAM,UAAU;AAC5G,WAAO;AAAA,EACR;AAAA,EACA,OAAO;AACN,eAAO,eAAG,YAAY,EAAE,YAAY,MAAM,KAAK,UAAU,KAAK,IAAI,CAAC;AAAA,EACpE;AAAA,EACA,MAAM,YAAY,MAAc,OAA+C;AAC9E,UAAM,SAAS,gBAAgB,IAAI,KAAK,IAAI,CAAC;AAC7C,QAAI,QAAQ;AACX,aAAO,OAAO,MAAM,GAAG,KAAK;AAAA,IAC7B;AACA,UAAM,MAAM,UAAM,gBAAI,GAAG,YAAY,EAAE,IAAI;AAAA,MAC1C,OAAO;AAAA,QACN,MAAM;AAAA,QAAW,GAAG;AAAA,QACpB,KAAK,OAAO;AAAA,QAAY,OAAO;AAAA,MAChC;AAAA,IACD,CAAC;AACD,UAAM,SAAS,KAAK,MAAM,GAAG;AAC7B,UAAM,cAAc,OAAO,OAAO,IAAI,CAAC,SAAoB,MAAM,IAAI,OAAO,EAAE,OAAO,OAAO;AAC5F,oBAAgB,IAAI,KAAK,IAAI,GAAG,WAAW;AAC3C,WAAO,YAAY,MAAM,GAAG,KAAK;AAAA,EAClC;AAAA,EACA,MAAM,cAAc,MAAc,QAAQ,IAAmC;AAC5E,UAAM,MAAM,UAAM,gBAAI,GAAG,YAAY,EAAE,IAAI;AAAA,MAC1C,OAAO;AAAA,QACN,MAAM;AAAA,QAAW,GAAG;AAAA,QAAM,MAAM;AAAA,QAChC,KAAK,OAAO;AAAA,QAAY,OAAO;AAAA,QAAa,YAAY;AAAA,MACzD;AAAA,IACD,CAAC;AACD,UAAM,SAAS,KAAK,MAAM,GAAG;AAC7B,WAAO,QAAQ,MAAM,IAAI,CAAC,SAAoB,MAAM,SAAS,SAAS;AAAA,EACvE;AAAA,EACA,YAAY,MAAc;AACzB,QAAI,WAAW,OAAO,IAAI;AAC1B,QAAI,WAAW;AAAI,YAAM,IAAI,KAAK,aAAa,GAAG,gDAAgD;AAClG,SAAK,eAAe;AACpB,SAAK,KAAK,eAAe;AACzB,eAAW,WAAW,KAAK;AAC3B,QAAI,KAAK;AAAU,oBAAc,KAAK,QAAQ;AAC9C,SAAK,WAAW,YAAY,MAAM;AACjC,YAAM,YAAY;AACjB,cAAM,OAAO,MAAM,IAAI,SAAS;AAChC,YAAI,CAAC;AAAM;AACX,cAAM,MAAM,MAAM,QAAQ,YAAY;AACtC,aAAK,IAAI,SAAS,KAAK,EAAE,OAAO;AAAA,MACjC,GAAG;AAAA,IACJ,GAAG,QAAQ;AACX,WAAO,KAAK;AAAA,EACb;AAAA,EACA,MAAM,iBAAiB,KAAa,UAAgB,OAAe;AAClE,UAAM,YAAY,MAAM,KAAK,kBAAkB,GAAG;AAClD,UAAM,MAAM,SAAS,eAAe;AACpC,aAAS,aAAa;AACtB,WAAO,IAAI,WAAW,UAAU,KAAK,KAAK,OAAO,SAAS;AAAA,EAC3D;AAAA,EACA,MAAM,kBAAkB,KAAa;AACpC,QAAI,CAAC,KAAK,OAAO,GAAG,GAAG;AACtB,YAAM,IAAI,KAAK,aAAa,kBAAkB,GAAG;AAAA,IAClD;AACA,UAAM,UAAU,IAAI,IAAI,GAAG;AAC3B,UAAM,OAAO,QAAQ;AACrB,QAAI;AACJ,QAAI,CAAC,YAAY,iBAAiB,EAAE,SAAS,IAAI,GAAG;AACnD,YAAM,KAAK,KAAK,MAAM,GAAG;AACzB,YAAM,OAAO,MAAM,KAAK,aAAa,EAAE;AACvC,UAAI,CAAC;AAAM,cAAM,IAAI,KAAK,aAAa,kBAAkB;AACzD,kBAAY,OAAO,OAAO,MAAM,EAAC,gBAAgB,UAAS,CAAC;AAAA,IAC5D,WAAW,SAAS,iBAAiB;AACpC,YAAM,OAAO,MAAM,OAAO,WAAW,QAAQ,SAAS,MAAM,CAAC,CAAC;AAC9D,UAAI,CAAC;AAAM,cAAM,IAAI,KAAK,aAAa,mBAAmB;AAC1D,kBAAY,OAAO,OAAO,MAAM,EAAC,gBAAgB,SAAQ,CAAC;AAAA,IAC3D,OAAO;AACN,YAAM,IAAI,KAAK,aAAa,uDAAuD;AAAA,IACpF;AACA,WAAO;AAAA,EACR;AACD;AAEO,MAAM,SAAS,IAAI,MAAM;AAAA,EAAN;AACzB,qBAAY;AAAA;AAAA,EACZ,MAAM,WAAW,SAAqD;AACrE,QAAI,CAAC,OAAO,aAAa,OAAO,OAAO,cAAc,UAAU;AAC9D,YAAM,IAAI,KAAK,aAAa,wBAAwB;AAAA,IACrD;AACA,cAAU,KAAK,OAAO;AACtB,QAAI;AACJ,QAAI;AACH,YAAM,UAAM,gBAAI,6CAA6C,EAAE,IAAI;AAAA,QAClE,SAAS;AAAA,UACR,iBAAiB,UAAU,OAAO,UAAU;AAAA,UAC5C,aAAa,OAAO,UAAU;AAAA,UAC9B,gBAAgB;AAAA,UAChB,UAAU;AAAA,QACX;AAAA,QACA,OAAO,EAAC,OAAO,QAAO;AAAA,MACvB,CAAC;AAAA,IACF,SAAS,GAAP;AACD,YAAM,IAAI,KAAK,aAAa,oCAAoC,EAAE,SAAS;AAAA,IAC5E;AACA,UAAM,OAAO,KAAK,MAAM,GAAG;AAC3B,qBAAM,OAAO,KAAK,UAAyB,OAAK,CAAC,EAAE,SAAS;AAC5D,WAAO,MAAM,WAAW,CAAC;AAAA,EAC1B;AAAA,EACA,iBAAiB,MAAqB;AACrC,QAAI,MAAM;AACV,WAAO;AACP,WAAO;AACP,WAAO,YAAY,KAAK,kBAAkB,KAAK;AAC/C,WAAO;AACP,WAAO,mEAAmE,KAAK,SAAS,KAAK;AAC7F,WAAO;AACP,WAAO;AACP,UAAM,UAAU,IAAI,KAAK,KAAK,UAAU;AACxC,WAAO,GAAG,KAAK,2BAA2B,KAAK,gCAAgC,KAAK,YAAY,OAAO,EAAE,MAAM,GAAG,EAAE,CAAC;AACrH,WAAO,2DAA2D,KAAK,iBAAiB,KAAK;AAC7F,WAAO;AACP,WAAO,GAAG,KAAK,YAAY,MAAM,GAAG,GAAG,EAAE,QAAQ,OAAO,GAAG,IAAI,KAAK,YAAY,SAAS,MAAM,QAAQ;AACvG,WAAO;AACP,WAAO;AAAA,EACR;AACD;AAGO,MAAM,cAAN,cAAyB,MAAM,eAAe;AAAA,EAOpD,YAAY,MAAY,KAAa,KAAa,OAAe,WAA2B;AAC3F,UAAM,IAAI;AAPX,SAAkB,SAAS;AAG3B,mBAAyB;AAKxB,SAAK,QAAQ;AACb,SAAK,KAAK,GAAG,KAAK,UAAU;AAC5B,gBAAW,aAAa,IAAI,KAAK,IAAI,IAAI;AACzC,SAAK,MAAM;AACX,SAAK,OAAO;AAAA,EACb;AAAA,EACA,OAAO,MAAY;AAClB,UAAM,QAAQ,KAAK,MAAM;AACzB,eAAW,QAAQ,OAAO;AACzB,WAAK,OAAO,KAAK,KAAK,QAAQ,SAAS,MAAM;AAAA,IAC9C;AAAA,EACD;AAAA,EACA,QAAQ;AACP,QAAI,KAAK;AAAS,YAAM,IAAI,KAAK,aAAa,wBAAwB;AACtE,SAAK,UAAU,KAAK,IAAI;AACxB,SAAK,OAAO;AAAA,EACb;AAAA,EACA,QAAQ;AACP,UAAM,QAAQ,KAAK,KAAK,mBAAmB,YAAY,KAAK,KAAK,QAAQ,KAAK,KAAK;AACnF,UAAM,QAAQ;AAAA,MACb;AAAA,MACA,uCAAuC,KAAK,QAAQ;AAAA,IACrD;AACA,QAAI,KAAK,WAAW,KAAK,KAAK,mBAAmB,WAAW;AAC3D,YAAM,OAAO,KAAK,IAAI,IAAI,KAAK;AAC/B,YAAM,KAAK,yBAAyB,KAAK,iBAAiB,IAAI,MAAM,KAAK,MAAM,OAAO,GAAI,YAAY;AAAA,IACvG;AACA,WAAO;AAAA,EACR;AAAA,EACA,kBAAkB;AACjB,QAAI,KAAK,KAAK,mBAAmB,UAAU;AAC1C,UAAI,MAAM;AACV,aAAO,6BAA6B,KAAK,KAAK,uBAAuB,KAAK,KAAK;AAC/E,aAAO,GAAG,KAAK,MAAM,OAAO,KAAK,KAAK,KAAK,KAAK,EAAE,QAAQ,OAAO;AACjE,aAAO,oBAAoB,KAAK,KAAK;AACrC,aAAO;AAAA,IACR;AACA,QAAI,eAAe,OAAO,KAAK,KAAK;AACpC,oBAAgB;AAChB,oBAAgB,4CAA4C,KAAK,KAAK,eAAe,KAAK,KAAK;AAC/F,oBAAgB,iBAAiB,KAAK,KAAK,4BAA4B,KAAK,KAAK;AACjF,oBAAgB,0BAA0B,IAAI,KAAK,KAAK,KAAK,IAAI,EAAE,YAAY;AAC/E,oBAAgB,0CAA0C,KAAK,KAAK,YAAY,QAAQ,QAAQ,QAAQ;AACxG,oBAAgB;AAChB,WAAO;AAAA,EACR;AAAA,EACA,kBAAkB;AACjB,QAAI,KAAK,KAAK,mBAAmB,UAAU;AAC1C,UAAIA,OAAM;AACV,MAAAA,QAAO,gBAAgB,KAAK,KAAK;AACjC,aAAOA;AAAA,IACR;AACA,QAAI,MAAM;AACV,WAAO,kBAAkB,KAAK,KAAK;AACnC,UAAM,KAAK,QAAQ,MAAM,KAAK,GAAG;AACjC,UAAM,MAAM,+BAA+B;AAC3C,QAAI,WAAW;AACf,QAAI,KAAK,SAAS;AACjB,YAAM,OAAO,KAAK,IAAI,IAAI,KAAK;AAC/B,iBAAW,UAAU,KAAK,MAAM,OAAO,GAAI;AAAA,IAC5C;AACA,WAAO,iBAAiB,MAAM;AAC9B,WAAO,SAAS,OAAO,CAAC;AACxB,WAAO;AACP,WAAO;AAAA,EACR;AAAA,EACA,UAAU;AACT,WACC,iBAAM,wCAAwC,KAAK,KAAK,sBAAsB,KAAK,+BACnF,MAAM,KAAK,UAAU,KAAK,gBAAgB,IAAI,kBACxC,KAAK,UAAU,KAAK,gBAAgB,IAAI,gDACxC,KAAK,MAAM,EAAE,KAAK,QAAQ;AAAA,EAElC;AAAA,EACA,SAAS;AACR,eAAW,QAAQ,OAAO,OAAO,KAAK,KAAK,KAAK,GAAG;AAClD,iBAAW,QAAQ,KAAK,aAAa;AACpC,YAAI,KAAK,WAAW,IAAI,cAAc,KAAK,IAAI,GAAG;AACjD,eAAK,KAAK,MAAM,sBAAsB,KAAK,MAAM,KAAK,MAAM,MAAM,IAAI;AAAA,QACvE;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EACA,MAAM,YAAY,KAAa;AAC9B,UAAM,OAAO,MAAM,QAAQ,kBAAkB,GAAG;AAChD,QAAI,CAAC;AAAM,YAAM,IAAI,KAAK,aAAa,mCAAmC,KAAK;AAC/E,SAAK,MAAM;AACX,SAAK,UAAU,KAAK,IAAI;AACxB,SAAK,OAAO;AACZ,SAAK,OAAO;AAAA,EACb;AAAA,EACA,UAAU;AACT,gBAAW,aAAa,OAAO,KAAK,EAAE;AACtC,SAAK,KAAK,OAAO;AACjB,SAAK,OAAO;AAAA,EACb;AACD;AAzGO,IAAM,aAAN;AAAM,WAML,eAAe,oBAAI,IAAwB;AAqG5C,MAAM,UAAU,IAAI,iBAAiB,WAAW;AAEhD,SAAS,UAAU;AACzB,MAAI,QAAQ;AAAU,kBAAc,QAAQ,QAAQ;AACrD;AAEO,MAAM,WAA8B;AAAA,EAC1C,MAAM,YAAY,QAAQ,MAAM,MAAM;AACrC,WAAO,KAAK,YAAY,SAAmB;AAC3C,QAAI,OAAO,KAAK,QAAQ,KAAK,QAAQ,EAAE,SAAS;AAAG,aAAO,KAAK,WAAW,8BAA8B;AACxG,aAAS,KAAK,MAAM;AACpB,SAAK,aAAa;AAClB,UAAM,OAAO,MAAM,QAAQ,YAAY,MAAM;AAC7C,WAAO,KAAK,UAAU,SAAS,MAAM;AAAA,EACtC;AAAA,EACA,iBAAiB,CAAC,yEAAyE;AAAA,EAE3F,IAAI;AAAA,EACJ,SAAS;AAAA,IACR,MAAM,WAAW,QAAQ,MAAM,MAAM;AACpC,aAAO,KAAK,YAAY,SAAmB;AAC3C,WAAK,SAAS,QAAQ,MAAM,IAAI;AAChC,YAAM,CAAC,IAAI,IAAI,IAAI,OAAO,MAAM,GAAG,EAAE,IAAI,OAAK,EAAE,KAAK,CAAC;AACtD,UAAI,CAAC;AAAI,eAAO,KAAK,WAAW,uBAAuB;AACvD,YAAM,QAAQ,eAAe,IAAI,IAAI;AACrC,WAAK,OAAO,cAAc,MAAM,GAAG,MAAM,OAAO,aAAa,SAAS,IAAI;AAC1E,aAAO,KAAK;AAAA,QACX,GAAG,KAAK,8BAA8B,MAAM,OAAO,iBAAiB,WAAW;AAAA,MAChF;AAAA,IACD;AAAA,IACA,gBAAgB,CAAC,yEAAyE;AAAA,IAE1F,cAAc,QAAQ,MAAM,MAAM;AACjC,aAAO,KAAK,YAAY,SAAmB;AAC3C,WAAK,SAAS,QAAQ,MAAM,IAAI;AAChC,YAAM,KAAK,QAAQ,cAAc,MAAM;AACvC,UAAI,CAAC;AAAI,eAAO,KAAK,WAAW,2BAA2B,mBAAmB;AAC9E,aAAO,QAAQ,KAAK,SAAS,EAAE;AAC/B,cAAQ,KAAK;AACb,WAAK,iBAAiB,GAAG,KAAK,wCAAwC,SAAS;AAC/E,aAAO,KAAK,OAAO,iBAAiB,MAAM,EAAE;AAAA,IAC7C;AAAA,IACA,mBAAmB,CAAC,yFAAyF;AAAA,IAE7G,MAAM,QAAQ,QAAQ,MAAM,MAAM;AACjC,aAAO,KAAK,YAAY,SAAmB;AAC3C,YAAM,UAAU,QAAQ,cAAc,MAAM;AAC5C,UAAI,CAAC;AAAS,eAAO,KAAK,WAAW,+BAA+B,eAAe;AACnF,YAAM,OAAO,MAAM,QAAQ,uBAAuB,OAAO;AACzD,WAAK,aAAa;AAClB,aAAO,KAAK,UAAU,SAAS,MAAM;AAAA,IACtC;AAAA,IACA,aAAa;AAAA,MACZ;AAAA,IACD;AAAA,IACA,MAAM,MAAM,QAAQ,MAAM,MAAM;AAC/B,aAAO,KAAK,YAAY,SAAmB;AAC3C,WAAK,SAAS,QAAQ,MAAM,IAAI;AAChC,YAAM,SAAS,MAAM,QAAQ,qBAAqB,QAAQ,IAAI;AAC9D,WAAK,aAAa;AAClB,WAAK,aAAa,MAAM;AAAA,IACzB;AAAA,IAEA,SAAS,QAAQ,MAAM,MAAM;AAC5B,eAAS,KAAK,MAAM;AACpB,aAAO,KAAK,MAAM,mBAAmB,SAAS,IAAI,WAAW,IAAI;AAAA,IAClE;AAAA,IACA,KAAK,QAAQ,MAAM,MAAM;AACxB,aAAO,KAAK,MAAM,eAAe;AAAA,IAClC;AAAA,IAEA,aAAa;AACZ,aAAO,KAAK,MAAM,6BAA6B;AAAA,IAChD;AAAA,IAEA,OAAO,QAAQ,MAAM,MAAM;AAC1B,aAAO,KAAK,YAAY,SAAmB;AAC3C,WAAK,SAAS,QAAQ,MAAM,IAAI;AAChC,YAAM,CAAC,SAAS,IAAI,IAAI,OAAO,MAAM,GAAG;AACxC,YAAM,KAAK,QAAQ,cAAc,OAAO;AACxC,UAAI,CAAC;AAAI,eAAO,KAAK,WAAW,WAAW,iCAAiC;AAC5E,cAAQ,KAAK,SAAS,EAAE,EAAE,WAAW;AACrC,WAAK,OAAO,iBAAiB,MAAM,IAAI;AACvC,WAAK,iBAAiB,GAAG,KAAK,wBAAwB,oBAAoB,OAAO;AACjF,cAAQ,KAAK;AAAA,IACd;AAAA,IACA,UAAU;AAAA,IACV,OAAO,QAAQ,MAAM,MAAM;AAC1B,aAAO,KAAK,YAAY,SAAmB;AAC3C,WAAK,SAAS,WAAW,MAAM,IAAI;AACnC,UAAI,CAAC,QAAQ;AACZ,YAAI,CAAC,QAAQ;AAAU,iBAAO,KAAK,WAAW,0DAA0D;AACxG,eAAO,KAAK,UAAU,gCAAgC,KAAK,iBAAiB,QAAQ,eAAe,KAAK,GAAI,IAAI;AAAA,MACjH;AACA,UAAI,KAAK,QAAQ,MAAM,GAAG;AACzB,YAAI,CAAC,QAAQ;AAAU,iBAAO,KAAK,WAAW,uCAAuC;AACrF,sBAAc,QAAQ,QAAQ;AAC9B,eAAO,QAAQ,KAAK;AACpB,gBAAQ,KAAK;AACb,aAAK,iBAAiB,GAAG,KAAK,sCAAsC;AACpE,eAAO,KAAK,OAAO,oBAAoB,MAAM,KAAK;AAAA,MACnD;AACA,UAAI,OAAO,KAAK,WAAW,EAAE,SAAS;AAAG,eAAO,KAAK,WAAW,8BAA8B;AAC9F,UAAI,MAAM,SAAS,MAAM,CAAC;AAAG,eAAO,KAAK,WAAW,iDAAiD;AACrG,cAAQ,YAAY,MAAM;AAC1B,cAAQ,KAAK;AACb,WAAK,iBAAiB,GAAG,KAAK,sCAAsC,gBAAgB;AACpF,aAAO,KAAK,OAAO,mBAAmB,MAAM,GAAG,gBAAgB;AAAA,IAChE;AAAA,IACA,YAAY,QAAQ,MAAM,MAAM;AAC/B,aAAO,KAAK,YAAY,SAAmB;AAC3C,WAAK,SAAS,QAAQ,MAAM,IAAI;AAChC,YAAM,aAAa,KAAK,MAAM;AAC9B,UAAI,CAAC;AAAY,eAAO,KAAK,MAAM,eAAe;AAClD,UAAI,QAAQ,KAAK,WAAW,IAAI,IAAI,EAAE,SAAS,UAAU,GAAG;AAC3D,eAAO,KAAK,WAAW,wEAAwE;AAAA,MAChG;AACA,cAAQ,KAAK,WAAW,KAAK,MAAM;AACnC,WAAK,OAAO,uBAAuB,MAAM,MAAM;AAC/C,WAAK,iBAAiB,GAAG,KAAK,wBAAwB,iCAAiC;AACvF,cAAQ,KAAK;AAAA,IACd;AAAA,IACA,eAAe,QAAQ,MAAM,MAAM;AAClC,aAAO,KAAK,YAAY,SAAmB;AAC3C,WAAK,SAAS,QAAQ,MAAM,IAAI;AAChC,YAAM,aAAa,KAAK,MAAM;AAC9B,UAAI,CAAC;AAAY,eAAO,KAAK,MAAM,eAAe;AAClD,YAAM,QAAQ,QAAQ,KAAK,WAAW,QAAQ,MAAM;AACpD,UAAI,QAAQ,GAAG;AACd,eAAO,KAAK,WAAW,GAAG,iCAAiC;AAAA,MAC5D;AACA,iBAAW,MAAM,QAAQ,KAAK,UAAU;AACvC,cAAM,UAAU,QAAQ,KAAK,SAAS,EAAE;AACxC,YAAI,QAAQ,aAAa;AAAQ,iBAAO,QAAQ,KAAK,SAAS,EAAE,EAAE;AAAA,MACnE;AACA,cAAQ,KAAK;AACb,WAAK,iBAAiB,GAAG,KAAK,8BAA8B,iCAAiC;AAC7F,WAAK,OAAO,0BAA0B,MAAM,MAAM;AAAA,IACnD;AAAA,IACA,YAAY,QAAQ,MAAM,MAAM;AAC/B,aAAO,KAAK,YAAY,SAAmB;AAC3C,WAAK,SAAS,QAAQ,MAAM,IAAI;AAChC,eAAS,OAAO,KAAK;AACrB,YAAM,CAAC,UAAU,EAAE,IAAI,iBAAM,WAAW,QAAQ,GAAG,EAAE,IAAI,UAAQ,KAAK,KAAK,CAAC;AAC5E,UAAI,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI;AAChC,eAAO,KAAK,MAAM,eAAe;AAAA,MAClC;AACA,UAAI,CAAC,QAAQ,KAAK,WAAW,SAAS,QAAQ,GAAG;AAChD,eAAO,KAAK,WAAW,mBAAmB;AAAA,MAC3C;AACA,YAAM,OAAO,QAAQ,cAAc,EAAE;AACrC,UAAI,CAAC;AAAM,eAAO,KAAK,WAAW,kBAAkB;AACpD,YAAM,UAAU,QAAQ,KAAK,SAAS,IAAI;AAC1C,cAAQ,KAAK,SAAS,IAAI,EAAE,WAAW;AACvC,cAAQ,KAAK;AACb,WAAK,OAAO,uBAAuB,MAAM,GAAG,mBAAmB,UAAU;AACzE,WAAK,iBAAiB,GAAG,KAAK,wBAAwB,QAAQ,uBAAuB,YAAY;AAAA,IAClG;AAAA,IACA,aAAa,QAAQ,MAAM,MAAM;AAChC,aAAO,KAAK,YAAY,SAAmB;AAC3C,WAAK,SAAS,QAAQ,MAAM,IAAI;AAChC,eAAS,OAAO,KAAK;AACrB,UAAI,CAAC,QAAQ;AACZ,eAAO,KAAK,MAAM,eAAe;AAAA,MAClC;AACA,YAAM,OAAO,QAAQ,cAAc,MAAM;AACzC,UAAI,CAAC;AAAM,eAAO,KAAK,WAAW,kBAAkB;AACpD,YAAM,UAAU,QAAQ,KAAK,SAAS,IAAI;AAC1C,YAAM,WAAW,QAAQ;AACzB,UAAI,CAAC;AAAU,eAAO,KAAK,WAAW,wCAAwC;AAC9E,aAAO,QAAQ;AACf,cAAQ,KAAK;AACb,WAAK,OAAO,wBAAwB,MAAM,MAAM;AAChD,WAAK,iBAAiB,GAAG,KAAK,4BAA4B,QAAQ,0BAA0B,WAAW;AAAA,IACxG;AAAA,EACD;AAAA,EACA,aAAa;AAAA,IACZ;AAAA,IACA;AAAA,IAEA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACD;AAAA,EACA,YAAY;AAAA,IACX,MAAM,OAAO,QAAQ,MAAM,MAAM;AAChC,aAAO,KAAK,YAAY;AACxB,UAAI,CAAC,iBAAiB,SAAS,KAAK,MAAM,GAAG;AAC5C,eAAO,KAAK,WAAW,0DAA0D;AAAA,MAClF;AACA,WAAK,SAAS,QAAQ,MAAM,IAAI;AAChC,YAAM,CAAC,KAAK,KAAK,IAAI,iBAAM,WAAW,QAAQ,GAAG,EAAE,IAAI,OAAK,EAAE,KAAK,CAAC;AACpE,UAAI,CAAC,OAAO,CAAC;AAAO,eAAO,KAAK,WAAW,oEAAoE;AAC/G,YAAM,OAAO,MAAM,QAAQ,iBAAiB,KAAK,MAAM,KAAK;AAC5D,WAAK,OAAO,sBAAsB,MAAM,GAAG,QAAQ,QAAQ;AAC3D,WAAK;AAAA,QACJ,UAAU,KAAK,mEACiD,KAAK;AAAA,MACtE;AACA,WAAK,KAAK,wCAAwC,QAAQ;AAC1D,WAAK,OAAO;AAAA,IACb;AAAA,IACA,IAAI,QAAQ,MAAM,MAAM;AACvB,aAAO,KAAK,YAAY;AACxB,WAAK,SAAS,QAAQ,MAAM,IAAI;AAChC,YAAM,OAAO,KAAK,YAAY,UAAU;AACxC,WAAK,OAAO,gBAAgB;AAC5B,WAAK,IAAI,gBAAgB,KAAK,KAAK;AACnC,WAAK,QAAQ;AAAA,IACd;AAAA,IACA,MAAM,QAAQ,MAAM,MAAM;AACzB,aAAO,KAAK,YAAY;AACxB,WAAK,SAAS,QAAQ,MAAM,IAAI;AAChC,YAAM,OAAO,KAAK,YAAY,UAAU;AACxC,WAAK,MAAM;AACX,WAAK,OAAO;AAAA,IACb;AAAA,IACA,MAAM,KAAK,QAAQ,MAAM,MAAM;AAC9B,aAAO,KAAK,YAAY;AACxB,WAAK,SAAS,QAAQ,MAAM,IAAI;AAChC,YAAM,OAAO,KAAK,YAAY,UAAU;AACxC,YAAM,KAAK,YAAY,MAAM;AAAA,IAC9B;AAAA,IACA,OAAO;AACN,UAAI,MAAM;AACV,iBAAW,WAAW,MAAM,MAAM,OAAO,GAAG;AAC3C,YAAI,CAAC,QAAQ,QAAQ,UAAU;AAAG;AAClC,eAAO,gDAAgD,QAAQ,WAAW,QAAQ;AAAA,MACnF;AACA,WAAK,aAAa;AAClB,WAAK,aAAa,GAAG;AAAA,IACtB;AAAA,EACD;AAAA,EACA,gBAAgB;AAAA,IACf;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACD;AAAA,EACA,QAAQ;AAAA,IACP,MAAM,QAAQ,QAAQ,MAAM,MAAM;AACjC,aAAO,KAAK,YAAY,SAAmB;AAC3C,UAAI,CAAC,OAAO;AAAW,eAAO,KAAK,WAAW,0BAA0B;AACxE,YAAM,OAAO,MAAM,OAAO,WAAW,MAAM;AAC3C,UAAI,CAAC;AAAM,eAAO,KAAK,WAAW,mBAAmB;AACrD,YAAM,OAAO,OAAO,iBAAiB,IAAI;AACzC,WAAK,aAAa;AAClB,aAAO,KAAK,aAAa,IAAI;AAAA,IAC9B;AAAA,EACD;AACD;AAEO,MAAM,QAAwB;AAAA,EACpC,MAAM,SAAS,MAAM,MAAM;AAC1B,UAAM,CAAC,IAAI,IAAI;AACf,QAAI,CAAC,OAAO;AAAY,aAAO;AAC/B,UAAM,SAAgC;AAAA,MACrC,KAAK;AAAA,MACL,YAAY;AAAA,IACb;AACA,UAAM,QAAQ,OAAO,IAAI,KAAK;AAC9B,SAAK,QAAQ,cAAc;AAC3B,QAAI,SAAS,2DAA2D;AACxE,cAAU,kEAAkE;AAC5E,cAAU;AACV,YAAQ,KAAK,IAAI,GAAG;AAAA,MACpB,KAAK;AACJ,YAAI,CAAC,QAAQ,KAAK,WAAW,QAAQ;AACpC,iBAAO,KAAK,WAAW,oEAAoE;AAAA,QAC5F;AACA,cAAM,SAAkC,CAAC;AACzC,cAAM,WAAW,QAAQ,KAAK;AAC9B,mBAAW,CAAC,IAAI,OAAO,KAAK,OAAO,QAAQ,QAAQ,GAAG;AACrD,gBAAM,WAAW,QAAQ,YAAY;AACrC,cAAI,CAAC,OAAO,QAAQ,GAAG;AACtB,mBAAO,QAAQ,IAAI,CAAC;AAAA,UACrB;AACA,iBAAO,QAAQ,EAAE,KAAK,EAAE;AAAA,QACzB;AACA,mBAAW,OAAO,QAAQ;AACzB,oBAAU,OAAO;AACjB,qBAAW,MAAM,OAAO,GAAG,GAAG;AAC7B,kBAAM,UAAU,SAAS,EAAE;AAC3B,sBAAU,qBAAqB,QAAQ;AACvC,sBAAU,MAAM,QAAQ,uBAAuB,EAAE;AACjD,sBAAU;AAAA,UACX;AAAA,QACD;AACA;AAAA,MACD;AACC,mBAAW,MAAM,iBAAM,QAAQ,OAAO,KAAK,QAAQ,KAAK,QAAQ,CAAC,GAAG;AACnE,gBAAM,EAAC,MAAM,SAAQ,IAAI,MAAM,QAAQ,IAAI,EAAE;AAC7C,cAAI,KAAK,IAAI,MAAM,SAAS,CAAC;AAAU;AACvC,oBAAU,qBAAqB;AAC/B,oBAAU,2BAA2B;AACrC,cAAI;AAAU,sBAAU,qBAAqB;AAC7C,oBAAU;AACV,oBAAU,MAAM,QAAQ,uBAAuB,EAAE;AACjD,oBAAU;AAAA,QACX;AACA;AAAA,IACD;AACA,cAAU;AACV,WAAO;AAAA,EACR;AAAA,EACA,WAAW,OAAO,MAAM,YAAY;AACnC,QAAI,CAAC,KAAK;AAAO,aAAO,MAAM;AAC9B,UAAM,CAAC,QAAQ,GAAG,IAAI;AACtB,UAAM,QAAQ,WAAW,aAAa,IAAI,GAAG,UAAU,KAAK;AAC5D,QAAI,CAAC;AAAO,aAAO,KAAK,WAAW,cAAc,UAAU,gBAAgB;AAC3E,SAAK,QAAQ,gBAAgB,MAAM;AACnC,WAAO,MAAM,QAAQ;AAAA,EACtB;AACD;",
  "names": ["id", "buf"]
}
