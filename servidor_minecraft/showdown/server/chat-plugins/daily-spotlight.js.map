{
  "version": 3,
  "sources": ["../../../../server/chat-plugins/daily-spotlight.ts"],
  "sourcesContent": ["import {FS, Utils} from '../../lib';\r\n\r\nconst DAY = 24 * 60 * 60 * 1000;\r\nconst SPOTLIGHT_FILE = 'config/chat-plugins/spotlights.json';\r\nconst NUMBER_REGEX = /^\\s*[0-9]+\\s*$/;\r\n\r\n/** legacy - string = just url, arr is [url, width, height] */\r\ntype StoredImage = string | [string, number, number];\r\n\r\ninterface Spotlight {\r\n\timage?: StoredImage;\r\n\tdescription: string;\r\n\ttime: number;\r\n}\r\n\r\nexport let spotlights: {\r\n\t[roomid: string]: {[k: string]: Spotlight[]},\r\n} = {};\r\n\r\ntry {\r\n\tspotlights = JSON.parse(FS(SPOTLIGHT_FILE).readIfExistsSync() || \"{}\");\r\n\tfor (const roomid in spotlights) {\r\n\t\tfor (const k in spotlights[roomid]) {\r\n\t\t\tfor (const spotlight of spotlights[roomid][k]) {\r\n\t\t\t\tif (!spotlight.time) {\r\n\t\t\t\t\tspotlight.time = Date.now();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n} catch (e: any) {\r\n\tif (e.code !== 'MODULE_NOT_FOUND' && e.code !== 'ENOENT') throw e;\r\n}\r\nif (!spotlights || typeof spotlights !== 'object') spotlights = {};\r\n\r\nfunction saveSpotlights() {\r\n\tFS(SPOTLIGHT_FILE).writeUpdate(() => JSON.stringify(spotlights));\r\n}\r\n\r\nfunction nextDaily() {\r\n\tfor (const roomid in spotlights) {\r\n\t\tfor (const key in spotlights[roomid]) {\r\n\t\t\tif (spotlights[roomid][key].length > 1) {\r\n\t\t\t\tspotlights[roomid][key].shift();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tsaveSpotlights();\r\n\ttimeout = setTimeout(nextDaily, DAY);\r\n}\r\n\r\nconst midnight = new Date();\r\nmidnight.setHours(24, 0, 0, 0);\r\nlet timeout = setTimeout(nextDaily, midnight.valueOf() - Date.now());\r\n\r\nexport async function renderSpotlight(roomid: RoomID, key: string, index: number) {\r\n\tlet imgHTML = '';\r\n\tconst {image, description} = spotlights[roomid][key][index];\r\n\r\n\tif (image) {\r\n\t\tif (Array.isArray(image)) {\r\n\t\t\timgHTML = `<td><img src=\"${image[0]}\" width=\"${image[1]}\" height=\"${image[2]}\" style=\"vertical-align:middle;\"></td>`;\r\n\t\t} else {\r\n\t\t\t// legacy format\r\n\t\t\ttry {\r\n\t\t\t\tconst [width, height] = await Chat.fitImage(image, 150, 300);\r\n\t\t\t\timgHTML = `<td><img src=\"${image}\" width=\"${width}\" height=\"${height}\" style=\"vertical-align:middle;\"></td>`;\r\n\t\t\t\tspotlights[roomid][key][index].image = [image, width, height];\r\n\t\t\t} catch {}\r\n\t\t}\r\n\t}\r\n\r\n\treturn `<table style=\"text-align:center;margin:auto\"><tr><td style=\"padding-right:10px;\">${Chat.formatText(description, true)}</td>${imgHTML}</tr></table>`;\r\n}\r\n\r\nexport const destroy = () => clearTimeout(timeout);\r\n\r\nexport const pages: Chat.PageTable = {\r\n\tasync spotlights(query, user, connection) {\r\n\t\tthis.title = 'Daily Spotlights';\r\n\t\tconst room = this.requireRoom();\r\n\t\tquery.shift(); // roomid\r\n\t\tconst sortType = toID(query.shift());\r\n\t\tif (sortType && !['time', 'alphabet'].includes(sortType)) {\r\n\t\t\treturn this.errorReply(`Invalid sorting type '${sortType}' - must be either 'time', 'alphabet', or not provided.`);\r\n\t\t}\r\n\r\n\t\tlet buf = `<div class=\"pad ladder\">`;\r\n\t\tbuf += `<div class=\"pad\">`;\r\n\t\tbuf += `<button style=\"float:right;\" class=\"button\" name=\"send\" value=\"/join view-spotlights-${room.roomid}${sortType ? '-' + sortType : ''}\">`;\r\n\t\tbuf += `<i class=\"fa fa-refresh\"></i> Refresh</button>`;\r\n\t\tbuf += `<h2>Daily Spotlights</h2>`;\r\n\t\t// for posterity, all these switches are futureproofing for more sort types\r\n\t\tif (sortType) {\r\n\t\t\tlet title = '';\r\n\t\t\tswitch (sortType) {\r\n\t\t\tcase 'time':\r\n\t\t\t\ttitle = 'latest time updated';\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\ttitle = 'alphabetical';\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tbuf += `(sorted by ${title})<br />`;\r\n\t\t}\r\n\t\tif (!spotlights[room.roomid]) {\r\n\t\t\tbuf += `<p>This room has no daily spotlights.</p></div>`;\r\n\t\t} else {\r\n\t\t\tconst sortedKeys = Utils.sortBy(Object.keys(spotlights[room.roomid]), key => {\r\n\t\t\t\tswitch (sortType) {\r\n\t\t\t\tcase 'time': {\r\n\t\t\t\t\t// find most recently added/updated spotlight in that key, sort all by that\r\n\t\t\t\t\tconst sortedSpotlights = Utils.sortBy(spotlights[room.roomid][key].slice(), k => -k.time);\r\n\t\t\t\t\treturn -sortedSpotlights[0].time;\r\n\t\t\t\t}\r\n\t\t\t\t// sort alphabetically by key otherwise\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn key;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tfor (const key of sortedKeys) {\r\n\t\t\t\tbuf += `<table style=\"margin-bottom:30px;\"><th colspan=\"2\"><h3>${key}:</h3></th>`;\r\n\t\t\t\tconst keys = Utils.sortBy(spotlights[room.roomid][key].slice(), spotlight => {\r\n\t\t\t\t\tswitch (sortType) {\r\n\t\t\t\t\tcase 'time':\r\n\t\t\t\t\t\treturn -spotlight.time;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn spotlight.description;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tfor (const [i] of keys.entries()) {\r\n\t\t\t\t\tconst html = await renderSpotlight(room.roomid, key, i);\r\n\t\t\t\t\tbuf += `<tr><td>${i ? i : 'Current'}</td><td>${html}</td></tr>`;\r\n\t\t\t\t\tif (!user.can('announce', null, room)) break;\r\n\t\t\t\t}\r\n\t\t\t\tbuf += '</table>';\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn buf;\r\n\t},\r\n};\r\n\r\nexport const commands: Chat.ChatCommands = {\r\n\tremovedaily(target, room, user) {\r\n\t\troom = this.requireRoom();\r\n\t\tif (!room.persist) return this.errorReply(\"This command is unavailable in temporary rooms.\");\r\n\t\tlet [key, rest] = target.split(',');\r\n\t\tkey = toID(key);\r\n\t\tif (!key) return this.parse('/help daily');\r\n\t\tif (!spotlights[room.roomid][key]) return this.errorReply(`Cannot find a daily spotlight with name '${key}'`);\r\n\r\n\t\tthis.checkCan('announce', null, room);\r\n\t\tif (rest) {\r\n\t\t\tconst queueNumber = parseInt(rest);\r\n\t\t\tif (isNaN(queueNumber) || queueNumber < 1) return this.errorReply(\"Invalid queue number\");\r\n\t\t\tif (queueNumber >= spotlights[room.roomid][key].length) {\r\n\t\t\t\treturn this.errorReply(`Queue number needs to be between 1 and ${spotlights[room.roomid][key].length - 1}`);\r\n\t\t\t}\r\n\t\t\tspotlights[room.roomid][key].splice(queueNumber, 1);\r\n\t\t\tsaveSpotlights();\r\n\r\n\t\t\tthis.modlog(`DAILY REMOVE`, `${key}[${queueNumber}]`);\r\n\t\t\tthis.privateModAction(\r\n\t\t\t\t`${user.name} removed the ${queueNumber}th entry from the queue of the daily spotlight named '${key}'.`\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\tspotlights[room.roomid][key].shift();\r\n\t\t\tif (!spotlights[room.roomid][key].length) {\r\n\t\t\t\tdelete spotlights[room.roomid][key];\r\n\t\t\t}\r\n\t\t\tsaveSpotlights();\r\n\t\t\tthis.modlog(`DAILY REMOVE`, key);\r\n\t\t\tthis.privateModAction(`${user.name} successfully removed the daily spotlight named '${key}'.`);\r\n\t\t}\r\n\t\tChat.refreshPageFor(`spotlights-${room.roomid}`, room);\r\n\t},\r\n\tswapdailies: 'swapdaily',\r\n\tswapdaily(target, room, user) {\r\n\t\troom = this.requireRoom();\r\n\t\tif (!room.persist) return this.errorReply(\"This command is unavailable in temporary rooms.\");\r\n\t\tif (!spotlights[room.roomid]) return this.errorReply(\"There are no dailies for this room.\");\r\n\t\tthis.checkCan('announce', null, room);\r\n\r\n\t\tconst [key, indexStringA, indexStringB] = target.split(',').map(index => toID(index));\r\n\t\tif (!indexStringB) return this.parse('/help daily');\r\n\t\tif (!spotlights[room.roomid][key]) return this.errorReply(`Cannot find a daily spotlight with name '${key}'`);\r\n\t\tif (!(NUMBER_REGEX.test(indexStringA) && NUMBER_REGEX.test(indexStringB))) {\r\n\t\t\treturn this.errorReply(\"Queue numbers must be numbers.\");\r\n\t\t}\r\n\t\tconst indexA = parseInt(indexStringA);\r\n\t\tconst indexB = parseInt(indexStringB);\r\n\t\tconst queueLength = spotlights[room.roomid][key].length;\r\n\t\tif (indexA < 1 || indexB < 1 || indexA >= queueLength || indexB >= queueLength) {\r\n\t\t\treturn this.errorReply(`Queue numbers must between 1 and the length of the queue (${queueLength}).`);\r\n\t\t}\r\n\r\n\t\tconst dailyA = spotlights[room.roomid][key][indexA];\r\n\t\tconst dailyB = spotlights[room.roomid][key][indexB];\r\n\t\tspotlights[room.roomid][key][indexA] = dailyB;\r\n\t\tspotlights[room.roomid][key][indexB] = dailyA;\r\n\r\n\t\tsaveSpotlights();\r\n\r\n\t\tthis.modlog(`DAILY QUEUE SWAP`, key, `${indexA} with ${indexB}`);\r\n\t\tthis.privateModAction(`${user.name} swapped the queued dailies for '${key}' at queue numbers ${indexA} and ${indexB}.`);\r\n\t\tChat.refreshPageFor(`spotlights-${room.roomid}`, room);\r\n\t},\r\n\tqueuedaily: 'setdaily',\r\n\tqueuedailyat: 'setdaily',\r\n\treplacedaily: 'setdaily',\r\n\tasync setdaily(target, room, user, connection, cmd) {\r\n\t\troom = this.requireRoom();\r\n\t\tif (!room.persist) return this.errorReply(\"This command is unavailable in temporary rooms.\");\r\n\t\tlet key, indexString, rest;\r\n\t\tif (cmd.endsWith('at') || cmd === 'replacedaily') {\r\n\t\t\t[key, indexString, ...rest] = target.split(',');\r\n\t\t} else {\r\n\t\t\t[key, ...rest] = target.split(',');\r\n\t\t}\r\n\t\tkey = toID(key);\r\n\t\tif (!key) return this.parse('/help daily');\r\n\t\tif (key.length > 20) return this.errorReply(\"Spotlight names can be a maximum of 20 characters long.\");\r\n\t\tif (key === 'constructor') return false;\r\n\t\tif (!spotlights[room.roomid]) spotlights[room.roomid] = {};\r\n\t\tconst queueLength = spotlights[room.roomid][key]?.length || 0;\r\n\r\n\t\tif (indexString && !NUMBER_REGEX.test(indexString)) return this.errorReply(\"The queue number must be a number.\");\r\n\r\n\t\tconst index = (indexString ? parseInt(indexString) : queueLength);\r\n\t\tif (indexString && (index < 1 || index > queueLength)) {\r\n\t\t\treturn this.errorReply(`Queue numbers must be between 1 and the length of the queue (${queueLength}).`);\r\n\t\t}\r\n\r\n\t\tthis.checkCan('announce', null, room);\r\n\t\tif (!rest.length) return this.parse('/help daily');\r\n\t\tlet img, height, width;\r\n\t\tif (rest[0].trim().startsWith('http://') || rest[0].trim().startsWith('https://')) {\r\n\t\t\t[img, ...rest] = rest;\r\n\t\t\timg = img.trim();\r\n\t\t\ttry {\r\n\t\t\t\t[width, height] = await Chat.fitImage(img);\r\n\t\t\t} catch {\r\n\t\t\t\treturn this.errorReply(`Invalid image url: ${img}`);\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst desc = rest.join(',');\r\n\t\tif (Chat.stripFormatting(desc).length > 500) {\r\n\t\t\treturn this.errorReply(\"Descriptions can be at most 500 characters long.\");\r\n\t\t}\r\n\t\tif (img) img = [img, width, height] as StoredImage;\r\n\t\tconst obj = {image: img, description: desc, time: Date.now()};\r\n\t\tif (!spotlights[room.roomid][key]) spotlights[room.roomid][key] = [];\r\n\t\tif (cmd === 'setdaily') {\r\n\t\t\tspotlights[room.roomid][key].shift();\r\n\t\t\tspotlights[room.roomid][key].unshift(obj);\r\n\r\n\t\t\tthis.modlog('SETDAILY', key, `${img ? `${img}, ` : ''}${desc}`);\r\n\t\t\tthis.privateModAction(`${user.name} set the daily ${key}.`);\r\n\t\t} else if (cmd === 'queuedailyat') {\r\n\t\t\tspotlights[room.roomid][key].splice(index, 0, obj);\r\n\t\t\tthis.modlog('QUEUEDAILY', key, `queue number ${index}: ${img ? `${img}, ` : ''}${desc}`);\r\n\t\t\tthis.privateModAction(`${user.name} queued a daily ${key} at queue number ${index}.`);\r\n\t\t} else {\r\n\t\t\tspotlights[room.roomid][key][index] = obj;\r\n\t\t\tif (indexString) {\r\n\t\t\t\tthis.modlog('REPLACEDAILY', key, `queue number ${index}: ${img ? `${img}, ` : ''}${desc}`);\r\n\t\t\t\tthis.privateModAction(`${user.name} replaced the daily ${key} at queue number ${index}.`);\r\n\t\t\t} else {\r\n\t\t\t\tthis.modlog('QUEUEDAILY', key, `${img ? `${img}, ` : ''}${desc}`);\r\n\t\t\t\tthis.privateModAction(`${user.name} queued a daily ${key}.`);\r\n\t\t\t}\r\n\t\t}\r\n\t\tsaveSpotlights();\r\n\t\tChat.refreshPageFor(`spotlights-${room.roomid}`, room);\r\n\t},\r\n\tasync daily(target, room, user) {\r\n\t\troom = this.requireRoom();\r\n\t\tif (!room.persist) return this.errorReply(\"This command is unavailable in temporary rooms.\");\r\n\t\tconst key = toID(target);\r\n\t\tif (!key) return this.parse('/help daily');\r\n\r\n\t\tif (!spotlights[room.roomid]?.[key]) {\r\n\t\t\treturn this.errorReply(`Cannot find a daily spotlight with name '${key}'`);\r\n\t\t}\r\n\r\n\t\tif (!this.runBroadcast()) return;\r\n\r\n\t\tconst {image, description} = spotlights[room.roomid][key][0];\r\n\t\tconst html = await renderSpotlight(room.roomid, key, 0);\r\n\r\n\t\tthis.sendReplyBox(html);\r\n\t\tif (!this.broadcasting && user.can('ban', null, room, 'setdaily')) {\r\n\t\t\tconst code = Utils.escapeHTML(description).replace(/\\n/g, '<br />');\r\n\t\t\tthis.sendReplyBox(`<details><summary>Source</summary><code style=\"white-space: pre-wrap; display: table; tab-size: 3\">/setdaily ${key},${image ? `${image},` : ''}${code}</code></details>`);\r\n\t\t}\r\n\t\troom.update();\r\n\t},\r\n\tvsl: 'viewspotlights',\r\n\tdailies: 'viewspotlights',\r\n\tviewspotlights(target, room, user) {\r\n\t\troom = this.requireRoom();\r\n\t\tif (!room.persist) return this.errorReply(\"This command is unavailable in temporary rooms.\");\r\n\t\ttarget = toID(target);\r\n\t\treturn this.parse(`/join view-spotlights-${room.roomid}${target ? `-${target}` : ''}`);\r\n\t},\r\n\r\n\tdailyhelp() {\r\n\t\tthis.sendReply(\r\n\t\t\t`|html|<details class=\"readmore\"><summary><code>/daily [name]</code>: shows the daily spotlight.<br />` +\r\n\t\t\t`<code>!daily [name]</code>: shows the daily spotlight to everyone. Requires: + % @ # &<br />` +\r\n\t\t\t`<code>/setdaily [name], [image], [description]</code>: sets the daily spotlight. Image can be left out. Requires: % @ # &</summary>` +\r\n\t\t\t`<code>/queuedaily [name], [image], [description]</code>: queues a daily spotlight. At midnight, the spotlight with this name will automatically switch to the next queued spotlight. Image can be left out. Requires: % @ # &<br />` +\r\n\t\t\t`<code>/queuedailyat [name], [queue number], [image], [description]</code>: inserts a daily spotlight into the queue at the specified number (starting from 1). Requires: % @ # &<br />` +\r\n\t\t\t`<code>/replacedaily [name], [queue number], [image], [description]</code>: replaces the daily spotlight queued at the specified number. Requires: % @ # &<br />` +\r\n\t\t\t`<code>/removedaily [name][, queue number]</code>: if no queue number is provided, deletes all queued and current spotlights with the given name. If a number is provided, removes a specific future spotlight from the queue. Requires: % @ # &<br />` +\r\n\t\t\t`<code>/swapdaily [name], [queue number], [queue number]</code>: swaps the two queued spotlights at the given queue numbers. Requires: % @ # &<br />` +\r\n\t\t\t`<code>/viewspotlights [sorter]</code>: shows all current spotlights in the room. For staff, also shows queued spotlights.` +\r\n\t\t\t`[sorter] can either be unset, 'time', or 'alphabet'. These sort by either the time added, or alphabetical order.` +\r\n\t\t\t`</details>`\r\n\t\t);\r\n\t},\r\n};\r\n\r\nexport const handlers: Chat.Handlers = {\r\n\tonRenameRoom(oldID, newID) {\r\n\t\tif (spotlights[oldID]) {\r\n\t\t\tif (!spotlights[newID]) spotlights[newID] = {};\r\n\t\t\tObject.assign(spotlights[newID], spotlights[oldID]);\r\n\t\t\tdelete spotlights[oldID];\r\n\t\t\tsaveSpotlights();\r\n\t\t}\r\n\t},\r\n};\r\n\r\nprocess.nextTick(() => {\r\n\tChat.multiLinePattern.register('/(queue|set|replace)daily(at | )');\r\n});\r\n"],
  "mappings": "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",
  "names": []
}
