{
  "version": 3,
  "sources": ["../../../server/replays.ts"],
  "sourcesContent": ["/**\r\n * Code for uploading and managing replays.\r\n *\r\n * Ported to TypeScript by Annika and Mia.\r\n */\r\nimport {SQL, PGDatabase} from '../lib/database';\r\n\r\nexport const replaysDB = Config.replaysdb ? new PGDatabase(Config.replaysdb) : null!;\r\n\r\nexport const replays = replaysDB?.getTable<\r\nReplayRow\r\n>('replays', 'id');\r\n\r\nexport const replayPlayers = replaysDB?.getTable<{\r\n\tplayerid: string,\r\n\tformatid: string,\r\n\tid: string,\r\n\trating: number | null,\r\n\tuploadtime: number,\r\n\tprivate: ReplayRow['private'],\r\n\tpassword: string | null,\r\n\tformat: string,\r\n\t/** comma-delimited player names */\r\n\tplayers: string,\r\n}>('replayplayers');\r\n\r\n// must be a type and not an interface to qualify as an SQLRow\r\n// eslint-disable-next-line\r\nexport type ReplayRow = {\r\n\tid: string,\r\n\tformat: string,\r\n\t/** player names delimited by `,`; starting with `!` denotes that player wants the replay private */\r\n\tplayers: string,\r\n\tlog: string,\r\n\tinputlog: string | null,\r\n\tuploadtime: number,\r\n\tviews: number,\r\n\tformatid: string,\r\n\trating: number | null,\r\n\t/**\r\n\t * 0 = public\r\n\t * 1 = private (with or without password)\r\n\t * 2 = NOT USED; ONLY USED IN PREPREPLAY\r\n\t * 3 = deleted\r\n\t * 10 = autosaved\r\n\t */\r\n\tprivate: 0 | 1 | 2 | 3 | 10,\r\n\tpassword: string | null,\r\n};\r\ntype Replay = Omit<ReplayRow, 'formatid' | 'players' | 'password' | 'views'> & {\r\n\tplayers: string[],\r\n\tviews?: number,\r\n\tpassword?: string | null,\r\n};\r\n\r\nexport const Replays = new class {\r\n\tdb = replaysDB as unknown;\r\n\treplaysTable = replays as unknown;\r\n\treplayPlayersTable = replayPlayers as unknown;\r\n\treadonly passwordCharacters = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\ttoReplay(this: void, row: ReplayRow) {\r\n\t\tconst replay: Replay = {\r\n\t\t\t...row,\r\n\t\t\tplayers: row.players.split(',').map(player => player.startsWith('!') ? player.slice(1) : player),\r\n\t\t};\r\n\t\tif (!replay.password && replay.private === 1) replay.private = 2;\r\n\t\treturn replay;\r\n\t}\r\n\ttoReplays(this: void, rows: ReplayRow[]) {\r\n\t\treturn rows.map(row => Replays.toReplay(row));\r\n\t}\r\n\r\n\ttoReplayRow(this: void, replay: Replay) {\r\n\t\tconst formatid = toID(replay.format);\r\n\t\tconst replayData: ReplayRow = {\r\n\t\t\tpassword: null,\r\n\t\t\tviews: 0,\r\n\t\t\t...replay,\r\n\t\t\tplayers: replay.players.join(','),\r\n\t\t\tformatid,\r\n\t\t};\r\n\t\tif (replayData.private === 1 && !replayData.password) {\r\n\t\t\treplayData.password = Replays.generatePassword();\r\n\t\t} else {\r\n\t\t\tif (replayData.private === 2) replayData.private = 1;\r\n\t\t\treplayData.password = null;\r\n\t\t}\r\n\t\treturn replayData;\r\n\t}\r\n\r\n\tasync add(replay: Replay) {\r\n\t\tconst fullid = replay.id + (replay.password ? `-${replay.password}pw` : '');\r\n\r\n\t\t// obviously upsert exists but this is the easiest way when multiple things need to be changed\r\n\t\tconst replayData = this.toReplayRow(replay);\r\n\t\ttry {\r\n\t\t\tawait replays.insert(replayData);\r\n\t\t\tfor (const playerName of replay.players) {\r\n\t\t\t\tawait replayPlayers.insert({\r\n\t\t\t\t\tplayerid: toID(playerName),\r\n\t\t\t\t\tformatid: replayData.formatid,\r\n\t\t\t\t\tid: replayData.id,\r\n\t\t\t\t\trating: replayData.rating,\r\n\t\t\t\t\tuploadtime: replayData.uploadtime,\r\n\t\t\t\t\tprivate: replayData.private,\r\n\t\t\t\t\tpassword: replayData.password,\r\n\t\t\t\t\tformat: replayData.format,\r\n\t\t\t\t\tplayers: replayData.players,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t} catch (e: any) {\r\n\t\t\tif (e?.routine !== 'NewUniquenessConstraintViolationError') throw e;\r\n\t\t\tawait replays.update(replay.id, {\r\n\t\t\t\tlog: replayData.log,\r\n\t\t\t\tinputlog: replayData.inputlog,\r\n\t\t\t\trating: replayData.rating,\r\n\t\t\t\tprivate: replayData.private,\r\n\t\t\t\tpassword: replayData.password,\r\n\t\t\t});\r\n\t\t\tawait replayPlayers.updateAll({\r\n\t\t\t\trating: replayData.rating,\r\n\t\t\t\tprivate: replayData.private,\r\n\t\t\t\tpassword: replayData.password,\r\n\t\t\t})`WHERE id = ${replay.id}`;\r\n\t\t}\r\n\t\treturn fullid;\r\n\t}\r\n\r\n\tasync get(id: string): Promise<Replay | null> {\r\n\t\tconst replayData = await replays.get(id);\r\n\t\tif (!replayData) return null;\r\n\r\n\t\tawait replays.update(replayData.id, {views: SQL`views + 1`});\r\n\r\n\t\treturn this.toReplay(replayData);\r\n\t}\r\n\r\n\tasync edit(replay: Replay) {\r\n\t\tconst replayData = this.toReplayRow(replay);\r\n\t\tawait replays.update(replay.id, {private: replayData.private, password: replayData.password});\r\n\t}\r\n\r\n\tgeneratePassword(length = 31) {\r\n\t\tlet password = '';\r\n\t\tfor (let i = 0; i < length; i++) {\r\n\t\t\tpassword += this.passwordCharacters[Math.floor(Math.random() * this.passwordCharacters.length)];\r\n\t\t}\r\n\r\n\t\treturn password;\r\n\t}\r\n\r\n\tsearch(args: {\r\n\t\tpage?: number, isPrivate?: boolean, byRating?: boolean,\r\n\t\tformat?: string, username?: string, username2?: string,\r\n\t}): Promise<Replay[]> {\r\n\t\tconst page = args.page || 0;\r\n\t\tif (page > 100) return Promise.resolve([]);\r\n\r\n\t\tlet limit1 = 50 * (page - 1);\r\n\t\tif (limit1 < 0) limit1 = 0;\r\n\r\n\t\tconst isPrivate = args.isPrivate ? 1 : 0;\r\n\r\n\t\tconst format = args.format ? toID(args.format) : null;\r\n\r\n\t\tif (args.username) {\r\n\t\t\tconst order = args.byRating ? SQL`ORDER BY rating DESC` : SQL`ORDER BY uploadtime DESC`;\r\n\t\t\tconst userid = toID(args.username);\r\n\t\t\tif (args.username2) {\r\n\t\t\t\tconst userid2 = toID(args.username2);\r\n\t\t\t\tif (format) {\r\n\t\t\t\t\treturn replays.query()`SELECT \r\n\t\t\t\t\t\t\tp1.uploadtime AS uploadtime, p1.id AS id, p1.format AS format, p1.players AS players, \r\n\t\t\t\t\t\t\tp1.rating AS rating, p1.password AS password, p1.private AS private \r\n\t\t\t\t\t\tFROM replayplayers p1 INNER JOIN replayplayers p2 ON p2.id = p1.id \r\n\t\t\t\t\t\tWHERE p1.playerid = ${userid} AND p1.formatid = ${format} AND p1.private = ${isPrivate}\r\n\t\t\t\t\t\t\tAND p2.playerid = ${userid2} \r\n\t\t\t\t\t\t${order} LIMIT ${limit1}, 51;`.then(this.toReplays);\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn replays.query()`SELECT \r\n\t\t\t\t\t\t\tp1.uploadtime AS uploadtime, p1.id AS id, p1.format AS format, p1.players AS players, \r\n\t\t\t\t\t\t\tp1.rating AS rating, p1.password AS password, p1.private AS private \r\n\t\t\t\t\t\tFROM replayplayers p1 INNER JOIN replayplayers p2 ON p2.id = p1.id \r\n\t\t\t\t\t\tWHERE p1.playerid = ${userid} AND p1.private = ${isPrivate}\r\n\t\t\t\t\t\t\tAND p2.playerid = ${userid2} \r\n\t\t\t\t\t\t${order} LIMIT ${limit1}, 51;`.then(this.toReplays);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (format) {\r\n\t\t\t\t\treturn replays.query()`SELECT uploadtime, id, format, players, rating, password FROM replayplayers \r\n\t\t\t\t\t\tWHERE playerid = ${userid} AND formatid = ${format} AND private = ${isPrivate} \r\n\t\t\t\t\t\t${order} LIMIT ${limit1}, 51;`.then(this.toReplays);\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn replays.query()`SELECT uploadtime, id, format, players, rating, password FROM replayplayers \r\n\t\t\t\t\t\tWHERE playerid = ${userid} private = ${isPrivate} \r\n\t\t\t\t\t\t${order} LIMIT ${limit1}, 51;`.then(this.toReplays);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (args.byRating) {\r\n\t\t\treturn replays.query()`SELECT uploadtime, id, format, players, rating, password \r\n\t\t\t\tFROM replays \r\n\t\t\t\tWHERE private = ${isPrivate} AND formatid = ${format} ORDER BY rating DESC LIMIT ${limit1}, 51`\r\n\t\t\t\t.then(this.toReplays);\r\n\t\t} else {\r\n\t\t\treturn replays.query()`SELECT uploadtime, id, format, players, rating, password \r\n\t\t\t\tFROM replays \r\n\t\t\t\tWHERE private = ${isPrivate} AND formatid = ${format} ORDER BY uploadtime DESC LIMIT ${limit1}, 51`\r\n\t\t\t\t.then(this.toReplays);\r\n\t\t}\r\n\t}\r\n\r\n\tfullSearch(term: string, page = 0): Promise<Replay[]> {\r\n\t\tif (page > 0) return Promise.resolve([]);\r\n\r\n\t\tconst patterns = term.split(',').map(subterm => {\r\n\t\t\tconst escaped = subterm.replace(/%/g, '\\\\%').replace(/_/g, '\\\\_');\r\n\t\t\treturn `%${escaped}%`;\r\n\t\t});\r\n\t\tif (patterns.length !== 1 && patterns.length !== 2) return Promise.resolve([]);\r\n\r\n\t\tconst secondPattern = patterns.length >= 2 ? SQL`AND log LIKE ${patterns[1]} ` : undefined;\r\n\r\n\t\treturn replays.query()`SELECT /*+ MAX_EXECUTION_TIME(10000) */ \r\n\t\t\tuploadtime, id, format, players, rating FROM ps_replays \r\n\t\t\tWHERE private = 0 AND log LIKE ${patterns[0]} ${secondPattern}\r\n\t\t\tORDER BY uploadtime DESC LIMIT 10;`.then(this.toReplays);\r\n\t}\r\n\r\n\trecent() {\r\n\t\treturn replays.selectAll(\r\n\t\t\tSQL`uploadtime, id, format, players, rating`\r\n\t\t)`WHERE private = 0 ORDER BY uploadtime DESC LIMIT 50`.then(this.toReplays);\r\n\t}\r\n};\r\n\r\nexport default Replays;\r\n"],
  "mappings": "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",
  "names": []
}
